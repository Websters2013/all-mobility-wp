!function(){var e=!0;$(function(){$(".site__menu").each(function(){new n($(this)),new i($(this))}),$(".not-found").each(function(){new t($(this))}),$(".confirmation").each(function(){new t($(this))})});var n=function(e){var n=e,i=n.find(".site__menu-item"),t=n.find(".site__menu-icon"),o=$(window),s=null,d=o.width(),a=function(){o.on({resize:function(){d>o.width()&&(d=o.width(),o.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),t.on({click:function(){var e=jQuery(this),n=e.parents("li"),i=n.find(".site__menu-sub");return o.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),i.slideUp()):(n.addClass("opened"),i.slideDown())),!1}}),i.on({mouseenter:function(){if(o.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");o.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(o.width()>=1024){$(".featured-product__loading").addClass("visible"),s&&(clearTimeout(s),s=null);var e=$(this),i=e.data("product");s=setTimeout(function(){n.find(".featured-product").find(".featured-product__title").text(i.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",i.src),n.find(".featured-product").find(".btn").attr("href",i.href),n.find(".featured-product").find(".featured-product__price span").text(i.price),i.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),i.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(i.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),s=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){o.width()>=1024&&$(this).removeClass("opened")})},r=function(){a()};r()},i=function(n){var i,t,o=this,s=n,d=$(window),a=!1,r=$(".site__header"),c=$(".site__hidden-items"),u=r.innerHeight(),f=$(".site__header-btn"),l=$(".site__hidden-close"),h=$(".search"),p=$(".search-btn"),_=$(".search__cancel"),m=$(".site__hidden-btn"),v=$(".site"),C=$("html"),w=($(".site__content"),function(){$(document).on("click",".search",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click","body",function(){H()}),f.on({click:function(){k($(this))}}),l.on({click:function(){return y(),!1}}),p.on({click:function(){return T($(this)),!1}}),_.on({click:function(){return H(),!1}}),d.on({scroll:function(e){g(),a=d.scrollTop()>=u,0==d.scrollTop()&&r.removeClass("site__header_hidden")},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;b(i)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;b(i)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>i?b(-1):n<i&&b(1),i=n},keydown:function(e){switch(e.which){case 32:b(1);break;case 33:b(-1);break;case 34:b(1);break;case 35:b(1);break;case 36:b(-1);break;case 38:b(-1);break;case 40:b(1);break;default:return}},resize:function(){d.width()>=1024&&(v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""})},10))}})}),b=function(n){n>0&&!r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&r.addClass("site__header_hidden"),n<0&&r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&e&&r.removeClass("site__header_hidden")},g=function(){d.scrollTop()>u+150?r.addClass("fixed"):r.removeClass("fixed")},k=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),c.removeClass("opened")):(n.addClass("opened"),c.addClass("opened")),t=d.scrollTop(),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":"scroll"}),setTimeout(function(){v.css({height:"100%"})},10)},300)},T=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")):(n.addClass("opened"),h.addClass("active"),m.addClass("hidden"))},y=function(){f.removeClass("opened"),c.removeClass("opened"),h.find("input").focusout(),v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""}),d.scrollTop(t)},10)},H=function(){p.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")},x=function(){s[0].obj=o,w(),g()};x()},t=function(e){var n=e,i=$(window),t=i.width(),o=function(){i.on({resize:function(){t!=i.width()&&(t=i.width(),s())}})},s=function(){console.log(34),n.css({minHeight:""}),n.css({minHeight:i.height()-$(".site__header").innerHeight()-$(".site__footer").innerHeight()-$(".breadcrumbs").innerHeight()})},d=function(){o(),s()};d()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return v($(this).attr("data-popup")),!1}}),u.find(">div").on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},v=function(o){m(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
"use strict";!function(){$(function(){$.each($(".product__slider"),function(){new e($(this))}),$.each($(".featured-products"),function(){new i($(this))})});var e=function(e){var i,s,n=this,t=e,d=$(window),l=!1,o=0,r=function(){t[0].obj=n,c()},c=function(){a(),i=new Swiper(t.find(".gallery-top"),{slidesPerView:"1",loop:l,loopedSlides:o,centeredSlides:!1,spaceBetween:30,onSlideChangeEnd:function(e){if(l)$(".swiper-slide .product__slider-thumbs").css({"border-color":"transparent"}),$(".swiper-slide-active .product__slider-thumbs").css({"border-color":"rgba(244, 121, 32, 0.5)"});else{var i=e.activeIndex;$(s.slides).removeClass("is-selected"),$(s.slides).eq(i).addClass("is-selected"),s.slideTo(i,500,!1)}}}),s=new Swiper(t.find(".gallery-thumbs"),{centeredSlides:!1,slidesPerView:"4",touchRatio:.2,loop:l,loopedSlides:o,slideToClickedSlide:!0,breakpoints:{1440:{slidesPerView:"3"}},onInit:function(e){l||$(e.slides).eq(e.activeIndex).addClass("is-selected")},onClick:function(e,s){if(!l){var n=e.clickedIndex;e.activeIndex=n,e.updateClasses(),$(e.slides).removeClass("is-selected"),$(e.clickedSlide).addClass("is-selected"),i.slideTo(n,500,!1)}}}),i.params.control=s,s.params.control=i,l&&$(".swiper-slide-active .product__slider-thumbs").css({"border-color":"rgba(244, 121, 32, 0.5)"})},a=function(){d.width()<1440?t.find(".gallery-thumbs .swiper-slide").length>=3&&(l=!0,o=t.find(".gallery-thumbs .swiper-slide").length):t.find(".gallery-thumbs .swiper-slide").length>=4&&(l=!0,o=t.find(".gallery-thumbs .swiper-slide").length)};r()},i=function(e){var i,s,n=this,t=e,d=$(window),l=!1,o=function(){t[0].obj=n,r(),d.width()<=768?s=!1:(s=!0,a())},r=function(){d.on({resize:function(){d.width()<=768?s&&(s=!1,c()):s||(s=!0,a())}})},c=function(){i.destroy(!0,!0)},a=function(){p(),i=new Swiper(t.find(".swiper-container"),{pagination:t.find(".swiper-pagination"),slidesPerView:5,paginationClickable:!0,speed:600,loop:l,autoplay:5e3,autoplayDisableOnInteraction:!1,nextButton:t.find(".swiper-button-next"),prevButton:t.find(".swiper-button-prev"),breakpoints:{1440:{slidesPerView:4}}})},p=function(){d.width()>=1024?t.find(".swiper-slide").length>=4&&(l=!0):d.width()>=1425&&t.find(".swiper-slide").length>=5&&(l=!0),l||t.find(".featured-products__controls").css({display:"none"})};o()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,d=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),l=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(l),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),l.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){l.text($(this).find("option:selected").text())}),$(document).on("change","select",function(){$(this).prev().text($(this).find("option:selected").text())}),1!=s||d||p.on({click:function(e){e.stopPropagation(),u?v():y()}}),f.on({click:function(){u&&v()}})},g=function(){!s||d?x():1==s&&_()},_=function(){p.addClass("websters-select_custom")},x=function(){p.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset(),0),d=o.find("option:selected").index(),l=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+l+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),p.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:-2,top:p.outerHeight()-4}),s=t.outerHeight(),s>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".category").each(function(){new e($(this))})});var e=function(e){var a=e,t=$("body").data("action"),i=new XMLHttpRequest,n=a.find(".category__filters-item span"),s=a.find(".category__filters-title"),r=a.find(".category__filters-items"),c=(r.find("form"),a.find(".category__filtered-close")),o=a.find(".category__filters-list"),d=a.find(".category__filtered"),l=a.find(".category__filtered-list"),f=0,p=a.find(".category__filters-title"),v=a.find(".category__filters-title-inner"),h=a.find(".category__filtered .btn, .category__filters-clear"),u=(a.find(".category__filtered-remove"),!1),g=$('<div class="loading"></div>'),_=a.find("input[type=hidden].value-check"),y=a.find("input[type=hidden].current-page"),m=a.find("#items-page"),b=a.find("#sorting-date"),C=a.find(".category__wrap").data("rate-path"),w=a.find(".category__filters-apply"),x=$(window),k={},T=null,I=[],P=function(){x.on({resize:function(){n.each(function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")&&t.css({"min-height":t.find(">div").innerHeight()})}),x.width()>=1024&&$(".site__content").css({"z-index":""})},load:function(){}}),n.on({click:function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")?(a.removeClass("opened"),t.css({"min-height":0,height:0})):(a.addClass("opened"),t.css({"min-height":t.find(">div").innerHeight()}),setTimeout(function(){t.css({height:"auto"})},310))}}),s.on({click:function(){M()}}),h.on({click:function(){return y.val("1"),H(),!1}}),$(document).on("click",".pagination a",function(){var e=$(this),a=parseInt(e.text());return e.hasClass("pagination__prev")?1!=parseInt(y.val())&&(y.val(y.val()-1),z(),S()):e.hasClass("pagination__next")?e.prev().hasClass("active")||(y.val(parseInt(y.val())+1),z(),S()):a!=parseInt(y.val())&&(y.val(a),z(),S()),!1}),$(document).on("click",".category__filtered-remove",function(){var e=$(this),a=e.parent(),t=a.data("id"),i=a.data("name");return y.val("1"),F(t,i),!1}),c.on({click:function(){return M(),!1}}),w.on({click:function(){return M(),!1}}),o.find("input[type=checkbox]").on({change:function(){var e=$(this),a=e.next(),t=a.clone().children().remove().end().text(),i=e.attr("name"),n=e.data("id"),s=e.parents(".category__filters-item").find("span")[0].innerText;u=e.prop("checked"),x.width()>=1024&&(z(),M()),q(i,n,u),y.val("1"),j(t,n,i,s),S()}}),m.on({change:function(){y.val("1"),z(),S()}}),b.on({change:function(){y.val("1"),z(),S()}})},j=function(e,a,t,i){u?l.append("<li data-name="+t+' data-id="'+a+'">'+i+": "+e+' <a href="#" class="category__filtered-remove"></a></li>'):l.find('li[data-id="'+a+'"]').remove(),f=l.find("li").length,f>0?(d.removeClass("hidden"),p.find("span").html("("+f+")"),v.find("span").html("("+f+")"),p.addClass("selected"),h.removeClass("hidden")):(d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),h.addClass("hidden"))},z=function(){g=$('<div class="loading"></div>'),$(".category__content").append(g)},D=function(){T&&(clearTimeout(T),T=null),T=setTimeout(function(){$(".loading").addClass("hidden")},300),T=setTimeout(function(){$(".loading").remove()},620)},H=function(){d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),l.find("li").remove(),o.find("input[type=checkbox]").prop("checked",!1),_.val(""),z(),S()},F=function(e,a){o.find('input[data-id="'+e+'"]').prop("checked",!1),u=!1,j("",e,"",""),z(),q(a,e,u),S()},M=function(){s.hasClass("opened")?(s.removeClass("opened"),r.removeClass("opened"),$(".site__content").css({"z-index":""})):(s.addClass("opened"),r.addClass("opened"),x.width()<1024&&$(".site__content").css({"z-index":100}))},O=function(e){var a=parseInt(e.settings.pagesAll),t=parseInt(e.settings.currentPage);if(y.val(t),1!=a&&0!=a){var i='<div class="pagination">';if(i+='<a href="#" class="pagination__prev"></a>',a<=7)for(var n=1;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else{if(t<=3||t>a-3){for(var n=1;n<=3;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>";for(var n=a-2;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>"}if(t>3&&t<=a-3){if(i+='<a href="#">1</a>',i+="<span>...</span>",t-1>3&&t+1<=a-3)for(var n=t-1;n<=t+1;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t-1<=3)for(var n=t;n<=t+2;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t+1>=a-3)for(var n=t-2;n<=t;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}if(8==a&&t>3&&t<=a-3){i+='<a href="#">1</a>',i+="<span>...</span>";for(var n=4;n<=5;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}}i+='<a href="#" class="pagination__next"></a>',i+="</div>",$(".pagination-wrap").html(i)}else $(".pagination").length&&$(".pagination").remove()},R=function(e){var a=e.products,t='<div class="products-subcategory">',i=[];if(void 0!=k.price)for(var n=0;n<=k.price.length-1;n++){var s=parseFloat(k.price[n].replace("$","").replace(",",""));i.push(s)}if(i.length)var r=Math.min.apply(null,i);$.each(a,function(){var e=this,a=e.price[0],n=e.oldPrice[0];if(i.length)for(var s=0;s<=e.price.length-1;s++){var c=parseFloat(e.price[s].replace("$","").replace(",",""));if(c>=r){a=e.price[s],n=e.oldPrice[s];break}}if(t+='<div class="products-subcategory__item">',void 0!=e.featured&&""!=e.featured&&(t+='<span class="site__featured">'+e.featured+"</span>"),t+='<div class="products-subcategory__head">                                            <div>                                                <a href="'+e.urlDetails+'" class="products-subcategory__pic" style="background-image: url('+e.picture+')"></a>                                            </div>                                            <div>                                                <h2 class="products-subcategory__title"><a href="'+e.urlDetails+'">'+e.title+"</a></h2>",void 0!=e.rate){t+='<div class="rate">';for(var s=0;s<=e.rate.starsCount-1;s++)t+='<img src="'+C+'img/star.png" width="60" height="50" alt="">&nbsp;';t+='<a href="'+e.rate.urlReviews+'" class="rate__reviews">'+e.rate.reviewsCount+"</a>                                                </div>"}if(t+='</div>                                        </div>                                        <div class="products-subcategory__content">',void 0!=e.content.description&&""!=e.content.description){t+='<div>                                        <ul class="products-subcategory__description">';for(var s=0;s<=e.content.description.length-1;s++)t+="<li>"+e.content.description[s]+"</li>";t+="</ul>                                    </div>"}if(t+='<div>                                            <div class="products-subcategory__items">',void 0!=e.content.specification&&""!=e.content.specification){t+='<div>                    <div class="products-subcategory__specification">                                                        <div class="products-subcategory__specification-head">';for(var s=0;s<=e.content.specification.head.length-1;s++)t+='<div style="width:'+100/e.content.specification.head.length+'%">'+e.content.specification.head[s]+"</div>";t+='</div>                                                        <div class="products-subcategory__specification-content">';for(var s=0;s<=e.content.specification.content.length-1;s++)t+='<div style="width:'+100/e.content.specification.head.length+'%">'+e.content.specification.content[s]+"</div>";t+="</div>                                                    </div>                                                </div>"}t+=void 0!=n&&""!=n?'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        <del>'+n+"</del> "+a+"                                                    </div>":'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        '+a+"                                                    </div>",t+='<a href="'+e.urlDetails+'" class="btn btn_3">see details</a>                                                </div>                                            </div>                                        </div>                                    </div>                                    </div>'}),t+="</div>",$(".category__wrap").html(t),D()},S=function(){i.abort(),i=$.ajax({url:t,data:{action:"get_filtered_products",value:_.val(),pageSorting:m.val(),dateSorting:b.val(),currentPage:y.val(),idCategory:a.data("id-category")},dataType:"json",type:"get",success:function(e){R(e),O(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}})},q=function(e,a,t){if(t)if(k.hasOwnProperty(e))for(var i in k)i==e&&k[i].push(a);else k[e]=[a];else{for(var i in k)if(i==e){var n=k[i].indexOf(a);n!=-1&&k[i].splice(n,1)}0==k[e].length&&delete k[e]}var s="",r="",c="",o=[];for(var d in k){I=[];var l=k[d];I.push(l);for(var n=0;n<=I.length-1;n++)r=I.join(",");c=d+"="+r,o.push(c),s=o.join("&")}_.val(s)},A=function(){P(),a.hasClass("category_sub")&&(z(),S())};A()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var i=e,a=i.find("input[type=search]"),t=new XMLHttpRequest,n=i.data("path"),s=0,o=0,r=a.val(),c=i.find(".search__result"),l=function(){a.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==c.find(".search__found li").filter(".active").length&&i.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var a=$(this).val();a.length>0?h($(this),a.length):""==$(this).val()&&(c.removeClass("visible"),s=0)}},keydown:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:return 0==c.find(".search__found li").filter(".active").length?window.location.href=i.data("action"):window.location.href=c.find(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),s=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),s==o&&(s=0))}}}),$("html").click(function(){c.removeClass("visible"),s=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),i=e.find("a").text();a.val(i),c.removeClass("visible"),s=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){c.find(".search__found li").removeClass("active"),i.parents().hasClass("site__footer")?(38==e&&s<o?s++:40==e&&s>0&&s--,s>0?(c.find(".search__found li").eq(-1-(s-1)).addClass("active"),a.val(c.find(".search__found li").eq(-1-(s-1)).find("a").text())):a.val(r)):(40==e&&s<o?s++:38==e&&s>0&&s--,s>0?(c.find(".search__found li").eq(s-1).addClass("active"),a.val(c.find(".search__found li").eq(s-1).find("a").text())):a.val(r))},f=function(e){var e=e,i=e.categories,a=0!=i.length,t=e.products,n=[],s=[],r=!0,l='<div class="top-products__wrap">';$.each(t,function(){var e=this;l+='<div>                                            <div class="top-products__item">                                                <div class="top-products__pic">                                                    <img src="'+e.src+'" width="414" height="414" alt="'+e.alt+'">                                                </div>                                                <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                <h3 class="top-products__item-title">'+e.name+'</h3>                                                <a href="'+e.href+'" class="top-products__btn">view</a>                                            </div>                                        </div>',a||n.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),l+="</div>",c.find("div").eq(1).find(".top-products").html(l);var d='<ul class="search__found">';if(a)$.each(i,function(){var e=this.subcategories,i=this.urlSubcategories,a="";if(void 0!=e){for(var t=0;t<=e.length-1;t++)a+='<li class="search__found-sub"><a href="'+i[t]+'">'+e[t]+"</a></li>";a+=""}d+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+a});else{for(var f=0;f<=n.length-1;f++)if(r&&(s.push(n[f]),r=!1),s[s.length-1][0]!=n[f][0])s.push(n[f]);else for(var h=0;h<=n[f].length-1;h++)for(var u=0;u<=n[f][2].length-1;u++)s[s.length-1][2].indexOf(n[f][2][u])==-1&&s[s.length-1][2].push(n[f][2][u]);for(var v=0,f=0;f<=s.length-1;f++){for(var h=0;h<=s[f].length-1;h++){for(var _="",u=0;u<=s[f][2].length-1;u++)_+='<li class="search__found-sub"><a href="'+s[f][3][u]+'">'+s[f][2][u]+"</a></li>",v++;_+=""}d+='<li><a href="'+s[f][1]+'">'+s[f][0]+"</a></li>"+_}}d+="</ul>",c.find("div:first").html(d),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")},h=function(e,i){return t.abort(),t=$.ajax({url:n,data:{value:e.val(),action:"main_search"},dataType:"json",type:"get",success:function(e){f(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}}),!1},u=function(){l()};u()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
