!function(){var e=!0;$(function(){$(".site__menu").each(function(){new n($(this)),new i($(this))}),$(".not-found").each(function(){new t($(this))}),$(".confirmation").each(function(){new t($(this))}),$("#wpsl-stores").each(function(){$(this).perfectScrollbar({wheelPropagation:!0})})});var n=function(e){var n=e,i=n.find(".site__menu-item"),t=n.find(".site__menu-icon"),o=$(window),s=null,d=o.width(),a=function(){o.on({resize:function(){d>o.width()&&(d=o.width(),o.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),t.on({click:function(){var e=jQuery(this),n=e.parents("li"),i=n.find(".site__menu-sub");return o.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),i.slideUp()):(n.addClass("opened"),i.slideDown())),!1}}),i.on({mouseenter:function(){if(o.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");o.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(o.width()>=1024){$(".featured-product__loading").addClass("visible"),s&&(clearTimeout(s),s=null);var e=$(this),i=e.data("product");s=setTimeout(function(){n.find(".featured-product").find(".featured-product__title").text(i.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",i.src),n.find(".featured-product").find(".btn").attr("href",i.href),n.find(".featured-product").find(".featured-product__price span").text(i.price),i.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),i.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(i.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),s=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){o.width()>=1024&&$(this).removeClass("opened")})},r=function(){a()};r()},i=function(n){var i,t,o=this,s=n,d=$(window),a=!1,r=$(".site__header"),c=$(".site__hidden-items"),u=r.innerHeight(),l=$(".site__header-btn"),f=$(".site__hidden-close"),h=$(".search"),p=$(".search-btn"),_=$(".search__cancel"),m=$(".site__hidden-btn"),v=$(".site"),C=$("html"),w=($(".site__content"),function(){$(document).on("click",".search",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click","body",function(){H()}),l.on({click:function(){k($(this))}}),f.on({click:function(){return y(),!1}}),p.on({click:function(){return T($(this)),!1}}),_.on({click:function(){return H(),!1}}),d.on({scroll:function(e){g(),a=d.scrollTop()>=u,0==d.scrollTop()&&r.removeClass("site__header_hidden")},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;b(i)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;b(i)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>i?b(-1):n<i&&b(1),i=n},keydown:function(e){switch(e.which){case 32:b(1);break;case 33:b(-1);break;case 34:b(1);break;case 35:b(1);break;case 36:b(-1);break;case 38:b(-1);break;case 40:b(1);break;default:return}},resize:function(){d.width()>=1024&&(v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""})},10))}})}),b=function(n){n>0&&!r.hasClass("site__header_hidden")&&!l.hasClass("opened")&&a&&r.addClass("site__header_hidden"),n<0&&r.hasClass("site__header_hidden")&&!l.hasClass("opened")&&a&&e&&r.removeClass("site__header_hidden")},g=function(){d.scrollTop()>u+150?r.addClass("fixed"):r.removeClass("fixed")},k=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),c.removeClass("opened")):(n.addClass("opened"),c.addClass("opened")),t=d.scrollTop(),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":"scroll"}),setTimeout(function(){v.css({height:"100%"})},10)},300)},T=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")):(n.addClass("opened"),h.addClass("active"),m.addClass("hidden"))},y=function(){l.removeClass("opened"),c.removeClass("opened"),h.find("input").focusout(),v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""}),d.scrollTop(t)},10)},H=function(){p.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")},x=function(){s[0].obj=o,w(),g()};x()},t=function(e){var n=e,i=$(window),t=i.width(),o=function(){i.on({resize:function(){t!=i.width()&&(t=i.width(),s())}})},s=function(){console.log(34),n.css({minHeight:""}),n.css({minHeight:i.height()-$(".site__header").innerHeight()-$(".site__footer").innerHeight()-$(".breadcrumbs").innerHeight()})},d=function(){o(),s()};d()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return v($(this).attr("data-popup")),!1}}),u.find(">div").on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},v=function(o){m(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
"use strict";!function(){$(function(){$.each($(".product__slider"),function(){new e($(this))}),$.each($(".featured-products"),function(){new i($(this))})});var e=function(e){var i,s,n=this,t=e,d=$(window),l=!1,o=0,r=function(){t[0].obj=n,c()},c=function(){a(),i=new Swiper(t.find(".gallery-top"),{slidesPerView:"1",loop:l,loopedSlides:o,centeredSlides:!1,spaceBetween:30,onSlideChangeEnd:function(e){if(l)$(".swiper-slide .product__slider-thumbs").css({"border-color":"transparent"}),$(".swiper-slide-active .product__slider-thumbs").css({"border-color":"rgba(244, 121, 32, 0.5)"});else{var i=e.activeIndex;$(s.slides).removeClass("is-selected"),$(s.slides).eq(i).addClass("is-selected"),s.slideTo(i,500,!1)}}}),s=new Swiper(t.find(".gallery-thumbs"),{centeredSlides:!1,slidesPerView:"4",touchRatio:.2,loop:l,loopedSlides:o,slideToClickedSlide:!0,breakpoints:{1440:{slidesPerView:"3"}},onInit:function(e){l||$(e.slides).eq(e.activeIndex).addClass("is-selected")},onClick:function(e,s){if(!l){var n=e.clickedIndex;e.activeIndex=n,e.updateClasses(),$(e.slides).removeClass("is-selected"),$(e.clickedSlide).addClass("is-selected"),i.slideTo(n,500,!1)}}}),i.params.control=s,s.params.control=i,l&&$(".swiper-slide-active .product__slider-thumbs").css({"border-color":"rgba(244, 121, 32, 0.5)"})},a=function(){d.width()<1440?t.find(".gallery-thumbs .swiper-slide").length>=3&&(l=!0,o=t.find(".gallery-thumbs .swiper-slide").length):t.find(".gallery-thumbs .swiper-slide").length>=4&&(l=!0,o=t.find(".gallery-thumbs .swiper-slide").length)};r()},i=function(e){var i,s,n=this,t=e,d=$(window),l=!1,o=function(){t[0].obj=n,r(),d.width()<=768?s=!1:(s=!0,a())},r=function(){d.on({resize:function(){d.width()<=768?s&&(s=!1,c()):s||(s=!0,a())}})},c=function(){i.destroy(!0,!0)},a=function(){p(),i=new Swiper(t.find(".swiper-container"),{pagination:t.find(".swiper-pagination"),slidesPerView:5,paginationClickable:!0,speed:600,loop:l,autoplay:5e3,autoplayDisableOnInteraction:!1,nextButton:t.find(".swiper-button-next"),prevButton:t.find(".swiper-button-prev"),breakpoints:{1440:{slidesPerView:4}}})},p=function(){d.width()>=1024?t.find(".swiper-slide").length>=4&&(l=!0):d.width()>=1425&&t.find(".swiper-slide").length>=5&&(l=!0),l||t.find(".featured-products__controls").css({display:"none"})};o()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),$(document).on("change","select",function(){$(this).prev().text($(this).find("option:selected").text())}),1!=s||l||p.on({click:function(e){e.stopPropagation(),u?v():y()}}),f.on({click:function(){u&&v()}}),r.on({scroll:function(){u&&v()}})},g=function(){!s||l?x():1==s&&_()},_=function(){p.addClass("websters-select_custom")},x=function(){p.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".category").each(function(){new e($(this))})});var e=function(e){var a=e,t=$("body").data("action"),i=new XMLHttpRequest,n=a.find(".category__filters-item span"),r=a.find(".category__filters-title"),s=a.find(".category__filters-items"),c=(s.find("form"),a.find(".category__filtered-close")),o=a.find(".category__filters-list"),d=a.find(".category__filtered"),l=a.find(".category__filtered-list"),f=0,p=a.find(".category__filters-title"),v=a.find(".category__filters-title-inner"),h=a.find(".category__filtered .btn, .category__filters-clear"),u=(a.find(".category__filtered-remove"),a.find(".category__find-parameters")),g=!1,_=$('<div class="loading"></div>'),m=a.find("input[type=hidden].value-check"),y=a.find("input[type=hidden].current-page"),b=a.find("#items-page"),C=a.find("#sorting-date"),k=a.find(".category__wrap").data("rate-path"),w=a.find(".category__filters-apply"),x=$(window),I={},P=null,T=[],z=a.find("input[name=_price]"),j=function(){x.on({resize:function(){n.each(function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")&&t.css({"min-height":t.find(">div").innerHeight()})}),x.width()>=1024&&$(".site__content").css({"z-index":""})},load:function(){}}),n.on({click:function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")?(a.removeClass("opened"),t.css({"min-height":0,height:0})):(a.addClass("opened"),t.css({"min-height":t.find(">div").innerHeight()}),setTimeout(function(){t.css({height:"auto"})},310))}}),r.on({click:function(){S()}}),h.on({click:function(){return y.val("1"),M(),!1}}),$(document).on("click",".pagination a",function(){var e=$(this),a=parseInt(e.text());return e.hasClass("pagination__prev")?1!=parseInt(y.val())&&(y.val(y.val()-1),F(),E()):e.hasClass("pagination__next")?e.prev().hasClass("active")||(y.val(parseInt(y.val())+1),F(),E()):a!=parseInt(y.val())&&(y.val(a),F(),E()),!1}),$(document).on("click",".category__filtered-remove",function(){var e=$(this),a=e.parent(),t=a.data("id"),i=a.data("name");return y.val("1"),O(t,i),!1}),c.on({click:function(){return S(),!1}}),w.on({click:function(){return S(),!1}}),o.find("input[type=checkbox]").on({change:function(){var e=$(this),a=e.next(),t=a.clone().children().remove().end().text(),i=e.attr("name"),n=e.data("id"),r=e.parents(".category__filters-item").find("span")[0].innerText,s=o.find("input[name="+i+"]:checked").length;g=e.prop("checked"),x.width()>=1024&&(F(),S()),console.log(s),L(i,n,g,s),y.val("1"),D(t,n,i,r),E()}}),b.on({change:function(){y.val("1"),F(),E()}}),C.on({change:function(){y.val("1"),F(),E()}}),u.on({submit:function(){return x.width()>=1024&&F(),u.find("select").each(function(){var e=$(this),a=e.attr("name"),t=e.val();L(a,t,"select",""),R(a)}),u.find("input[type=radio]:checked").each(function(){var e=$(this),a=e.attr("name"),t=e.val();L(a,t,"radio",""),R(a)}),y.val("1"),E(),!1}})},D=function(e,a,t,i){g?l.append("<li data-name="+t+' data-id="'+a+'">'+i+": "+e+' <a href="#" class="category__filtered-remove"></a></li>'):l.find('li[data-id="'+a+'"]').remove(),f=l.find("li").length,f>0?(d.removeClass("hidden"),p.find("span").html("("+f+")"),v.find("span").html("("+f+")"),p.addClass("selected"),h.removeClass("hidden")):(d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),h.addClass("hidden"))},F=function(){_=$('<div class="loading"></div>'),$(".category__content").append(_),_.css({top:$(".category__wrap").position().top-20})},H=function(){P&&(clearTimeout(P),P=null),P=setTimeout(function(){$(".loading").addClass("hidden")},300),P=setTimeout(function(){$(".loading").remove()},620)},M=function(){d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),l.find("li").remove(),o.find("input[type=checkbox]").prop("checked",!1),m.val(""),F(),E()},O=function(e,a){o.find('input[data-id="'+e+'"]').prop("checked",!1),g=!1,D("",e,"",""),F(),L(a,e,g,""),E()},R=function(e){o.find('input[name="'+e+'"]').each(function(){var e=$(this),a=e.data("id");o.find('input[data-id="'+a+'"]').prop("checked",!1),g=!1,D("",a,"","")})},S=function(){r.hasClass("opened")?(r.removeClass("opened"),s.removeClass("opened"),$(".site__content").css({"z-index":""})):(r.addClass("opened"),s.addClass("opened"),x.width()<1024&&$(".site__content").css({"z-index":100}))},q=function(e){var a=parseInt(e.settings.pagesAll),t=parseInt(e.settings.currentPage);if(y.val(t),1!=a&&0!=a){var i='<div class="pagination">';if(i+='<a href="#" class="pagination__prev"></a>',a<=7)for(var n=1;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else{if(t<=3||t>a-3){for(var n=1;n<=3;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>";for(var n=a-2;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>"}if(t>3&&t<=a-3){if(i+='<a href="#">1</a>',i+="<span>...</span>",t-1>3&&t+1<=a-3)for(var n=t-1;n<=t+1;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t-1<=3)for(var n=t;n<=t+2;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t+1>=a-3)for(var n=t-2;n<=t;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}if(8==a&&t>3&&t<=a-3){i+='<a href="#">1</a>',i+="<span>...</span>";for(var n=4;n<=5;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}}i+='<a href="#" class="pagination__next"></a>',i+="</div>",$(".pagination-wrap").html(i)}else $(".pagination").length&&$(".pagination").remove()},A=function(e){var a=e.products,t='<div class="products-subcategory">',i=[];if(void 0!=I.price)for(var n=0;n<=I.price.length-1;n++){var r=parseFloat(I.price[n].replace("$","").replace(",",""));i.push(r)}if(z.length)var s=z.filter(":checked"),c=parseInt(s.attr("value").split("-")[0]);if(i.length){var o;if(0==c)o=Math.min.apply(null,i);else for(var n=0;n<=i.length-1;n++)if(i[n]>=c){o=i[n];break}}$.each(a,function(){var e,a=this,n=a.price[0],r=a.oldPrice[0];if(z.length)for(var s=0;s<=a.price.length-1;s++)if(e=parseFloat(a.price[s].replace("$","").replace(",","")),e>=c){n=a.price[s],r=a.oldPrice[s];break}if(i.length)for(var s=0;s<=a.price.length-1;s++)if(e=parseFloat(a.price[s].replace("$","").replace(",","")),e>=o){n=a.price[s],r=a.oldPrice[s];break}if(t+='<div class="products-subcategory__item">',void 0!=a.featured&&""!=a.featured&&(t+='<span class="site__featured">'+a.featured+"</span>"),t+='<div class="products-subcategory__head">                                            <div>                                                <a href="'+a.urlDetails+'" class="products-subcategory__pic" style="background-image: url('+a.picture+')"></a>                                            </div>                                            <div>                                                <h2 class="products-subcategory__title"><a href="'+a.urlDetails+'">'+a.title+"</a></h2>",void 0!=a.rate){t+='<div class="rate">';for(var s=0;s<=a.rate.starsCount-1;s++)t+='<img src="'+k+'img/star.png" width="60" height="50" alt="">&nbsp;';t+='<a href="'+a.rate.urlReviews+'" class="rate__reviews">'+a.rate.reviewsCount+"</a>                                                </div>"}if(t+='</div>                                        </div>                                        <div class="products-subcategory__content">',void 0!=a.content.description&&""!=a.content.description){t+='<div>                                        <ul class="products-subcategory__description">';for(var s=0;s<=a.content.description.length-1;s++)t+="<li>"+a.content.description[s]+"</li>";t+="</ul>                                    </div>"}if(t+='<div>                                            <div class="products-subcategory__items">',void 0!=a.content.specification&&""!=a.content.specification){t+='<div>                    <div class="products-subcategory__specification">                                                        <div class="products-subcategory__specification-head">';for(var s=0;s<=a.content.specification.head.length-1;s++)t+='<div style="width:'+100/a.content.specification.head.length+'%">'+a.content.specification.head[s]+"</div>";t+='</div>                                                        <div class="products-subcategory__specification-content">';for(var s=0;s<=a.content.specification.content.length-1;s++)t+='<div style="width:'+100/a.content.specification.head.length+'%">'+a.content.specification.content[s]+"</div>";t+="</div>                                                    </div>                                                </div>"}t+=void 0!=r&&""!=r?'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        <del>'+r+"</del> "+n+"                                                    </div>":'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        '+n+"                                                    </div>",t+='<a href="'+a.urlDetails+'" class="btn btn_3">see details</a>                                                </div>                                            </div>                                        </div>                                    </div>                                    </div>'}),t+="</div>",$(".category__wrap").html(t),H()},E=function(){i.abort(),i=$.ajax({url:t,data:{action:"get_filtered_products",value:m.val(),pageSorting:b.val(),dateSorting:C.val(),currentPage:y.val(),idCategory:a.data("id-category"),additionalParameters:u.serialize()},dataType:"json",type:"get",success:function(e){A(e),q(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}})},L=function(e,a,t,i){if("radio"==t)I[e]=[a];else if("select"==t)0!=a?I[e]=[a]:delete I[e];else if(t)if(I.hasOwnProperty(e))if(1==i)I[e]=[a];else for(var n in I)n==e&&I[n].push(a);else I[e]=[a];else{for(var n in I)if(n==e){var r=I[n].indexOf(a);r!=-1&&I[n].splice(r,1)}0==I[e].length&&delete I[e]}var s="",c="",o="",d=[];for(var l in I){T=[];var f=I[l];T.push(f);for(var r=0;r<=T.length-1;r++)c=T.join(",");o=l+"="+c,d.push(o),s=d.join("&")}m.val(s)},X=function(){j(),a.hasClass("category_sub")&&(F(),E())};X()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var t=e,a=t.find("input[type=search]"),i=new XMLHttpRequest,s=t.data("path"),n=0,o=0,r=a.val(),c=t.find(".search__result"),l=function(){a.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==c.find(".search__found li").filter(".active").length&&t.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var a=$(this).val();a.length>=t.data("symbols")?u($(this),a.length):""==$(this).val()&&(c.removeClass("visible"),n=0)}},keydown:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:return 0==c.find(".search__found li").filter(".active").length?window.location.href=t.data("action"):window.location.href=c.find(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),n=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),n==o&&(n=0))}}}),$("html").click(function(){c.removeClass("visible"),n=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),t=e.find("a").text();a.val(t),c.removeClass("visible"),n=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){c.find(".search__found li").removeClass("active"),t.parents().hasClass("site__footer")?(38==e&&n<o?n++:40==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(-1-(n-1)).addClass("active"),a.val(c.find(".search__found li").eq(-1-(n-1)).find("a").text())):a.val(r)):(40==e&&n<o?n++:38==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(n-1).addClass("active"),a.val(c.find(".search__found li").eq(n-1).find("a").text())):a.val(r))},f=function(e){var e=e,t=e.categories,a=0!=t.length,i=e.products,s=[],n=[],r=!0,l='<div class="top-products__wrap">';$.each(i,function(){var e=this;l+='<div>                                            <div class="top-products__item">                                                <div class="top-products__pic" style="background-image: url('+e.src+')">                                                </div>                                                <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                <h3 class="top-products__item-title">'+e.name+'</h3>                                                <a href="'+e.href+'" class="top-products__btn">view</a>                                            </div>                                        </div>',a||s.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),l+="</div>",c.find("div").eq(1).find(".top-products").html('<h2 class="top-products__title">Top Products</h2>'+l);var d='<ul class="search__found">';if(a)$.each(t,function(){var e=this.subcategories,t=this.urlSubcategories,a="";if(void 0!=e){for(var i=0;i<=e.length-1;i++)a+='<li class="search__found-sub"><a href="'+t[i]+'">'+e[i]+"</a></li>";a+=""}d+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+a});else{for(var f=0;f<=s.length-1;f++)if(r&&(n.push(s[f]),r=!1),n[n.length-1][0]!=s[f][0])n.push(s[f]);else for(var u=0;u<=s[f].length-1;u++)for(var h=0;h<=s[f][2].length-1;h++)n[n.length-1][2].indexOf(s[f][2][h])==-1&&n[n.length-1][2].push(s[f][2][h]);for(var v=0,f=0;f<=n.length-1;f++){for(var u=0;u<=n[f].length-1;u++){for(var _="",h=0;h<=n[f][2].length-1;h++)_+='<li class="search__found-sub"><a href="'+n[f][3][h]+'">'+n[f][2][h]+"</a></li>",v++;_+=""}d+='<li><a href="'+n[f][1]+'">'+n[f][0]+"</a></li>"+_}}d+="</ul>",c.find("div:first").html(d),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")},u=function(e,t){return i.abort(),i=$.ajax({url:s,data:{value:e.val(),action:"main_search"},dataType:"json",type:"get",success:function(e){0!=Object.keys(e).length&&f(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}}),!1},h=function(){l()};h()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnBvcHVwLmpzIiwianF1ZXJ5LnByb2R1Y3Qtc2xpZGVyLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyIsImpxdWVyeS5maWx0ZXJzLmpzIiwianF1ZXJ5LnNlYXJjaC5qcyJdLCJuYW1lcyI6WyJnbG9iYWxTY3JvbGxGbGFnIiwiJCIsImVhY2giLCJTdWJNZW51IiwidGhpcyIsIk1lbnUiLCJGdWxsSGVpZ2h0IiwicGVyZmVjdFNjcm9sbGJhciIsIndoZWVsUHJvcGFnYXRpb24iLCJvYmoiLCJfb2JqIiwiX2l0ZW1zIiwiZmluZCIsIl9hcnJvdyIsIl93aW5kb3ciLCJ3aW5kb3ciLCJ0aW1lb3V0IiwiX3N0YXJ0V2luV2lkdGgiLCJ3aWR0aCIsIl9hZGRFdmVudHMiLCJvbiIsInJlc2l6ZSIsInJlbW92ZUNsYXNzIiwialF1ZXJ5IiwiY3VySXRlbSIsInBhcmVudCIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJjbGljayIsInBhcmVudHMiLCJzdWJNZW51Iiwic2xpZGVVcCIsInNsaWRlRG93biIsIm1vdXNlZW50ZXIiLCJpbm5lcldpZHRoIiwib2Zmc2V0IiwibGVmdCIsImNzcyIsIi13ZWJraXQtdHJhbnNmb3JtIiwidHJhbnNmb3JtIiwicG9zaXRpb24iLCJjbGVhclRpbWVvdXQiLCJkYXRhIiwic2V0VGltZW91dCIsInRleHQiLCJuYW1lIiwiYXR0ciIsInNyYyIsImhyZWYiLCJwcmljZSIsIm9uU2FsZSIsIm9sZFByaWNlIiwiX2luaXQiLCJfbGFzdFBvcyIsInNpdGVTY3JvbGxUb3AiLCJfc2VsZiIsIl9tZW51IiwiX2FjdGlvbiIsIl9oZWFkZXIiLCJfaGlkZGVuQmxvY2tNZW51IiwiX2hlYWRlckhlaWdodCIsImlubmVySGVpZ2h0IiwiX3Nob3dCdG4iLCJfY2xvc2VCdG4iLCJfc2VhcmNoIiwiX29wZW5TZWFyY2giLCJfY2xvc2VTZWFyY2giLCJfZ2V0RnJlZSIsIl9zaXRlIiwiX2RvbSIsImRvY3VtZW50IiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJfY2xvc2VTZWFyY2hCb3giLCJfb3Blbk1lbnUiLCJfY2xvc2VNZW51IiwiX29wZW5TZWFyY2hCb3giLCJzY3JvbGwiLCJlIiwiX2ZpeGVkSGVhZGVyIiwic2Nyb2xsVG9wIiwiRE9NTW91c2VTY3JvbGwiLCJkZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJkZXRhaWwiLCJkaXJlY3Rpb24iLCJfY2hlY2tTY3JvbGwiLCJtb3VzZXdoZWVsIiwid2hlZWxEZWx0YSIsInRvdWNobW92ZSIsImN1cnJlbnRQb3MiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImtleWRvd24iLCJ3aGljaCIsImhlaWdodCIsIm92ZXJmbG93LXkiLCJlbGVtIiwiZm9jdXNvdXQiLCJfZ2xvYmFsV2luV2lkdGgiLCJfc2V0SGVpZ2h0IiwiY29uc29sZSIsImxvZyIsIm1pbkhlaWdodCIsIlBvcHVwIiwiX3BvcHVwUGFkZGluZyIsIl9idG5TaG93IiwiX2J0bkNsb3NlIiwiX3dyYXAiLCJfY29udGVudHMiLCJfc2Nyb2xsQ29udGVpbmVyIiwiX3RpbWVyIiwiX2NlbnRlcldyYXAiLCJ0b3AiLCJfZ2V0U2Nyb2xsV2lkdGgiLCJzY3JvbGxCYXJXaWR0aCIsInNjcm9sbERpdiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJvZmZzZXRXaWR0aCIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJfaGlkZSIsIm92ZXJmbG93WSIsInBhZGRpbmdSaWdodCIsIl9vbkV2ZW50cyIsIl9zaG93IiwiX3NldFBvcHVwQ29udGVudCIsImN1ckNvbnRlbnQiLCJmaWx0ZXIiLCJkaXNwbGF5IiwiUHJvZHVjdFNsaWRlciIsIkZlYXR1cmVkUHJvZHVjdHNTbGlkZXIiLCJfc2xpZGVyIiwiX2dhbGxlcnlUaHVtYnMiLCJfbG9vcCIsIl9zbGlkZXNMZW5ndGgiLCJfY29uc3RydWN0b3IiLCJfaW5pdFNsaWRlciIsIl9hZGRTb21lUGFyYW1zIiwiU3dpcGVyIiwic2xpZGVzUGVyVmlldyIsImxvb3AiLCJsb29wZWRTbGlkZXMiLCJjZW50ZXJlZFNsaWRlcyIsInNwYWNlQmV0d2VlbiIsIm9uU2xpZGVDaGFuZ2VFbmQiLCJzd2lwZXIiLCJib3JkZXItY29sb3IiLCJhY3RpdmVJbmRleCIsInNsaWRlcyIsImVxIiwic2xpZGVUbyIsInRvdWNoUmF0aW8iLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwiYnJlYWtwb2ludHMiLCIxNDQwIiwib25Jbml0Iiwib25DbGljayIsImNsaWNrZWQiLCJjbGlja2VkSW5kZXgiLCJ1cGRhdGVDbGFzc2VzIiwiY2xpY2tlZFNsaWRlIiwicGFyYW1zIiwiY29udHJvbCIsImxlbmd0aCIsIl9mbGFnIiwiX2Rlc3Ryb3kiLCJkZXN0cm95IiwicGFnaW5hdGlvbiIsInBhZ2luYXRpb25DbGlja2FibGUiLCJzcGVlZCIsImF1dG9wbGF5IiwiYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiIsIm5leHRCdXR0b24iLCJwcmV2QnV0dG9uIiwiV2Vic3RlcnNTZWxlY3QiLCJvcHRpb25UeXBlIiwic2hvd1R5cGUiLCJfcG9wdXAiLCJfc2Nyb2xsIiwiX29wdGlvblR5cGUiLCJfc2hvd1R5cGUiLCJfdmlzaWJsZSIsInZpc2libGUiLCJfZGV2aWNlIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl90ZXh0IiwiX2JvZHkiLCJfb3BlbmVkIiwiX2FkZFdyYXAiLCJjdXJUZXh0Iiwib3BhY2l0eSIsIndyYXAiLCJhcHBlbmQiLCJiZWZvcmUiLCJfaGlkZVBvcHVwIiwic3RvcCIsInJlbW92ZSIsImZhZGVPdXQiLCJfc2VsZWN0Vmlld1R5cGUiLCJwcmV2IiwiX3Nob3dQb3B1cCIsIl9zZXRNb2JpbGVWaWV3IiwiX3NldEN1c3RvbTEiLCJzZWxlY3RzIiwibGlzdCIsIm1heEhlaWdodCIsImN1ckluZGV4IiwiaW5kZXgiLCJpZCIsIk1hdGgiLCJyb3VuZCIsInJhbmRvbSIsImNoZWNrT3BlbmVkIiwiY2xvc2UiLCJpIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiYW5pbWF0ZSIsInZhbCIsInRyaWdnZXIiLCJGaWx0ZXJzIiwiX3BhdGgiLCJfcmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiX2J0biIsIl9idG4yIiwiX2ZpbHRlcnMiLCJfY2xvc2VGaWx0ZXJzIiwiX2ZpbHRlckl0ZW0iLCJfZmlsdGVyZWQiLCJfZmlsdGVyZWRMaXN0IiwiX2NvdW50RmlsdGVyZWQiLCJfdGl0bGUiLCJfdGl0bGVJbm5lciIsIl9jbGVhckZpbHRlcnMiLCJfYWRkaXRpb25hbFBhcmFtZXRlcnMiLCJfZ2xvYmFsQ2hlY2tGbGFnIiwiX2xvYWRpbmciLCJfaW5wdXRIaWRkZW4iLCJfaW5wdXRIaWRkZW5QYWdlIiwiX3NvcnRpbmdQYWdlIiwiX3NvcnRpbmdEYXRlIiwiX2RhdGFSYXRlUGF0aCIsIl9hcHBseSIsIl9vYmpWYWx1ZSIsIl90aW1lb3V0IiwiX2FyciIsIl9wcmljZUNhdGVnb3J5IiwibmV4dEZpbHRlcnMiLCJuZXh0IiwibWluLWhlaWdodCIsInotaW5kZXgiLCJsb2FkIiwiX2Nsb3NlRmlsdGVyIiwiX2NsZWFyRmlsdGVyIiwidmFsdWUiLCJwYXJzZUludCIsIl9hZGRMb2FkaW5nIiwiX3JlcXVlc3RDb250ZW50IiwiZGF0YUlkIiwiZGF0YU5hbWUiLCJfY2xlYXJTaW5nbGVGaWx0ZXIiLCJjaGFuZ2UiLCJsYWJlbCIsImxhYmVsVGV4dCIsImNsb25lIiwiY2hpbGRyZW4iLCJlbmQiLCJjYXRlZ29yeU5hbWUiLCJpbm5lclRleHQiLCJjb3VudEdyb3VwQ2hlY2siLCJwcm9wIiwiX3dyaXRlSW5IaWRkZW4iLCJfYWRkaW5nRmlsdGVyZWRCeSIsInN1Ym1pdCIsIl9jbGVhckdyb3VwRmlsdGVycyIsIml0ZW1UZXh0IiwiaXRlbUlkIiwiaXRlbU5hbWUiLCJodG1sIiwiX2Nsb3NlTG9hZGluZyIsIl9jcmVhdGVQYWdpbmF0aW9uIiwicGFnZXMiLCJzZXR0aW5ncyIsInBhZ2VzQWxsIiwiYWN0aXZlUGFnZSIsImN1cnJlbnRQYWdlIiwicGFnaW5hdGlvbldyYXAiLCJfcGFzdGVOZXdQcm9kdWN0cyIsIm5ld0RhdGEiLCJwcm9kdWN0cyIsInByb2R1Y3RzV3JhcCIsIm5ld0FyclByaWNlUmFuZ2UiLCJ1bmRlZmluZWQiLCJwcmljZUl0ZW0iLCJwYXJzZUZsb2F0IiwicmVwbGFjZSIsInB1c2giLCJjaGVja2VkUHJpY2VSYW5nZSIsInN0YXJ0aW5nUHJpY2UiLCJzcGxpdCIsInByaWNlUmFuZ2UiLCJtaW4iLCJhcHBseSIsInByb2R1Y3QiLCJzYWxlUHJpY2UiLCJmZWF0dXJlZCIsInVybERldGFpbHMiLCJwaWN0dXJlIiwidGl0bGUiLCJyYXRlIiwic3RhcnNDb3VudCIsInVybFJldmlld3MiLCJyZXZpZXdzQ291bnQiLCJjb250ZW50IiwiZGVzY3JpcHRpb24iLCJzcGVjaWZpY2F0aW9uIiwiaGVhZCIsImFib3J0IiwiYWpheCIsInVybCIsImFjdGlvbiIsInBhZ2VTb3J0aW5nIiwiZGF0ZVNvcnRpbmciLCJpZENhdGVnb3J5IiwiYWRkaXRpb25hbFBhcmFtZXRlcnMiLCJzZXJpYWxpemUiLCJkYXRhVHlwZSIsInR5cGUiLCJzdWNjZXNzIiwibSIsImVycm9yIiwic3RhdHVzVGV4dCIsImNoZWNrRmxhZyIsImhhc093blByb3BlcnR5IiwiaW5kZXhPZiIsInNwbGljZSIsInN0ckZpbmlzaCIsInN0clZhbHVlcyIsInN0ckZ1bGwiLCJhcnJBbGwiLCJrZXkiLCJpdGVtIiwiam9pbiIsIlNlYXJjaCIsIl9pbnB1dCIsInN1Z2dlc3RTZWxlY3RlZCIsImNvdW50SXRlbXMiLCJ2YWx1ZUlucHV0IiwiX3Jlc3VsdCIsImtleXVwIiwiSSIsImtleUNvZGUiLCJfYWpheFJlcXVlc3QiLCJsb2NhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiX2tleUFjdGl2YXRlIiwibiIsIl9hZGREYXRhIiwiY2F0ZWdvcmllcyIsImNhdGVnb3JpZXNBdmFpbGFiaWxpdHkiLCJhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIiLCJwcm9kdWN0c0NhdGVnb3JpZXNBcnIiLCJmbGFnIiwibWFpbkNhdGVnb3J5IiwidXJsTWFpbkNhdGVnb3J5Iiwic3ViY2F0ZWdvcmllcyIsInVybFN1YmNhdGVnb3JpZXMiLCJyZXN1bHRTdHIiLCJzdWJjYXRlZ29yaWVzV3JhcCIsInVybENhdGVnb3J5IiwiaiIsInoiLCJjb3VudCIsImlucHV0IiwibXNnIiwiT2JqZWN0Iiwia2V5cyJdLCJtYXBwaW5ncyI6IkNBQUEsV0FHSSxHQUFJQSxJQUFtQixDQUV2QkMsR0FBRSxXQUVFQSxFQUFFLGVBQWVDLEtBQUssV0FFbEIsR0FBSUMsR0FBU0YsRUFBRUcsT0FDZixHQUFJQyxHQUFNSixFQUFFRyxTQUloQkgsRUFBRSxjQUFjQyxLQUFLLFdBRWpCLEdBQUlJLEdBQVlMLEVBQUVHLFNBSXRCSCxFQUFFLGlCQUFpQkMsS0FBSyxXQUVwQixHQUFJSSxHQUFZTCxFQUFFRyxTQUl0QkgsRUFBRSxnQkFBZ0JDLEtBQUssV0FFbkJELEVBQUVHLE1BQU1HLGtCQUNKQyxrQkFBa0IsT0FPOUIsSUFBSUwsR0FBVSxTQUFVTSxHQUdwQixHQUFJQyxHQUFPRCxFQUNQRSxFQUFTRCxFQUFLRSxLQUFLLG9CQUNuQkMsRUFBU0gsRUFBS0UsS0FBSyxvQkFDbkJFLEVBQVViLEVBQUVjLFFBQ1pDLEVBQVUsS0FDVkMsRUFBaUJILEVBQVFJLFFBSXpCQyxFQUFhLFdBRVRMLEVBQVFNLElBQ0pDLE9BQVEsV0FFQUosRUFBaUJILEVBQVFJLFVBRXpCRCxFQUFpQkgsRUFBUUksUUFFekJKLEVBQVFGLEtBQUssV0FBV1UsWUFBWSxjQU1oRHJCLEVBQUUsUUFBUW1CLEdBQUcsUUFBUyxtQkFBb0IsV0FFdEMsR0FBSUcsT0FBT1IsUUFBUUcsUUFBVSxJQUFPLENBRWhDLEdBQUlNLEdBQVVELE9BQU9uQixNQUNqQnFCLEVBQVNELEVBQVFDLE9BQU8sS0FFdkJBLEdBQU9DLFNBQVMsVUFFakJELEVBQU9ILFlBQVksVUFJbkJHLEVBQU9FLFNBQVMsVUFNeEIsT0FBTyxJQUdYZCxFQUFPTyxJQUNI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c0JwSixHQUFHLEdBQUc4SixHQUFLLFlBQzFJQyxHQUlKSixJQUFxQixHQUl6QkQsR0FBYSxnQkFBa0JOLEVBQXNCcEosR0FBRyxHQUFLLEtBQU9vSixFQUFzQnBKLEdBQUcsR0FBSyxZQUFhMkosR0FNdkhELEdBQWEsUUFFYm5CLEVBQVF4VixLQUFLLGFBQWFrUixLQUFLeUYsR0FFL0JuQixFQUFReFYsS0FBSyxrQkFBa0JBLEtBQUssbUJBQW1CK0wsU0FFdkR1SixFQUFhRSxFQUFReFYsS0FBSyxrQkFBa0JBLEtBQUssTUFBTTRKLE9BRXZENEwsRUFBUXpVLFNBQVMsWUFHckI2VSxFQUFnQixTQUFVcUIsRUFBT2pCLEdBeUI3QixNQXZCQXZJLEdBQVNnRyxRQUNUaEcsRUFBV3BPLEVBQUVxVSxNQUNUQyxJQUFLbkcsRUFDTDFMLE1BQ0k0TixNQUFPdUgsRUFBTTVKLE1BQ2J1RyxPQUFPLGVBRVhNLFNBQVUsT0FDVkMsS0FBTSxNQUNOQyxRQUFTLFNBQVc4QyxHQUVlLEdBQTNCQyxPQUFPQyxLQUFLRixHQUFLdE4sUUFDakJxTSxFQUFVaUIsSUFJbEI1QyxNQUFPLFNBQVU1RyxHQUNvQixTQUE3QkEsRUFBZTZHLFlBQ2Y3TyxRQUFRQyxJQUFJLGFBS2pCLEdBRVhuRCxFQUFRLFdBQ0pqQyxJQU9SaUMiLCJmaWxlIjoiY2F0ZWdvcnkubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKCBmdW5jdGlvbigpe1xuXG5cbiAgICB2YXIgZ2xvYmFsU2Nyb2xsRmxhZyA9IHRydWU7XG5cbiAgICAkKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkKCcuc2l0ZV9fbWVudScpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgU3ViTWVudSggJCh0aGlzKSApO1xuICAgICAgICAgICAgbmV3IE1lbnUoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJCgnLm5vdC1mb3VuZCcpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgRnVsbEhlaWdodCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgICAgICAkKCcuY29uZmlybWF0aW9uJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBGdWxsSGVpZ2h0KCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQoJyN3cHNsLXN0b3JlcycpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAkKHRoaXMpLnBlcmZlY3RTY3JvbGxiYXIoe1xuICAgICAgICAgICAgICAgIHdoZWVsUHJvcGFnYXRpb246IHRydWVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBTdWJNZW51ID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2l0ZW1zID0gX29iai5maW5kKCcuc2l0ZV9fbWVudS1pdGVtJyksXG4gICAgICAgICAgICBfYXJyb3cgPSBfb2JqLmZpbmQoJy5zaXRlX19tZW51LWljb24nKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbCxcbiAgICAgICAgICAgIF9zdGFydFdpbldpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG5cbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3N0YXJ0V2luV2lkdGggPiBfd2luZG93LndpZHRoKCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RhcnRXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF93aW5kb3cuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsICcuc2l0ZV9fbWVudS1pY29uJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGpRdWVyeSh3aW5kb3cpLndpZHRoKCkgPCAxMDAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGpRdWVyeSh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgnbGknKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX2Fycm93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0galF1ZXJ5KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50cygnbGknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51ID0gcGFyZW50LmZpbmQoJy5zaXRlX19tZW51LXN1YicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmVudC5oYXNDbGFzcygnb3BlbmVkJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5zbGlkZVVwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuc2xpZGVEb3duKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfaXRlbXMub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoJ3VsJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5oYXNDbGFzcygnc2l0ZV9fbWVudS1pdGVtX3N1YicpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ29wZW5lZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJNZW51ID0gY3VySXRlbS5maW5kKCcuc2l0ZV9fbWVudS1zdWInKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggKCBfd2luZG93LndpZHRoKCkgLSAoIHN1Yk1lbnUuaW5uZXJXaWR0aCgpICsgY3VySXRlbS5vZmZzZXQoKS5sZWZ0ICkgKSA8IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoICggY3VySXRlbS5vZmZzZXQoKS5sZWZ0ICsgY3VySXRlbS5pbm5lcldpZHRoKCkgKSAtIHN1Yk1lbnUuaW5uZXJXaWR0aCgpICkgPCAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKC01MCUpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKC01MCUpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGN1ckl0ZW0ucG9zaXRpb24oKS5sZWZ0IC0gc3ViTWVudS5pbm5lcldpZHRoKCkgKyBjdXJJdGVtLmlubmVyV2lkdGgoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51LmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGN1ckl0ZW0ucG9zaXRpb24oKS5sZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAkKCdbZGF0YS1wcm9kdWN0XScpLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fbG9hZGluZycpLmFkZENsYXNzKCd2aXNpYmxlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGN1ckl0ZW0uZGF0YSgncHJvZHVjdCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiggJCgnLmZlYXR1cmVkLXByb2R1Y3RfX2xvYWRpbmcnKS5oYXNDbGFzcygndmlzaWJsZScpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X190aXRsZScpLnRleHQoZGF0YS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcGljIGltZycpLmF0dHIoJ3NyYycsIGRhdGEuc3JjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuYnRuJykuYXR0cignaHJlZicsIGRhdGEuaHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3ByaWNlIHNwYW4nKS50ZXh0KGRhdGEucHJpY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggZGF0YS5vblNhbGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19yZW1hcmsnKS5hZGRDbGFzcygndmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3JlbWFyaycpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkYXRhLm9sZFByaWNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2UgZGVsJykudGV4dChkYXRhLm9sZFByaWNlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2UgZGVsJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDE2MCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmZlYXR1cmVkLXByb2R1Y3RfX2xvYWRpbmcnKS5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9vYmoub24oICdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX29iai5maW5kKCd1bCcpLm9uKCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5vcGVuZWQnKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9vYmouZmluZCgnbGknKS5vbiggJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX21lbnUgPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2FjdGlvbiA9IGZhbHNlLFxuICAgICAgICAgICAgX2FjdGlvblNjcm9sbCA9IGZhbHNlLFxuICAgICAgICAgICAgX2xhc3RQb3MsXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxuICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudSA9ICQoJy5zaXRlX19oaWRkZW4taXRlbXMnKSxcbiAgICAgICAgICAgIF9oZWFkZXJIZWlnaHQgPSBfaGVhZGVyLmlubmVySGVpZ2h0KCksXG4gICAgICAgICAgICBfc2hvd0J0biA9ICQoJy5zaXRlX19oZWFkZXItYnRuJyksXG4gICAgICAgICAgICBfY2xvc2VCdG4gPSAkKCcuc2l0ZV9faGlkZGVuLWNsb3NlJyksXG4gICAgICAgICAgICBfc2VhcmNoID0gJCgnLnNlYXJjaCcpLFxuICAgICAgICAgICAgX29wZW5TZWFyY2ggPSAkKCcuc2VhcmNoLWJ0bicpLFxuICAgICAgICAgICAgX2Nsb3NlU2VhcmNoID0gJCgnLnNlYXJjaF9fY2FuY2VsJyksXG4gICAgICAgICAgICBfZ2V0RnJlZSA9ICQoJy5zaXRlX19oaWRkZW4tYnRuJyksXG4gICAgICAgICAgICBfc2l0ZSA9ICQoJy5zaXRlJyksXG4gICAgICAgICAgICBfZG9tID0gJCggJ2h0bWwnICksXG4gICAgICAgICAgICBzaXRlU2Nyb2xsVG9wLFxuICAgICAgICAgICAgX2NvbnRlbnQgPSAkKCcuc2l0ZV9fY29udGVudCcpLFxuICAgICAgICAgICAgX2xhc3RTY3JvbGxUb3AgPSAwO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICAgICAgXCIuc2VhcmNoXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBldmVudCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAgICAgICAgICAgICBcImJvZHlcIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBfc2hvd0J0bi5vbih7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSgkKHRoaXMpKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX2Nsb3NlQnRuLm9uKHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9vcGVuU2VhcmNoLm9uKHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5TZWFyY2hCb3goJCh0aGlzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoLm9uKHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGw6IGZ1bmN0aW9uICggZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9maXhlZEhlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbiA9IF93aW5kb3cuc2Nyb2xsVG9wKCkgPj0gX2hlYWRlckhlaWdodDtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy5zY3JvbGxUb3AoKSA9PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXIucmVtb3ZlQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBET01Nb3VzZVNjcm9sbDogZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LmRldGFpbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IChkZWx0YSA+IDApID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKGRpcmVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtb3VzZXdoZWVsOiBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IChkZWx0YSA+IDApID8gLTEgOiAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKGRpcmVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9zID0gZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3MgPiBfbGFzdFBvcykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKC0xKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPCBfbGFzdFBvcykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sYXN0UG9zID0gY3VycmVudFBvcztcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzQgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzYgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpPj0xMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpdGUuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfc2l0ZS5oZWlnaHQoKSA+IF93aW5kb3cuaGVpZ2h0KCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZG9tLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jaGVja1Njcm9sbCA9IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcblxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPiAwICYmICFfaGVhZGVyLmhhc0NsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJykgJiYgIV9zaG93QnRuLmhhc0NsYXNzKCdvcGVuZWQnKSAmJiBfYWN0aW9uICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPCAwICYmIF9oZWFkZXIuaGFzQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKSAmJiAhX3Nob3dCdG4uaGFzQ2xhc3MoJ29wZW5lZCcpICYmIF9hY3Rpb24gJiYgZ2xvYmFsU2Nyb2xsRmxhZykge1xuXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIucmVtb3ZlQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9maXhlZEhlYWRlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfd2luZG93LnNjcm9sbFRvcCgpID4gX2hlYWRlckhlaWdodCArIDE1MCAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5hZGRDbGFzcygnZml4ZWQnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cblxuICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLnJlbW92ZUNsYXNzKCdmaXhlZCcpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29wZW5NZW51ID0gZnVuY3Rpb24gKGVsZW0pIHtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gZWxlbTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJJdGVtLmhhc0NsYXNzKCdvcGVuZWQnKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICBfaGlkZGVuQmxvY2tNZW51LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIF9oaWRkZW5CbG9ja01lbnUuYWRkQ2xhc3MoJ29wZW5lZCcpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2l0ZVNjcm9sbFRvcCA9IF93aW5kb3cuc2Nyb2xsVG9wKCk7XG5cblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfc2l0ZS5oZWlnaHQoKSA+IF93aW5kb3cuaGVpZ2h0KCkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZG9tLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ3Njcm9sbCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2l0ZS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xuXG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vcGVuU2VhcmNoQm94ID0gZnVuY3Rpb24gKGVsZW0pIHtcblxuICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gZWxlbTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJJdGVtLmhhc0NsYXNzKCdvcGVuZWQnKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICBfc2VhcmNoLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgX2dldEZyZWUucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgX3NlYXJjaC5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIF9nZXRGcmVlLmFkZENsYXNzKCdoaWRkZW4nKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jbG9zZU1lbnUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfc2hvd0J0bi5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgX3NlYXJjaC5maW5kKCdpbnB1dCcpLmZvY3Vzb3V0KCk7XG5cblxuICAgICAgICAgICAgICAgIF9zaXRlLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJydcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggX3NpdGUuaGVpZ2h0KCkgPiBfd2luZG93LmhlaWdodCgpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfd2luZG93LnNjcm9sbFRvcCggc2l0ZVNjcm9sbFRvcCApO1xuXG4gICAgICAgICAgICAgICAgfSwgMTApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29wZW5TZWFyY2gucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgIF9zZWFyY2gucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIF9nZXRGcmVlLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9tZW51WzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBfZml4ZWRIZWFkZXIoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuICAgIHZhciBGdWxsSGVpZ2h0ID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9nbG9iYWxXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBfZ2xvYmFsV2luV2lkdGggIT0gX3dpbmRvdy53aWR0aCgpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbFdpbldpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coMzQpXG5cbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6ICcnXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogX3dpbmRvdy5oZWlnaHQoKSAtICQoJy5zaXRlX19oZWFkZXInKS5pbm5lckhlaWdodCgpIC0gJCgnLnNpdGVfX2Zvb3RlcicpLmlubmVySGVpZ2h0KCkgLSAkKCcuYnJlYWRjcnVtYnMnKS5pbm5lckhlaWdodCgpXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xuXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcblxuICAgICQoIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgJCggJy5wb3B1cCcgKS5lYWNoKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgIG5ldyBQb3B1cCgkKHRoaXMpKTtcblxuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgdmFyIFBvcHVwID0gZnVuY3Rpb24oIG9iaiApe1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfcG9wdXBQYWRkaW5nID0gNDAsXG4gICAgICAgICAgICBfYnRuU2hvdyA9ICAkKCAnLnBvcHVwX19vcGVuJyApLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9idG5DbG9zZSA9IF9vYmouZmluZCggJy5wb3B1cF9fY2xvc2UsIC5wb3B1cF9fY2FuY2VsJyApLFxuICAgICAgICAgICAgX3dyYXAgPSBfb2JqLmZpbmQoICcucG9wdXBfX3dyYXAnICksXG4gICAgICAgICAgICBfY29udGVudHMgPSBfb2JqLmZpbmQoICcucG9wdXBfX2NvbnRlbnQnICksXG4gICAgICAgICAgICBfc2Nyb2xsQ29udGVpbmVyID0gJCggJ2h0bWwnICksXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe30sIDEgKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2NlbnRlcldyYXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlmICggX3dpbmRvdy5oZWlnaHQoKSAtICggX3BvcHVwUGFkZGluZyAqIDIgKSAtIF93cmFwLmhlaWdodCgpID4gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAuY3NzKCB7IHRvcDogKCAoIF93aW5kb3cuaGVpZ2h0KCkgLSAoIF9wb3B1cFBhZGRpbmcgKiAyICkgKSAtIF93cmFwLmhlaWdodCgpICkgLyAyIH0gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfd3JhcC5jc3MoIHsgdG9wOiAwIH0gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2dldFNjcm9sbFdpZHRoID0gZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnKSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGg7XG5cbiAgICAgICAgICAgICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ3BvcHVwX19zY3JvbGxiYXItbWVhc3VyZSc7XG5cbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBzY3JvbGxEaXYgKTtcblxuICAgICAgICAgICAgICAgIHNjcm9sbEJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbEJhcldpZHRoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9oaWRlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9zY3JvbGxDb250ZWluZXIuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfb3BlbmVkJyApO1xuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdwb3B1cF9oaWRlJyApO1xuXG4gICAgICAgICAgICAgICAgX3RpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcyAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3BvcHVwX2hpZGUnICk7XG4gICAgICAgICAgICAgICAgfSwgMzAwICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2VudGVyV3JhcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9idG5TaG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgX3Nob3coICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1wb3B1cCcgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9jb250ZW50cy5maW5kKCc+ZGl2Jykub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCBlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9vYmoub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9idG5DbG9zZS5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3Nob3cgPSBmdW5jdGlvbiggY2xhc3NOYW1lICl7XG4gICAgICAgICAgICAgICAgX3NldFBvcHVwQ29udGVudCggY2xhc3NOYW1lICk7XG5cbiAgICAgICAgICAgICAgICBfc2Nyb2xsQ29udGVpbmVyLmNzcygge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IF9nZXRTY3JvbGxXaWR0aCgpXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XG4gICAgICAgICAgICAgICAgX2NlbnRlcldyYXAoKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRQb3B1cENvbnRlbnQgPSBmdW5jdGlvbiggY2xhc3NOYW1lICl7XG4gICAgICAgICAgICAgICAgdmFyIGN1ckNvbnRlbnQgPSBfY29udGVudHMuZmlsdGVyKCAnLnBvcHVwX18nICsgY2xhc3NOYW1lICk7XG5cbiAgICAgICAgICAgICAgICBfY29udGVudHMuY3NzKCB7IGRpc3BsYXk6ICdub25lJyB9ICk7XG4gICAgICAgICAgICAgICAgY3VyQ29udGVudC5jc3MoIHsgZGlzcGxheTogJ2Jsb2NrJyB9ICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG59ICkoKTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4oIGZ1bmN0aW9uKCkge1xuXG4gICAgJCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLnByb2R1Y3RfX3NsaWRlcicgKSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIG5ldyBQcm9kdWN0U2xpZGVyICggJCggdGhpcyApICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgICAgICQuZWFjaCggJCggJy5mZWF0dXJlZC1wcm9kdWN0cycgKSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIG5ldyBGZWF0dXJlZFByb2R1Y3RzU2xpZGVyICggJCggdGhpcyApICk7XG5cbiAgICAgICAgfSApO1xuICAgIH0pO1xuXG4gICAgdmFyIFByb2R1Y3RTbGlkZXIgPSBmdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX3NsaWRlcixcbiAgICAgICAgICAgIF9nYWxsZXJ5VGh1bWJzLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9sb29wID0gZmFsc2UsXG4gICAgICAgICAgICBfc2xpZGVzTGVuZ3RoID0gMDtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXRTbGlkZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfYWRkU29tZVBhcmFtcygpO1xuXG4gICAgICAgICAgICAgICAgX3NsaWRlciA9IG5ldyBTd2lwZXIoIF9vYmouZmluZCgnLmdhbGxlcnktdG9wJykgLCB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICcxJyxcbiAgICAgICAgICAgICAgICAgICAgbG9vcDogX2xvb3AsXG4gICAgICAgICAgICAgICAgICAgIGxvb3BlZFNsaWRlczogX3NsaWRlc0xlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDMwLFxuICAgICAgICAgICAgICAgICAgICBvblNsaWRlQ2hhbmdlRW5kOiBmdW5jdGlvbihzd2lwZXIpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighX2xvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChfZ2FsbGVyeVRodW1icy5zbGlkZXMpLnJlbW92ZUNsYXNzKCdpcy1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoX2dhbGxlcnlUaHVtYnMuc2xpZGVzKS5lcShhY3RpdmVJbmRleCkuYWRkQ2xhc3MoJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2dhbGxlcnlUaHVtYnMuc2xpZGVUbyhhY3RpdmVJbmRleCw1MDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuc3dpcGVyLXNsaWRlIC5wcm9kdWN0X19zbGlkZXItdGh1bWJzJykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItY29sb3JcIjogXCJ0cmFuc3BhcmVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnN3aXBlci1zbGlkZS1hY3RpdmUgLnByb2R1Y3RfX3NsaWRlci10aHVtYnMnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1jb2xvclwiOiBcInJnYmEoMjQ0LCAxMjEsIDMyLCAwLjUpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfZ2FsbGVyeVRodW1icyA9IG5ldyBTd2lwZXIoIF9vYmouZmluZCgnLmdhbGxlcnktdGh1bWJzJyksIHtcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAnNCcsXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoUmF0aW86IDAuMixcbiAgICAgICAgICAgICAgICAgICAgLy9mcmVlTW9kZTogIV9sb29wLFxuICAgICAgICAgICAgICAgICAgICBsb29wOiBfbG9vcCxcbiAgICAgICAgICAgICAgICAgICAgbG9vcGVkU2xpZGVzOiBfc2xpZGVzTGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgMTQ0MDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICczJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbkluaXQ6IGZ1bmN0aW9uKHN3aXBlcikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighX2xvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHN3aXBlci5zbGlkZXMpLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYWRkQ2xhc3MoJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIChzd2lwZXIsIGV2ZW50KXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIV9sb29wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsaWNrZWQgPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci5hY3RpdmVJbmRleCA9IGNsaWNrZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZUNsYXNzZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHN3aXBlci5zbGlkZXMpLnJlbW92ZUNsYXNzKCdpcy1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoc3dpcGVyLmNsaWNrZWRTbGlkZSkuYWRkQ2xhc3MoJ2lzLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWRlci5zbGlkZVRvKGNsaWNrZWQsNTAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfc2xpZGVyLnBhcmFtcy5jb250cm9sID0gX2dhbGxlcnlUaHVtYnM7XG4gICAgICAgICAgICAgICAgX2dhbGxlcnlUaHVtYnMucGFyYW1zLmNvbnRyb2wgPSBfc2xpZGVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKF9sb29wKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLnN3aXBlci1zbGlkZS1hY3RpdmUgLnByb2R1Y3RfX3NsaWRlci10aHVtYnMnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItY29sb3JcIjogXCJyZ2JhKDI0NCwgMTIxLCAzMiwgMC41KVwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FkZFNvbWVQYXJhbXMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxNDQwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmZpbmQoJy5nYWxsZXJ5LXRodW1icyAuc3dpcGVyLXNsaWRlJykubGVuZ3RoID49IDMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zbGlkZXNMZW5ndGggPSBfb2JqLmZpbmQoJy5nYWxsZXJ5LXRodW1icyAuc3dpcGVyLXNsaWRlJykubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggX29iai5maW5kKCcuZ2FsbGVyeS10aHVtYnMgLnN3aXBlci1zbGlkZScpLmxlbmd0aCA+PSA0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc2xpZGVzTGVuZ3RoID0gX29iai5maW5kKCcuZ2FsbGVyeS10aHVtYnMgLnN3aXBlci1zbGlkZScpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XG4gICAgfTtcbiAgICB2YXIgRmVhdHVyZWRQcm9kdWN0c1NsaWRlciA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfc2xpZGVyLFxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgICAgIF9mbGFnLFxuICAgICAgICAgICAgX2xvb3AgPSBmYWxzZTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPD0gNzY4ICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9mbGFnID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9mbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2luaXRTbGlkZXIoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDw9IDc2OCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZmxhZyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFfZmxhZyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9zbGlkZXIuZGVzdHJveSh0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0U2xpZGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX2FkZFNvbWVQYXJhbXMoKTtcblxuICAgICAgICAgICAgICAgIF9zbGlkZXIgPSBuZXcgU3dpcGVyKCBfb2JqLmZpbmQoICcuc3dpcGVyLWNvbnRhaW5lcicgKSwge1xuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiBfb2JqLmZpbmQoJy5zd2lwZXItcGFnaW5hdGlvbicpLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiA1LFxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uQ2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogNjAwLFxuICAgICAgICAgICAgICAgICAgICBsb29wOiBfbG9vcCxcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IDUwMDAsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLW5leHQnKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX29iai5maW5kKCcuc3dpcGVyLWJ1dHRvbi1wcmV2JyksXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAxNDQwOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogNFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FkZFNvbWVQYXJhbXMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggX29iai5maW5kKCcuc3dpcGVyLXNsaWRlJykubGVuZ3RoID49IDQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTQyNSApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggX29iai5maW5kKCcuc3dpcGVyLXNsaWRlJykubGVuZ3RoID49IDUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZighX2xvb3ApIHtcblxuICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0c19fY29udHJvbHMnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XG4gICAgfTtcblxufSApKCk7XG4iLCIoIGZ1bmN0aW9uKCl7XG5cbiAgICAkKCBmdW5jdGlvbigpe1xuICAgICAgICAkKCAnc2VsZWN0JyApLmVhY2goIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBuZXcgV2Vic3RlcnNTZWxlY3QoIHtcbiAgICAgICAgICAgICAgICBvYmo6ICQoIHRoaXMgKSxcbiAgICAgICAgICAgICAgICBvcHRpb25UeXBlOiAxLFxuICAgICAgICAgICAgICAgIHNob3dUeXBlOiAyXG4gICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgfSApO1xuICAgIH0gKTtcblxuICAgIHZhciBXZWJzdGVyc1NlbGVjdCA9IGZ1bmN0aW9uKCBwYXJhbXMgKXtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IHBhcmFtcy5vYmosXG4gICAgICAgICAgICBfb3B0aW9uVHlwZSA9IHBhcmFtcy5vcHRpb25UeXBlIHx8IDAsXG4gICAgICAgICAgICBfc2hvd1R5cGUgPSBwYXJhbXMuc2hvd1R5cGUgfHwgMCxcbiAgICAgICAgICAgIF92aXNpYmxlID0gcGFyYW1zLnZpc2libGUgfHwgNSxcbiAgICAgICAgICAgIF9kZXZpY2UgPSAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQgKSxcbiAgICAgICAgICAgIF90ZXh0ID0gJCggJzxzcGFuIGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0X19pdGVtXCI+PC9zcGFuPicgKSxcbiAgICAgICAgICAgIF93cmFwID0gJCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RcIj48L2Rpdj4nICksXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfYm9keSA9ICQoICdib2R5JyApLFxuICAgICAgICAgICAgX29wZW5lZCA9IGZhbHNlLFxuICAgICAgICAgICAgX3BvcHVwLCBfc2Nyb2xsO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkV3JhcCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGN1clRleHQgPSAnJztcblxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLndyYXAoIF93cmFwICk7XG4gICAgICAgICAgICAgICAgX3dyYXAgPSBfb2JqLnBhcmVudCgpO1xuICAgICAgICAgICAgICAgIF93cmFwLmFwcGVuZCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX2Fycm93XCI+PC9kaXY+JyApO1xuICAgICAgICAgICAgICAgIF9vYmouYmVmb3JlKCBfdGV4dCApO1xuICAgICAgICAgICAgICAgIF9vYmouZmluZCggJ29wdGlvbicgKS5lYWNoKCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5hdHRyKCAnc2VsZWN0ZWQnICkgPT0gJ3NlbGVjdGVkJyApe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9IGN1ckl0ZW0udGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgaWYoIGN1clRleHQgPT0gJycgKXtcbiAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9ICBfb2JqLmZpbmQoICdvcHRpb24nKS5lcSggMCApLnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RleHQudGV4dCggY3VyVGV4dCApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9oaWRlUG9wdXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9vcGVuZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmKCAhX3Nob3dUeXBlICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMSApe1xuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc3RvcCggdHJ1ZSwgZmFsc2UgKS5zbGlkZVVwKCAzMDAsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAyICkge1xuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc3RvcCggdHJ1ZSwgZmFsc2UgKS5mYWRlT3V0KCAzMDAsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfd3JhcC5yZW1vdmVDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9vcGVuZWQnICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcblxuICAgICAgICAgICAgICAgIF9hZGRXcmFwKCk7XG4gICAgICAgICAgICAgICAgX3NlbGVjdFZpZXdUeXBlKCk7XG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCAnY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF90ZXh0LnRleHQoICQoIHRoaXMgKS5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLnRleHQoKSApO1xuXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxuICAgICAgICAgICAgICAgICAgICBcImNoYW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInNlbGVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMpLnByZXYoKS50ZXh0KCAkKCB0aGlzICkuZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS50ZXh0KCkgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiggX29wdGlvblR5cGUgPT0gMSAmJiAhX2RldmljZSApe1xuICAgICAgICAgICAgICAgICAgICBfd3JhcC5vbigge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oIGUgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93UG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfYm9keS5vbigge1xuICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGwnOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2VsZWN0Vmlld1R5cGUgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgaWYoICFfb3B0aW9uVHlwZSB8fCBfZGV2aWNlICl7XG4gICAgICAgICAgICAgICAgICAgIF9zZXRNb2JpbGVWaWV3KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfb3B0aW9uVHlwZSA9PSAxICl7XG4gICAgICAgICAgICAgICAgICAgIF9zZXRDdXN0b20xKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZXRDdXN0b20xID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9jdXN0b20nICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldE1vYmlsZVZpZXcgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X21vYmlsZScgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2hvd1BvcHVwID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0cyA9ICQoICdzZWxlY3QnICksXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgPSAkKCAnPHVsPjwvdWw+JyksXG4gICAgICAgICAgICAgICAgICAgIGN1clNjcm9sbCA9IF93aW5kb3cuc2Nyb2xsVG9wKCksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IF93cmFwLm9mZnNldCgpLFxuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBjdXJJbmRleCA9IF9vYmouZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS5pbmRleCgpLFxuICAgICAgICAgICAgICAgICAgICBpZCA9IE1hdGgucm91bmQoIE1hdGgucmFuZG9tKCkgKiAxMDAwICk7XG5cbiAgICAgICAgICAgICAgICBzZWxlY3RzLmVhY2goIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzICE9PSBfb2JqWyAwIF0gJiYgdGhpcy5vYmouY2hlY2tPcGVuZWQoKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmouY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX29wZW5lZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBfcG9wdXAgPSAkKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9fcG9wdXBcIiBpZD1cIndlYnN0ZXJzLXNlbGVjdF9fcG9wdXAnICsgaWQgKyAnXCI+PC9kaXY+JyApO1xuXG4gICAgICAgICAgICAgICAgX29iai5maW5kKCAnb3B0aW9uJyApLmVhY2goIGZ1bmN0aW9uKCBpICl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCggdGhpcyApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGN1ckluZGV4ICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZCggJzxsaSBjbGFzcz1cImFjdGl2ZVwiPicgKyBjdXJJdGVtLnRleHQoKSArICc8L2xpPicgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kKCAnPGxpPicgKyBjdXJJdGVtLnRleHQoKSArICc8L2xpPicgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX3BvcHVwLmFwcGVuZCggbGlzdCApO1xuICAgICAgICAgICAgICAgIF9ib2R5LmFwcGVuZCggX3BvcHVwICk7XG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3Rfb3BlbmVkJyApO1xuXG4gICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogX3dyYXAub3V0ZXJXaWR0aCgpLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBvZmZzZXQudG9wICsgX3dyYXAub3V0ZXJIZWlnaHQoKVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IF9wb3B1cC5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgIGlmKCBtYXhIZWlnaHQgPiBfcG9wdXAuZmluZCggJ2xpJyApLmVxKCAwICkub3V0ZXJIZWlnaHQoKSAqIF92aXNpYmxlICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5oZWlnaHQoIF9wb3B1cC5maW5kKCAnbGknICkuZXEoIDAgKS5vdXRlckhlaWdodCgpICogX3Zpc2libGUgKTtcbiAgICAgICAgICAgICAgICAgICAgX3Njcm9sbCA9IF9wb3B1cC5wZXJmZWN0U2Nyb2xsYmFyKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIF9zaG93VHlwZSA9PSAxICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zbGlkZURvd24oIDMwMCApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3Nob3dUeXBlID09IDIgKSB7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuMVxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5hbmltYXRlKCB7IG9wYWNpdHk6IDEgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfcG9wdXAuZmluZCggJ2xpJyApLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCBlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkKCB0aGlzICkuaW5kZXgoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai52YWwoIF9vYmouZmluZCggJ29wdGlvbicgKS5lcSggaW5kZXggKS5hdHRyKCAndmFsdWUnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoudHJpZ2dlciggJ2NoYW5nZScgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuICAgICAgICBfc2VsZi5jaGVja09wZW5lZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICByZXR1cm4gX29wZW5lZDtcbiAgICAgICAgfTtcbiAgICAgICAgX3NlbGYuY2xvc2UgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XG5cbiAgICB9O1xuXG59ICkoKTsiLCIoIGZ1bmN0aW9uKCl7XG5cbiAgICAkKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkKCcuY2F0ZWdvcnknKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IEZpbHRlcnMoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgRmlsdGVycyA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9wYXRoID0gJCgnYm9keScpLmRhdGEoJ2FjdGlvbicpLFxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgICAgIF9idG4gPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVycy1pdGVtIHNwYW4nKSxcbiAgICAgICAgICAgIF9idG4yID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtdGl0bGUnKSxcbiAgICAgICAgICAgIF9maWx0ZXJzID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtaXRlbXMnKSxcbiAgICAgICAgICAgIF9mb3JtID0gX2ZpbHRlcnMuZmluZCgnZm9ybScpLFxuICAgICAgICAgICAgX2Nsb3NlRmlsdGVycyA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJlZC1jbG9zZScpLFxuICAgICAgICAgICAgX2ZpbHRlckl0ZW0gPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVycy1saXN0JyksXG4gICAgICAgICAgICBfZmlsdGVyZWQgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQnKSxcbiAgICAgICAgICAgIF9maWx0ZXJlZExpc3QgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQtbGlzdCcpLFxuICAgICAgICAgICAgX2NvdW50RmlsdGVyZWQgPSAwLFxuICAgICAgICAgICAgX3RpdGxlID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtdGl0bGUnKSxcbiAgICAgICAgICAgIF90aXRsZUlubmVyID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtdGl0bGUtaW5uZXInKSxcbiAgICAgICAgICAgIF9jbGVhckZpbHRlcnMgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQgLmJ0biwgLmNhdGVnb3J5X19maWx0ZXJzLWNsZWFyJyksXG4gICAgICAgICAgICBfY2xlYXJTaW5nbGUgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQtcmVtb3ZlJyksXG4gICAgICAgICAgICBfYWRkaXRpb25hbFBhcmFtZXRlcnMgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmluZC1wYXJhbWV0ZXJzJyksXG4gICAgICAgICAgICBfZ2xvYmFsQ2hlY2tGbGFnID0gZmFsc2UsXG4gICAgICAgICAgICBfbG9hZGluZyA9ICQoJzxkaXYgY2xhc3M9XCJsb2FkaW5nXCI+PC9kaXY+JyksXG4gICAgICAgICAgICBfaW5wdXRIaWRkZW4gPSBfb2JqLmZpbmQoJ2lucHV0W3R5cGU9aGlkZGVuXS52YWx1ZS1jaGVjaycpLFxuICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZSA9IF9vYmouZmluZCgnaW5wdXRbdHlwZT1oaWRkZW5dLmN1cnJlbnQtcGFnZScpLFxuICAgICAgICAgICAgX3NvcnRpbmdQYWdlID0gX29iai5maW5kKCcjaXRlbXMtcGFnZScpLFxuICAgICAgICAgICAgX3NvcnRpbmdEYXRlID0gX29iai5maW5kKCcjc29ydGluZy1kYXRlJyksXG4gICAgICAgICAgICBfZGF0YVJhdGVQYXRoID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX3dyYXAnKS5kYXRhKCdyYXRlLXBhdGgnKSxcbiAgICAgICAgICAgIF9hcHBseSA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJzLWFwcGx5JyksXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX29ialZhbHVlID0ge30sXG4gICAgICAgICAgICBfdGltZW91dCA9IG51bGwsXG4gICAgICAgICAgICBfYXJyID0gW10sXG4gICAgICAgICAgICBfY2hlY2tOYW1lID0gJycsXG4gICAgICAgICAgICBfY2hlY2tQcmljZSA9ICcnLFxuICAgICAgICAgICAgX2NsZWFyRmxhZ1NlbGVjdCA9IGZhbHNlLFxuICAgICAgICAgICAgX2NsZWFyRmxhZ1JhZGlvID0gZmFsc2UsXG4gICAgICAgICAgICBfcHJpY2VDYXRlZ29yeSA9IF9vYmouZmluZCgnaW5wdXRbbmFtZT1fcHJpY2VdJyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2J0bi5lYWNoKCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEZpbHRlcnMgPSBjdXJJdGVtLm5leHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiBuZXh0RmlsdGVycy5maW5kKCc+ZGl2JykuaW5uZXJIZWlnaHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX2NvbnRlbnQnKS5jc3MoIHsgJ3otaW5kZXgnOiAnJyB9IClcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYnRuLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzID0gY3VySXRlbS5uZXh0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0RmlsdGVycy5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYWRkQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IG5leHRGaWx0ZXJzLmZpbmQoJz5kaXYnKS5pbm5lckhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMTAgKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYnRuMi5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VGaWx0ZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9jbGVhckZpbHRlcnMub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoJzEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbGVhckZpbHRlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICAgICAgXCIucGFnaW5hdGlvbiBhXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQoY3VySXRlbS50ZXh0KCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5oYXNDbGFzcygncGFnaW5hdGlvbl9fcHJldicpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHBhcnNlSW50KCBfaW5wdXRIaWRkZW5QYWdlLnZhbCgpICkgIT0gMSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbCggX2lucHV0SGlkZGVuUGFnZS52YWwoKSAtIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBjdXJJdGVtLmhhc0NsYXNzKCdwYWdpbmF0aW9uX19uZXh0JykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggISggY3VySXRlbS5wcmV2KCkuaGFzQ2xhc3MoJ2FjdGl2ZScpICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoIHBhcnNlSW50KCBfaW5wdXRIaWRkZW5QYWdlLnZhbCgpICkgKyAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHZhbHVlICE9IHBhcnNlSW50KCBfaW5wdXRIaWRkZW5QYWdlLnZhbCgpICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiLmNhdGVnb3J5X19maWx0ZXJlZC1yZW1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhSWQgPSBwYXJlbnQuZGF0YSgnaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhTmFtZSA9IHBhcmVudC5kYXRhKCduYW1lJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlblBhZ2UudmFsKCcxJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xlYXJTaW5nbGVGaWx0ZXIoIGRhdGFJZCwgZGF0YU5hbWUgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBfY2xvc2VGaWx0ZXJzLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUZpbHRlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYXBwbHkub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlRmlsdGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9maWx0ZXJJdGVtLmZpbmQoJ2lucHV0W3R5cGU9Y2hlY2tib3hdJykub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGN1ckl0ZW0ubmV4dCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsVGV4dCA9IGxhYmVsLmNsb25lKCkuY2hpbGRyZW4oKS5yZW1vdmUoKS5lbmQoKS50ZXh0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGN1ckl0ZW0uYXR0cignbmFtZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gY3VySXRlbS5kYXRhKCdpZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5TmFtZSA9IGN1ckl0ZW0ucGFyZW50cygnLmNhdGVnb3J5X19maWx0ZXJzLWl0ZW0nKS5maW5kKCdzcGFuJylbMF0uaW5uZXJUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50R3JvdXBDaGVjayA9IF9maWx0ZXJJdGVtLmZpbmQoJ2lucHV0W25hbWU9JysgbmFtZSArJ106Y2hlY2tlZCcpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbENoZWNrRmxhZyA9IGN1ckl0ZW0ucHJvcCgnY2hlY2tlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUZpbHRlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvdW50R3JvdXBDaGVjayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF93cml0ZUluSGlkZGVuKCBuYW1lLCBpZCwgX2dsb2JhbENoZWNrRmxhZywgY291bnRHcm91cENoZWNrICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbCgnMScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2FkZGluZ0ZpbHRlcmVkQnkoIGxhYmVsVGV4dCwgaWQsIG5hbWUsIGNhdGVnb3J5TmFtZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfc29ydGluZ1BhZ2Uub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlblBhZ2UudmFsKCcxJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfc29ydGluZ0RhdGUub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlblBhZ2UudmFsKCcxJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYWRkaXRpb25hbFBhcmFtZXRlcnMub24oIHtcbiAgICAgICAgICAgICAgICAgICBzdWJtaXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgX2FkZGl0aW9uYWxQYXJhbWV0ZXJzLmZpbmQoJ3NlbGVjdCcpLmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGN1ckl0ZW0uYXR0cignbmFtZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gY3VySXRlbS52YWwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dyaXRlSW5IaWRkZW4oIG5hbWUsIGlkLCAnc2VsZWN0JywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xlYXJHcm91cEZpbHRlcnMobmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICBfYWRkaXRpb25hbFBhcmFtZXRlcnMuZmluZCgnaW5wdXRbdHlwZT1yYWRpb106Y2hlY2tlZCcpLmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGN1ckl0ZW0uYXR0cignbmFtZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gY3VySXRlbS52YWwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dyaXRlSW5IaWRkZW4oIG5hbWUsIGlkLCAncmFkaW8nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbGVhckdyb3VwRmlsdGVycyhuYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoJzEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hZGRpbmdGaWx0ZXJlZEJ5ID0gZnVuY3Rpb24oIGl0ZW1UZXh0LCBpdGVtSWQsIGl0ZW1OYW1lLCBjYXRlZ29yeU5hbWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggX2dsb2JhbENoZWNrRmxhZyApIHtcblxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVyZWRMaXN0LmFwcGVuZCgnPGxpIGRhdGEtbmFtZT0nKyBpdGVtTmFtZSArJyBkYXRhLWlkPVwiJysgaXRlbUlkICsnXCI+JysgY2F0ZWdvcnlOYW1lICsnOiAnKyBpdGVtVGV4dCArJyA8YSBocmVmPVwiI1wiIGNsYXNzPVwiY2F0ZWdvcnlfX2ZpbHRlcmVkLXJlbW92ZVwiPjwvYT48L2xpPicpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVyZWRMaXN0LmZpbmQoJ2xpW2RhdGEtaWQ9XCInICsgaXRlbUlkICsgJ1wiXScpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF9jb3VudEZpbHRlcmVkID0gX2ZpbHRlcmVkTGlzdC5maW5kKCdsaScpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGlmKCBfY291bnRGaWx0ZXJlZCA+IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlcmVkLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgX3RpdGxlLmZpbmQoJ3NwYW4nKS5odG1sKCcoJysgX2NvdW50RmlsdGVyZWQgKycpJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aXRsZUlubmVyLmZpbmQoJ3NwYW4nKS5odG1sKCcoJysgX2NvdW50RmlsdGVyZWQgKycpJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aXRsZS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgX2NsZWFyRmlsdGVycy5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9maWx0ZXJlZC5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aXRsZS5maW5kKCdzcGFuJykuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aXRsZUlubmVyLmZpbmQoJ3NwYW4nKS5odG1sKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgX3RpdGxlLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgICBfY2xlYXJGaWx0ZXJzLmFkZENsYXNzKCdoaWRkZW4nKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hZGRMb2FkaW5nID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfbG9hZGluZyA9ICQoJzxkaXYgY2xhc3M9XCJsb2FkaW5nXCI+PC9kaXY+Jyk7XG5cbiAgICAgICAgICAgICAgICAkKCcuY2F0ZWdvcnlfX2NvbnRlbnQnKS5hcHBlbmQoX2xvYWRpbmcpO1xuXG4gICAgICAgICAgICAgICAgX2xvYWRpbmcuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAkKCcuY2F0ZWdvcnlfX3dyYXAnKS5wb3NpdGlvbigpLnRvcCAtIDIwXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jbG9zZUxvYWRpbmcgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfdGltZW91dCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgIF90aW1lb3V0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF90aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5sb2FkaW5nJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIH0sIDMwMCApO1xuXG4gICAgICAgICAgICAgICAgX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmxvYWRpbmcnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9LCA2MjAgKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jbGVhckZpbHRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX2ZpbHRlcmVkLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBfdGl0bGUuZmluZCgnc3BhbicpLmh0bWwoJycpO1xuICAgICAgICAgICAgICAgIF90aXRsZUlubmVyLmZpbmQoJ3NwYW4nKS5odG1sKCcnKTtcbiAgICAgICAgICAgICAgICBfdGl0bGUucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgX2ZpbHRlcmVkTGlzdC5maW5kKCdsaScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIF9maWx0ZXJJdGVtLmZpbmQoJ2lucHV0W3R5cGU9Y2hlY2tib3hdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW4udmFsKCcnKTtcblxuICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XG4gICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xlYXJTaW5nbGVGaWx0ZXIgPSBmdW5jdGlvbiggaXRlbUlkLCBpdGVtTmFtZSApIHtcblxuICAgICAgICAgICAgICAgIF9maWx0ZXJJdGVtLmZpbmQoJ2lucHV0W2RhdGEtaWQ9XCInKyBpdGVtSWQgKydcIl0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIF9nbG9iYWxDaGVja0ZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfYWRkaW5nRmlsdGVyZWRCeSggJycsIGl0ZW1JZCwgJycsICcnICk7XG4gICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcbiAgICAgICAgICAgICAgICBfd3JpdGVJbkhpZGRlbiggaXRlbU5hbWUsIGl0ZW1JZCwgX2dsb2JhbENoZWNrRmxhZywgJycgKTtcbiAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jbGVhckdyb3VwRmlsdGVycyA9IGZ1bmN0aW9uKCBpdGVtTmFtZSApIHtcblxuICAgICAgICAgICAgICAgIF9maWx0ZXJJdGVtLmZpbmQoJ2lucHV0W25hbWU9XCInKyBpdGVtTmFtZSArJ1wiXScpLmVhY2goIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1JZCA9IGN1ckl0ZW0uZGF0YSgnaWQnKTtcblxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVySXRlbS5maW5kKCdpbnB1dFtkYXRhLWlkPVwiJysgaXRlbUlkICsnXCJdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgX2dsb2JhbENoZWNrRmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBfYWRkaW5nRmlsdGVyZWRCeSggJycsIGl0ZW1JZCwgJycsICcnICk7XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xvc2VGaWx0ZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfYnRuMi5oYXNDbGFzcygnb3BlbmVkJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2J0bjIucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICBfZmlsdGVycy5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19jb250ZW50JykuY3NzKCB7ICd6LWluZGV4JzogJycgfSApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBfYnRuMi5hZGRDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIF9maWx0ZXJzLmFkZENsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggIF93aW5kb3cud2lkdGgoKSA8IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19jb250ZW50JykuY3NzKCB7ICd6LWluZGV4JzogMTAwIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NyZWF0ZVBhZ2luYXRpb24gPSBmdW5jdGlvbiggZGF0YSApIHtcblxuICAgICAgICAgICAgICAgIHZhciBwYWdlcyA9IHBhcnNlSW50KGRhdGEuc2V0dGluZ3MucGFnZXNBbGwpLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVQYWdlID0gcGFyc2VJbnQoZGF0YS5zZXR0aW5ncy5jdXJyZW50UGFnZSk7XG5cbiAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbChhY3RpdmVQYWdlKTtcblxuICAgICAgICAgICAgICAgIGlmKCBwYWdlcyAhPSAxICYmICBwYWdlcyAhPSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWdpbmF0aW9uV3JhcCA9ICc8ZGl2IGNsYXNzPVwicGFnaW5hdGlvblwiPic7XG5cbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cInBhZ2luYXRpb25fX3ByZXZcIj48L2E+JztcblxuICAgICAgICAgICAgICAgICAgICBpZiggcGFnZXMgPD0gNyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDE7IGkgPD0gcGFnZXM7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGFjdGl2ZVBhZ2UgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhY3RpdmVcIj4nKyBpICsnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBpICsnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGFjdGl2ZVBhZ2UgPD0gMyB8fCBhY3RpdmVQYWdlID4gcGFnZXMtMyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAxOyBpIDw9IDM7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBhY3RpdmVQYWdlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFjdGl2ZVwiPicrIGkgKyc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+JysgaSArJzwvYT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8c3Bhbj4uLi48L3NwYW4+JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSBwYWdlcy0yOyBpIDw9IHBhZ2VzOyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gYWN0aXZlUGFnZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhY3RpdmVcIj4nKyBpICsnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIGkgKyc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggYWN0aXZlUGFnZSA+IDMgJiYgYWN0aXZlUGFnZSA8PSBwYWdlcy0zICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4xPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPHNwYW4+Li4uPC9zcGFuPic7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggKGFjdGl2ZVBhZ2UtMSA+IDMpICYmIChhY3RpdmVQYWdlKzEgPD0gcGFnZXMtMykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IGFjdGl2ZVBhZ2UtMTsgaSA8PSBhY3RpdmVQYWdlKzE7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gYWN0aXZlUGFnZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYWN0aXZlXCI+JysgaSArJzwvYT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIGkgKyc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIGFjdGl2ZVBhZ2UtMSA8PSAzICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSBhY3RpdmVQYWdlOyBpIDw9IGFjdGl2ZVBhZ2UrMjsgaSsrICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBhY3RpdmVQYWdlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhY3RpdmVcIj4nKyBpICsnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+JysgaSArJzwvYT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggYWN0aXZlUGFnZSsxID49IHBhZ2VzLTMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IGFjdGl2ZVBhZ2UtMjsgaSA8PSBhY3RpdmVQYWdlOyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGFjdGl2ZVBhZ2UgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFjdGl2ZVwiPicrIGkgKyc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBpICsnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPHNwYW4+Li4uPC9zcGFuPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBwYWdlcyArJzwvYT4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggcGFnZXMgPT0gOCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBhY3RpdmVQYWdlID4gMyAmJiBhY3RpdmVQYWdlIDw9IHBhZ2VzLTMgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+MTwvYT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8c3Bhbj4uLi48L3NwYW4+JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gNDsgaSA8PSA1OyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGFjdGl2ZVBhZ2UgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFjdGl2ZVwiPicrIGkgKyc8L2E+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBpICsnPC9hPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxzcGFuPi4uLjwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIHBhZ2VzICsnPC9hPic7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cInBhZ2luYXRpb25fX25leHRcIj48L2E+JztcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0gJzwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLnBhZ2luYXRpb24td3JhcCcpLmh0bWwocGFnaW5hdGlvbldyYXApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggJCgnLnBhZ2luYXRpb24nKS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5wYWdpbmF0aW9uJykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3Bhc3RlTmV3UHJvZHVjdHMgPSBmdW5jdGlvbiggZGF0YSApIHtcblxuICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0gZGF0YS5wcm9kdWN0cyxcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwID0gJzxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeVwiPicsXG4gICAgICAgICAgICAgICAgICAgIG5ld0FyclByaWNlUmFuZ2UgPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmKCBfb2JqVmFsdWVbJ3ByaWNlJ10gIT0gdW5kZWZpbmVkICkge1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IF9vYmpWYWx1ZVsncHJpY2UnXS5sZW5ndGgtMTsgaSsrICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJpY2VJdGVtID0gcGFyc2VGbG9hdChfb2JqVmFsdWVbJ3ByaWNlJ11baV0ucmVwbGFjZSgnJCcsJycpLnJlcGxhY2UoJywnLCcnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0FyclByaWNlUmFuZ2UucHVzaChwcmljZUl0ZW0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCBfcHJpY2VDYXRlZ29yeS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrZWRQcmljZVJhbmdlID0gX3ByaWNlQ2F0ZWdvcnkuZmlsdGVyKCc6Y2hlY2tlZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRpbmdQcmljZSA9IHBhcnNlSW50KGNoZWNrZWRQcmljZVJhbmdlLmF0dHIoJ3ZhbHVlJykuc3BsaXQoJy0nKVswXSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiggbmV3QXJyUHJpY2VSYW5nZS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaWNlUmFuZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHN0YXJ0aW5nUHJpY2UgPT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VSYW5nZSA9IE1hdGgubWluLmFwcGx5KG51bGwsIG5ld0FyclByaWNlUmFuZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDw9IG5ld0FyclByaWNlUmFuZ2UubGVuZ3RoLTE7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBuZXdBcnJQcmljZVJhbmdlW2ldID49IHN0YXJ0aW5nUHJpY2UgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VSYW5nZSA9IG5ld0FyclByaWNlUmFuZ2VbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQuZWFjaCggbmV3RGF0YSwgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSBwcm9kdWN0LnByaWNlWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2FsZVByaWNlID0gcHJvZHVjdC5vbGRQcmljZVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlSXRlbTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggX3ByaWNlQ2F0ZWdvcnkubGVuZ3RoICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LnByaWNlLmxlbmd0aC0xOyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZUl0ZW0gPSBwYXJzZUZsb2F0KHByb2R1Y3QucHJpY2VbaV0ucmVwbGFjZSgnJCcsJycpLnJlcGxhY2UoJywnLCcnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcHJpY2VJdGVtID49IHN0YXJ0aW5nUHJpY2UgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSBwcm9kdWN0LnByaWNlW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWxlUHJpY2UgPSBwcm9kdWN0Lm9sZFByaWNlW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiggbmV3QXJyUHJpY2VSYW5nZS5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHByb2R1Y3QucHJpY2UubGVuZ3RoLTE7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlSXRlbSA9IHBhcnNlRmxvYXQocHJvZHVjdC5wcmljZVtpXS5yZXBsYWNlKCckJywnJykucmVwbGFjZSgnLCcsJycpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcmljZUl0ZW0gPj0gcHJpY2VSYW5nZSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9IHByb2R1Y3QucHJpY2VbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbGVQcmljZSA9IHByb2R1Y3Qub2xkUHJpY2VbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2l0ZW1cIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0LmZlYXR1cmVkICE9IHVuZGVmaW5lZCAmJiBwcm9kdWN0LmZlYXR1cmVkICE9IFwiXCIgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPHNwYW4gY2xhc3M9XCJzaXRlX19mZWF0dXJlZFwiPicrIHByb2R1Y3QuZmVhdHVyZWQgKyc8L3NwYW4+JztcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2hlYWRcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJysgcHJvZHVjdC51cmxEZXRhaWxzICsnXCIgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fcGljXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJysgcHJvZHVjdC5waWN0dXJlICsnKVwiPjwvYT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fdGl0bGVcIj48YSBocmVmPVwiJysgcHJvZHVjdC51cmxEZXRhaWxzICsnXCI+JysgcHJvZHVjdC50aXRsZSArJzwvYT48L2gyPic7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3QucmF0ZSAhPSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPGRpdiBjbGFzcz1cInJhdGVcIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LnJhdGUuc3RhcnNDb3VudC0xOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxpbWcgc3JjPVwiJysgX2RhdGFSYXRlUGF0aCArJ2ltZy9zdGFyLnBuZ1wiIHdpZHRoPVwiNjBcIiBoZWlnaHQ9XCI1MFwiIGFsdD1cIlwiPiZuYnNwOydcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxhIGhyZWY9XCInKyBwcm9kdWN0LnJhdGUudXJsUmV2aWV3cyArJ1wiIGNsYXNzPVwicmF0ZV9fcmV2aWV3c1wiPicrIHByb2R1Y3QucmF0ZS5yZXZpZXdzQ291bnQgKyc8L2E+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19jb250ZW50XCI+JztcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3QuY29udGVudC5kZXNjcmlwdGlvbiAhPSB1bmRlZmluZWQgJiYgcHJvZHVjdC5jb250ZW50LmRlc2NyaXB0aW9uICE9IFwiXCIgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2Rlc2NyaXB0aW9uXCI+JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gcHJvZHVjdC5jb250ZW50LmRlc2NyaXB0aW9uLmxlbmd0aC0xOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxsaT4nKyBwcm9kdWN0LmNvbnRlbnQuZGVzY3JpcHRpb25baV0gKyc8L2xpPidcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzwvdWw+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9faXRlbXNcIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbiAhPSB1bmRlZmluZWQgJiYgcHJvZHVjdC5jb250ZW50LnNwZWNpZmljYXRpb24gIT0gXCJcIiApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19zcGVjaWZpY2F0aW9uXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19zcGVjaWZpY2F0aW9uLWhlYWRcIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5oZWFkLmxlbmd0aC0xOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXYgc3R5bGU9XCJ3aWR0aDonKyAoMTAwL3Byb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uLmhlYWQubGVuZ3RoKSArJyVcIj4nKyBwcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5oZWFkW2ldICsnPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fc3BlY2lmaWNhdGlvbi1jb250ZW50XCI+JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gcHJvZHVjdC5jb250ZW50LnNwZWNpZmljYXRpb24uY29udGVudC5sZW5ndGgtMTsgaSsrICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8ZGl2IHN0eWxlPVwid2lkdGg6JysgKDEwMC9wcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5oZWFkLmxlbmd0aCkgKyclXCI+JysgcHJvZHVjdC5jb250ZW50LnNwZWNpZmljYXRpb24uY29udGVudFtpXSArJzwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiggc2FsZVByaWNlICE9IHVuZGVmaW5lZCAmJiBzYWxlUHJpY2UgIT0gXCJcIiApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fZm9vdGVyXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX3ByaWNlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlbD4nKyBzYWxlUHJpY2UgKyc8L2RlbD4gJysgcHJpY2UgKydcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fZm9vdGVyXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX3ByaWNlXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJysgcHJpY2UgKydcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8YSBocmVmPVwiJysgcHJvZHVjdC51cmxEZXRhaWxzICsnXCIgY2xhc3M9XCJidG4gYnRuXzNcIj5zZWUgZGV0YWlsczwvYT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XG5cblxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgJCgnLmNhdGVnb3J5X193cmFwJykuaHRtbChwcm9kdWN0c1dyYXApO1xuXG4gICAgICAgICAgICAgICAgX2Nsb3NlTG9hZGluZygpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xuICAgICAgICAgICAgICAgICAgICB1cmw6IF9wYXRoLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gOiAnZ2V0X2ZpbHRlcmVkX3Byb2R1Y3RzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfaW5wdXRIaWRkZW4udmFsKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlU29ydGluZzogX3NvcnRpbmdQYWdlLnZhbCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVNvcnRpbmc6IF9zb3J0aW5nRGF0ZS52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBfaW5wdXRIaWRkZW5QYWdlLnZhbCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWRDYXRlZ29yeTogX29iai5kYXRhKCdpZC1jYXRlZ29yeScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFBhcmFtZXRlcnM6IF9hZGRpdGlvbmFsUGFyYW1ldGVycy5zZXJpYWxpemUoKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoIG0gKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9wYXN0ZU5ld1Byb2R1Y3RzKCBtICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlUGFnaW5hdGlvbiggbSApO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggWE1MSHR0cFJlcXVlc3Quc3RhdHVzVGV4dCAhPSBcImFib3J0XCIgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF93cml0ZUluSGlkZGVuID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGNoZWNrRmxhZywgY291bnRHcm91cENoZWNrKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggY2hlY2tGbGFnID09ICdyYWRpbycgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX29ialZhbHVlW25hbWVdID0gW3ZhbHVlXTtcblxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBjaGVja0ZsYWcgPT0gJ3NlbGVjdCcgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHZhbHVlICE9IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmpWYWx1ZVtuYW1lXSA9IFt2YWx1ZV07XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9vYmpWYWx1ZVtuYW1lXTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGNoZWNrRmxhZyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICBpZiggX29ialZhbHVlLmhhc093blByb3BlcnR5KG5hbWUpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggY291bnRHcm91cENoZWNrID09IDEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbbmFtZV0gPSBbdmFsdWVdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBfb2JqVmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcHJvcCA9PSBuYW1lICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbcHJvcF0ucHVzaCh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX29ialZhbHVlW25hbWVdID0gW3ZhbHVlXVxuXG4gICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gX29ialZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcm9wID09IG5hbWUgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IF9vYmpWYWx1ZVtwcm9wXS5pbmRleE9mKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGkgIT0gLTEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbcHJvcF0uc3BsaWNlKGksIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqVmFsdWVbbmFtZV0ubGVuZ3RoID09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfb2JqVmFsdWVbbmFtZV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBzdHJGaW5pc2ggPSAnJyxcbiAgICAgICAgICAgICAgICAgICAgc3RyVmFsdWVzID0gJycsXG4gICAgICAgICAgICAgICAgICAgIHN0ckZ1bGwgPSAnJyxcbiAgICAgICAgICAgICAgICAgICAgYXJyQWxsID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IoIHZhciBrZXkgaW4gX29ialZhbHVlICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9hcnIgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IF9vYmpWYWx1ZVsga2V5IF07XG5cbiAgICAgICAgICAgICAgICAgICAgX2Fyci5wdXNoKCBpdGVtICk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gX2Fyci5sZW5ndGgtMTsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0clZhbHVlcyA9IF9hcnIuam9pbignLCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdHJGdWxsID0ga2V5ICsgJz0nICsgc3RyVmFsdWVzO1xuXG4gICAgICAgICAgICAgICAgICAgIGFyckFsbC5wdXNoKHN0ckZ1bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgIHN0ckZpbmlzaCA9IGFyckFsbC5qb2luKCcmJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW4udmFsKCBzdHJGaW5pc2ggKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfb2JqLmhhc0NsYXNzKCdjYXRlZ29yeV9zdWInKSApIHtcblxuICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xuICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7IiwiKCBmdW5jdGlvbigpe1xuXG4gICAgJChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJCgnLnNlYXJjaCcpLmVhY2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBuZXcgU2VhcmNoKCAkKHRoaXMpICk7XG5cbiAgICAgICAgfSApO1xuXG4gICAgfSApO1xuXG4gICAgdmFyIFNlYXJjaCA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9pbnB1dCA9IF9vYmouZmluZCgnaW5wdXRbdHlwZT1zZWFyY2hdJyksXG4gICAgICAgICAgICBfcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICAgICAgX3BhdGggPSBfb2JqLmRhdGEoJ3BhdGgnKSxcbiAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDAsXG4gICAgICAgICAgICBjb3VudEl0ZW1zID0gMCxcbiAgICAgICAgICAgIHZhbHVlSW5wdXQgPSBfaW5wdXQudmFsKCksXG4gICAgICAgICAgICBfcmVzdWx0ID0gX29iai5maW5kKCcuc2VhcmNoX19yZXN1bHQnKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX2lucHV0Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGtleXVwOiBmdW5jdGlvbihJKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKHdpbmRvdykud2lkdGgoKSA+PSAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKEkua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmZpbHRlcignLmFjdGl2ZScpLmxlbmd0aCA9PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnZm9ybScpLnN1Ym1pdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVJbnB1dCA9ICQodGhpcykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggdmFsdWVJbnB1dC5sZW5ndGggPj0gX29iai5kYXRhKCdzeW1ib2xzJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWpheFJlcXVlc3QoICQodGhpcyksIHZhbHVlSW5wdXQubGVuZ3RoKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQodGhpcykudmFsKCkgPT0gJycgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGtleWRvd246IGZ1bmN0aW9uKEkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQod2luZG93KS53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goIEkua2V5Q29kZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5maWx0ZXIoJy5hY3RpdmUnKS5sZW5ndGggPT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IF9vYmouZGF0YSgnYWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmZpbHRlcignLmFjdGl2ZScpLmZpbmQoJ2EnKS5hdHRyKCdocmVmJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjb3VudEl0ZW1zID4gMCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9rZXlBY3RpdmF0ZSggSS5rZXlDb2RlICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggc3VnZ2VzdFNlbGVjdGVkID09IGNvdW50SXRlbXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAkKCdodG1sJykuY2xpY2soIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcblxuICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xuXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYm9keVwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiggZXZlbnQgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiLnNlYXJjaF9fZm91bmQgbGlcIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9IGN1ckl0ZW0uZmluZCgnYScpLnRleHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbChjdXJUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxuICAgICAgICAgICAgICAgICAgICBcImtleWRvd25cIixcbiAgICAgICAgICAgICAgICAgICAgXCIuc2VhcmNoX19mb3VuZCBsaVwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihJKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChJLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2tleUFjdGl2YXRlID0gZnVuY3Rpb24obikge1xuXG4gICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfb2JqLnBhcmVudHMoKS5oYXNDbGFzcygnc2l0ZV9fZm9vdGVyJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIG4gPT0gMzggJiYgc3VnZ2VzdFNlbGVjdGVkIDwgY291bnRJdGVtcyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkKys7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbiA9PSA0MCAmJiBzdWdnZXN0U2VsZWN0ZWQgPiAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzdWdnZXN0U2VsZWN0ZWQgPiAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZXEoIC0xIC0gKHN1Z2dlc3RTZWxlY3RlZCAtIDEpICkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbCggX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmVxKCAtMSAtIChzdWdnZXN0U2VsZWN0ZWQgLSAxKSApLmZpbmQoJ2EnKS50ZXh0KCkgKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCB2YWx1ZUlucHV0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiggbiA9PSA0MCAmJiBzdWdnZXN0U2VsZWN0ZWQgPCBjb3VudEl0ZW1zICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQrKztcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuID09IDM4ICYmIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5lcSggc3VnZ2VzdFNlbGVjdGVkIC0gMSApLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dC52YWwoIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5lcSggc3VnZ2VzdFNlbGVjdGVkIC0gMSApLmZpbmQoJ2EnKS50ZXh0KCkgKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCB2YWx1ZUlucHV0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfYWRkRGF0YSA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBkYXRhLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzID0gZGF0YS5jYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzQXZhaWxhYmlsaXR5ID0gY2F0ZWdvcmllcy5sZW5ndGggIT0gMCxcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHMgPSBkYXRhLnByb2R1Y3RzLFxuICAgICAgICAgICAgICAgICAgICBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHVybFByb2R1Y3RzQ2F0ZWdvcmllc0FyciA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0c1dyYXAgPSAnPGRpdiBjbGFzcz1cInRvcC1wcm9kdWN0c19fd3JhcFwiPic7XG5cbiAgICAgICAgICAgICAgICAkLmVhY2goIHByb2R1Y3RzLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX2l0ZW1cIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1wcm9kdWN0c19fcGljXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJysgcHJvZHVjdC5zcmMgKycpXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvcC1wcm9kdWN0c19fcHJpY2VcIj48ZGVsPicrIHByb2R1Y3Qub2xkUHJpY2UgKyc8L2RlbD4gJysgcHJvZHVjdC5wcmljZSArJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidG9wLXByb2R1Y3RzX19pdGVtLXRpdGxlXCI+JysgcHJvZHVjdC5uYW1lICsnPC9oMz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIicrIHByb2R1Y3QuaHJlZiArJ1wiIGNsYXNzPVwidG9wLXByb2R1Y3RzX19idG5cIj52aWV3PC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgaWYoICFjYXRlZ29yaWVzQXZhaWxhYmlsaXR5ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIucHVzaCggW3Byb2R1Y3QuY2F0ZWdvcmllcy5tYWluQ2F0ZWdvcnksIHByb2R1Y3QuY2F0ZWdvcmllcy51cmxNYWluQ2F0ZWdvcnksIHByb2R1Y3QuY2F0ZWdvcmllcy5zdWJjYXRlZ29yaWVzLCBwcm9kdWN0LmNhdGVnb3JpZXMudXJsU3ViY2F0ZWdvcmllc10gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJ2RpdicpLmVxKDEpLmZpbmQoJy50b3AtcHJvZHVjdHMnKS5odG1sKCc8aDIgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX3RpdGxlXCI+VG9wIFByb2R1Y3RzPC9oMj4nICsgcHJvZHVjdHNXcmFwKTtcblxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRTdHIgPSAnPHVsIGNsYXNzPVwic2VhcmNoX19mb3VuZFwiPic7XG5cbiAgICAgICAgICAgICAgICBpZiggY2F0ZWdvcmllc0F2YWlsYWJpbGl0eSApIHtcblxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goIGNhdGVnb3JpZXMsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViY2F0ZWdvcmllcyA9IHRoaXMuc3ViY2F0ZWdvcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxTdWJjYXRlZ29yaWVzID0gdGhpcy51cmxTdWJjYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwID0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzdWJjYXRlZ29yaWVzICE9IHVuZGVmaW5lZCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDw9IHN1YmNhdGVnb3JpZXMubGVuZ3RoLTE7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCArPSAnPGxpIGNsYXNzPVwic2VhcmNoX19mb3VuZC1zdWJcIj48YSBocmVmPVwiJysgdXJsU3ViY2F0ZWdvcmllc1tpXSArJ1wiPicgKyBzdWJjYXRlZ29yaWVzW2ldICsgJzwvYT48L2xpPic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyICs9ICc8bGk+PGEgaHJlZj1cIicrIHRoaXMudXJsQ2F0ZWdvcnkgKydcIj4nKyB0aGlzLm5hbWUgKyc8L2E+PC9saT4nKyBzdWJjYXRlZ29yaWVzV3JhcCArJyc7XG5cbiAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPD0gYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xOyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBmbGFnICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyLnB1c2goYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xXVswXSAhPSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMF0gKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0NhdGVnb3JpZXNBcnIucHVzaChhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDw9IGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXS5sZW5ndGgtMTsgaisrICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciB6ID0gMDsgeiA8PSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl0ubGVuZ3RoLTE7IHorKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3RzQ2F0ZWdvcmllc0Fycltwcm9kdWN0c0NhdGVnb3JpZXNBcnIubGVuZ3RoLTFdWzJdLmluZGV4T2YoIGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXVt6XSkgPT0gLTEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xXVsyXS5wdXNoKCBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl1bel0gKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDw9IHByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMTsgaSsrICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldLmxlbmd0aC0xOyBqKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViY2F0ZWdvcmllc1dyYXAgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIHogPSAwOyB6IDw9IHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXS5sZW5ndGgtMTsgeisrICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwICs9ICc8bGkgY2xhc3M9XCJzZWFyY2hfX2ZvdW5kLXN1YlwiPjxhIGhyZWY9XCInICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzNdW3pdICsgJ1wiPicgKyBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl1bel0gKyAnPC9hPjwvbGk+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCArPSAnJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gJzxsaT48YSBocmVmPVwiJyArIHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsxXSArICdcIj4nICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzBdICsgJzwvYT48L2xpPicrIHN1YmNhdGVnb3JpZXNXcmFwICsnJztcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gJzwvdWw+JztcblxuICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnZGl2OmZpcnN0JykuaHRtbChyZXN1bHRTdHIpO1xuXG4gICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCcpLmZpbmQoJ2xpOm5vdCg6bHQoMTEpKScpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgY291bnRJdGVtcyA9IF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQnKS5maW5kKCdsaScpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIF9yZXN1bHQuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hamF4UmVxdWVzdCA9ICBmdW5jdGlvbiggaW5wdXQsIG4gKSB7XG5cbiAgICAgICAgICAgICAgICBfcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIF9yZXF1ZXN0ID0gJC5hamF4KCB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogX3BhdGgsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpbnB1dC52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjonbWFpbl9zZWFyY2gnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICggbXNnICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggT2JqZWN0LmtleXMobXNnKS5sZW5ndGggIT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkRGF0YSggbXNnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7Il19
