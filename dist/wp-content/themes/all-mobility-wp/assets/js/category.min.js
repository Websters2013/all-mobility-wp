!function(){var e=!0;$(function(){$(".site__menu").each(function(){new n($(this)),new i($(this))}),$(".not-found").each(function(){new t($(this))}),$(".confirmation").each(function(){new t($(this))}),$("#wpsl-stores").each(function(){$(this).perfectScrollbar({wheelPropagation:!0})}),$(".checkout").each(function(){new o($(this))})});var n=function(e){var n=e,i=n.find(".site__menu-item"),t=n.find(".site__menu-icon"),o=$(window),s=null,d=o.width(),a=function(){o.on({resize:function(){d>o.width()&&(d=o.width(),o.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),t.on({click:function(){var e=jQuery(this),n=e.parents("li"),i=n.find(".site__menu-sub");return o.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),i.slideUp()):(n.addClass("opened"),i.slideDown())),!1}}),i.on({mouseenter:function(){if(o.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");o.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(o.width()>=1024){$(".featured-product__loading").addClass("visible"),s&&(clearTimeout(s),s=null);var e=$(this),i=e.data("product");s=setTimeout(function(){n.find(".featured-product").find(".featured-product__title").text(i.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",i.src),n.find(".featured-product").find(".btn").attr("href",i.href),n.find(".featured-product").find(".featured-product__price span").text(i.price),i.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),i.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(i.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),s=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){o.width()>=1024&&$(this).removeClass("opened")})},r=function(){a()};r()},i=function(n){var i,t,o=this,s=n,d=$(window),a=!1,r=$(".site__header"),c=$(".site__hidden-items"),u=r.innerHeight(),f=$(".site__header-btn"),l=$(".site__hidden-close"),h=$(".search"),p=$(".search-btn"),_=$(".search__cancel"),m=$(".site__hidden-btn"),v=$(".site"),C=$("html"),w=($(".site__content"),function(){$(document).on("click",".search",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click","body",function(){H()}),f.on({click:function(){k($(this))}}),l.on({click:function(){return y(),!1}}),p.on({click:function(){return T($(this)),!1}}),_.on({click:function(){return H(),!1}}),d.on({scroll:function(e){g(),a=d.scrollTop()>=u,0==d.scrollTop()&&r.removeClass("site__header_hidden")},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;b(i)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;b(i)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>i?b(-1):n<i&&b(1),i=n},keydown:function(e){switch(e.which){case 32:b(1);break;case 33:b(-1);break;case 34:b(1);break;case 35:b(1);break;case 36:b(-1);break;case 38:b(-1);break;case 40:b(1);break;default:return}},resize:function(){d.width()>=1024&&(v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""})},10))}})}),b=function(n){n>0&&!r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&r.addClass("site__header_hidden"),n<0&&r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&e&&r.removeClass("site__header_hidden")},g=function(){d.scrollTop()>u+150?r.addClass("fixed"):r.removeClass("fixed")},k=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),c.removeClass("opened")):(n.addClass("opened"),c.addClass("opened")),t=d.scrollTop(),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":"scroll"}),setTimeout(function(){v.css({height:"100%"})},10)},300)},T=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")):(n.addClass("opened"),h.addClass("active"),m.addClass("hidden"))},y=function(){f.removeClass("opened"),c.removeClass("opened"),h.find("input").focusout(),v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""}),d.scrollTop(t)},10)},H=function(){p.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")},x=function(){s[0].obj=o,w(),g()};x()},t=function(e){var n=e,i=$(window),t=i.width(),o=function(){i.on({resize:function(){t!=i.width()&&(t=i.width(),s())}})},s=function(){n.css({minHeight:""}),n.css({minHeight:i.height()-$(".site__header").innerHeight()-$(".site__footer").innerHeight()-$(".breadcrumbs").innerHeight()})},d=function(){o(),s()};d()},o=function(e){var n=e,i=n.find(".total-order"),t=function(){},o=function(){n.css({minHeight:i.innerHeight()})},s=function(){t(),o()};s()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return v($(this).attr("data-popup")),!1}}),u.find(">div").on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},v=function(o){m(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
"use strict";!function(){$(function(){$.each($(".product__slider"),function(){new i($(this))}),$.each($(".featured-products"),function(){new s($(this))})});var i=function(i){var s=this,o=i,e=function(){o[0].obj=s,n()},n=function(){$(".slider-for").slick({slidesToShow:1,slidesPerRow:1,slidesToScroll:1,arrows:!1,infinite:!0,asNavFor:".slider-nav"}),$(".slider-nav").slick({slidesToShow:4,slidesPerRow:4,asNavFor:".slider-for",dots:!1,arrows:!1,infinite:!0,centerMode:!1,focusOnSelect:!0,responsive:[{breakpoint:1360,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:1024,settings:{slidesToShow:4,slidesToScroll:4}},{breakpoint:412,settings:{slidesToShow:3,slidesToScroll:3}}]})};e()},s=function(i){var s,o,e=this,n=i,t=$(window),r=n.find(".swiper-pagination"),d=n.find(".swiper-button-prev"),l=n.find(".swiper-button-next"),c=!1,u=function(){n[0].obj=e,a(),t.width()<=768?o=!1:(o=!0,p())},a=function(){t.on({resize:function(){t.width()<=768?o&&(o=!1,f()):o||(o=!0,p())}})},f=function(){s.slick("unslick")},p=function(){w(),s=$(".featured-products__wrapper").slick({dots:!0,slidesToShow:5,slidesToScroll:1,autoplay:!0,autoplaySpeed:5e3,prevArrow:d,nextArrow:l,appendDots:r,responsive:[{breakpoint:1440,settings:{slidesToShow:4}}]})},w=function(){t.width()>=1024?n.find(".featured-products__slide").length>=4&&(c=!0):t.width()>=1425&&n.find(".featured-products__slide").length>=5&&(c=!0),c||n.find(".featured-products__controls").css({display:"none"})};u()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,d=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),l=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(l),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),l.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){l.text($(this).find("option:selected").text())}),$(document).on("change","select",function(){$(this).prev().text($(this).find("option:selected").text())}),1!=s||d||p.on({click:function(e){e.stopPropagation(),u?v():y()}}),f.on({click:function(){u&&v()}})},g=function(){!s||d?x():1==s&&_()},_=function(){p.addClass("websters-select_custom")},x=function(){p.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset(),0),d=o.find("option:selected").index(),l=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+l+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),p.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:-2,top:p.outerHeight()-4}),s=t.outerHeight(),s>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".category").each(function(){new e($(this))})});var e=function(e){var a=e,t=$("body").data("action"),i=new XMLHttpRequest,n=a.find(".category__filters-item span"),s=a.find(".category__filters-title"),r=a.find(".category__filters-items"),c=(r.find("form"),a.find(".category__filtered-close")),o=a.find(".category__filters-list"),d=a.find(".category__filtered"),l=a.find(".category__filtered-list"),f=0,p=a.find(".category__filters-title"),v=a.find(".category__filters-title-inner"),h=a.find(".category__filtered .btn, .category__filters-clear"),u=(a.find(".category__filtered-remove"),a.find(".category__find-parameters")),g=!1,_=$('<div class="loading"></div>'),m=a.find("input[type=hidden].value-check"),y=a.find("input[type=hidden].current-page"),b=a.find("#items-page"),C=a.find("#sorting-date"),k=a.find(".category__wrap").data("rate-path"),w=a.find(".category__filters-apply"),x=$(window),P={},T=null,I=[],z=(a.find("input[name=_price]"),function(){x.on({resize:function(){n.each(function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")&&t.css({"min-height":t.find(">div").innerHeight()})}),x.width()>=1024&&$(".site__content").css({"z-index":""})},load:function(){}}),n.on({click:function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")?(a.removeClass("opened"),t.css({"min-height":0,height:0})):(a.addClass("opened"),t.css({"min-height":t.find(">div").innerHeight()}),setTimeout(function(){t.css({height:"auto"})},310))}}),s.on({click:function(){R()}}),h.on({click:function(){return y.val("1"),F(),!1}}),$(document).on("click",".pagination a",function(){var e=$(this),a=parseInt(e.text());return e.hasClass("pagination__prev")?1!=parseInt(y.val())&&(y.val(y.val()-1),D(),A()):e.hasClass("pagination__next")?e.prev().hasClass("active")||(y.val(parseInt(y.val())+1),D(),A()):a!=parseInt(y.val())&&(y.val(a),D(),A()),!1}),$(document).on("click",".category__filtered-remove",function(){var e=$(this),a=e.parent(),t=a.data("id"),i=a.data("name");return y.val("1"),M(t,i),!1}),c.on({click:function(){return R(),!1}}),w.on({click:function(){return R(),!1}}),o.find("input[type=checkbox]").on({change:function(){var e=$(this),a=e.next(),t=a.clone().children().remove().end().text(),i=e.attr("name"),n=e.data("id"),s=e.parents(".category__filters-item").find("span")[0].innerText,r=o.find("input[name="+i+"]:checked").length;g=e.prop("checked"),x.width()>=1024&&(D(),R()),console.log(r),E(i,n,g,r),y.val("1"),j(t,n,i,s),A()}}),b.on({change:function(){y.val("1"),D(),A()}}),C.on({change:function(){y.val("1"),D(),A()}}),u.on({submit:function(){return x.width()>=1024&&D(),u.find("select").each(function(){var e=$(this),a=e.attr("name"),t=e.val();E(a,t,"select",""),O(a)}),u.find("input[type=radio]:checked").each(function(){var e=$(this),a=e.attr("name"),t=e.data("id");E(a,t,"radio",""),O(a)}),y.val("1"),A(),!1}})}),j=function(e,a,t,i){g?l.append("<li data-name="+t+' data-id="'+a+'">'+i+": "+e+' <a href="#" class="category__filtered-remove"></a></li>'):l.find('li[data-id="'+a+'"]').remove(),f=l.find("li").length,f>0?(d.removeClass("hidden"),p.find("span").html("("+f+")"),v.find("span").html("("+f+")"),p.addClass("selected"),h.removeClass("hidden")):(d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),h.addClass("hidden"))},D=function(){_=$('<div class="loading"></div>'),$(".category__content").append(_),_.css({top:$(".category__wrap").position().top-20})},H=function(){T&&(clearTimeout(T),T=null),T=setTimeout(function(){$(".loading").addClass("hidden")},300),T=setTimeout(function(){$(".loading").remove()},620)},F=function(){d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),l.find("li").remove(),o.find("input[type=checkbox]").prop("checked",!1),m.val(""),D(),A()},M=function(e,a){o.find('input[data-id="'+e+'"]').prop("checked",!1),g=!1,j("",e,"",""),D(),E(a,e,g,""),A()},O=function(e){o.find('input[name="'+e+'"]').each(function(){var e=$(this),a=e.data("id");o.find('input[data-id="'+a+'"]').prop("checked",!1),g=!1,j("",a,"","")})},R=function(){s.hasClass("opened")?(s.removeClass("opened"),r.removeClass("opened"),$(".site__content").css({"z-index":""})):(s.addClass("opened"),r.addClass("opened"),x.width()<1024&&$(".site__content").css({"z-index":100}))},S=function(e){var a=parseInt(e.settings.pagesAll),t=parseInt(e.settings.currentPage);if(y.val(t),1!=a&&0!=a){var i='<div class="pagination">';if(i+='<a href="#" class="pagination__prev"></a>',a<=7)for(var n=1;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else{if(t<=3||t>a-3){for(var n=1;n<=3;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>";for(var n=a-2;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>"}if(t>3&&t<=a-3){if(i+='<a href="#">1</a>',i+="<span>...</span>",t-1>3&&t+1<=a-3)for(var n=t-1;n<=t+1;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t-1<=3)for(var n=t;n<=t+2;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t+1>=a-3)for(var n=t-2;n<=t;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}if(8==a&&t>3&&t<=a-3){i+='<a href="#">1</a>',i+="<span>...</span>";for(var n=4;n<=5;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}}i+='<a href="#" class="pagination__next"></a>',i+="</div>",$(".pagination-wrap").html(i)}else $(".pagination").length&&$(".pagination").remove()},q=function(e){var a=e.products,t='<div class="products-subcategory">',i=[];if(void 0!=P.price)for(var n=0;n<=P.price.length-1;n++){var s=parseFloat(P.price[n].replace("$","").replace(",",""));i.push(s)}if(i.length){var r;if(0==startingPrice)r=Math.min.apply(null,i);else for(var n=0;n<=i.length-1;n++)if(i[n]>=startingPrice){r=i[n];break}}$.each(a,function(){var e,a=this,n=a.price[0],s=a.oldPrice[0];if(i.length)for(var c=0;c<=a.price.length-1;c++)if(e=parseFloat(a.price[c].replace("$","").replace(",","")),e>=r){n=a.price[c],s=a.oldPrice[c];break}if(t+='<div class="products-subcategory__item">',void 0!=a.featured&&""!=a.featured&&(t+='<span class="site__featured">'+a.featured+"</span>"),t+='<div class="products-subcategory__head">                                            <div>                                                <a href="'+a.urlDetails+'" class="products-subcategory__pic" style="background-image: url('+a.picture+')"></a>                                            </div>                                            <div>                                                <h2 class="products-subcategory__title"><a href="'+a.urlDetails+'">'+a.title+"</a></h2>",void 0!=a.rate){t+='<div class="rate">';for(var c=0;c<=a.rate.starsCount-1;c++)t+='<img src="'+k+'img/star.png" width="60" height="50" alt="">&nbsp;';t+='<a href="'+a.rate.urlReviews+'" class="rate__reviews">'+a.rate.reviewsCount+"</a>                                                </div>"}if(t+='</div>                                        </div>                                        <div class="products-subcategory__content">',void 0!=a.content.description&&""!=a.content.description){t+='<div>                                        <ul class="products-subcategory__description">';for(var c=0;c<=a.content.description.length-1;c++)t+="<li>"+a.content.description[c]+"</li>";t+="</ul>                                    </div>"}if(t+='<div>                                            <div class="products-subcategory__items">',void 0!=a.content.specification&&""!=a.content.specification){t+='<div>                    <div class="products-subcategory__specification">                                                        <div class="products-subcategory__specification-head">';for(var c=0;c<=a.content.specification.head.length-1;c++)t+='<div style="width:'+100/a.content.specification.head.length+'%">'+a.content.specification.head[c]+"</div>";t+='</div>                                                        <div class="products-subcategory__specification-content">';for(var c=0;c<=a.content.specification.content.length-1;c++)t+='<div style="width:'+100/a.content.specification.head.length+'%">'+a.content.specification.content[c]+"</div>";t+="</div>                                                    </div>                                                </div>"}t+=void 0!=s&&""!=s?'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        <del>'+s+"</del> "+n+"                                                    </div>":'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        '+n+"                                                    </div>",t+='<a href="'+a.urlDetails+'" class="btn btn_3">see details</a>                                                </div>                                            </div>                                        </div>                                    </div>                                    </div>'}),t+="</div>",$(".category__wrap").html(t),H()},A=function(){i.abort(),i=$.ajax({url:t,data:{action:"get_filtered_products",value:m.val(),pageSorting:b.val(),dateSorting:C.val(),currentPage:y.val(),idCategory:a.data("id-category"),additionalParameters:u.serialize()},dataType:"json",type:"get",success:function(e){q(e),S(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}})},E=function(e,a,t,i){if("radio"==t)P[e]=[a];else if("select"==t)0!=a?P[e]=[a]:delete P[e];else if(t)if(P.hasOwnProperty(e))if(1==i)P[e]=[a];else for(var n in P)n==e&&P[n].push(a);else P[e]=[a];else{for(var n in P)if(n==e){var s=P[n].indexOf(a);s!=-1&&P[n].splice(s,1)}0==P[e].length&&delete P[e]}var r="",c="",o="",d=[];for(var l in P){I=[];var f=P[l];I.push(f);for(var s=0;s<=I.length-1;s++)c=I.join(",");o=l+"="+c,d.push(o),r=d.join("&")}m.val(r)},L=function(){z(),a.hasClass("category_sub")&&(D(),A())};L()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var t=e,i=t.find("input[type=search]"),a=new XMLHttpRequest,s=t.data("path"),n=0,o=0,r=i.val(),c=t.find(".search__result"),l=function(){i.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==c.find(".search__found li").filter(".active").length&&t.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var i=$(this).val();i.length>=t.data("symbols")?u($(this),i.length):""==$(this).val()&&(c.removeClass("visible"),n=0)}},keydown:function(e){if(c.find(".search__found").html(""),c.find(".top-products").html(""),n=0,$(window).width()>=1024)switch(e.keyCode){case 13:return 0==c.find(".search__found li").filter(".active").length?window.location.href=t.data("action"):window.location.href=c.find(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),n=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),n==o&&(n=0))}}}),$("html").click(function(){c.removeClass("visible"),n=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),t=e.find("a").text();i.val(t),c.removeClass("visible"),n=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){c.find(".search__found li").removeClass("active"),t.parents().hasClass("site__footer")?(38==e&&n<o?n++:40==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(-1-(n-1)).addClass("active"),i.val(c.find(".search__found li").eq(-1-(n-1)).find("a").text())):i.val(r)):(40==e&&n<o?n++:38==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(n-1).addClass("active"),i.val(c.find(".search__found li").eq(n-1).find("a").text())):i.val(r))},f=function(e){var e=e,t=e.categories,i=0!=t.length,a=e.products,s=0!=a.length,n=[],r=[],l=!0;if(s){var d='<div class="top-products__wrap">';$.each(a,function(){var e=this;d+='<div>                                                <div class="top-products__item">                                                    <div class="top-products__pic" style="background-image: url('+e.src+')">                                                    </div>                                                    <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                    <h3 class="top-products__item-title">'+e.name+'</h3>                                                    <a href="'+e.href+'" class="top-products__btn">view</a>                                                </div>                                            </div>',i||n.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),d+="</div>",c.find("div").eq(1).find(".top-products").html('<h2 class="top-products__title">Top Products</h2>'+d);var f='<ul class="search__found">';if(i)$.each(t,function(){var e=this.subcategories,t=this.urlSubcategories,i="";if(void 0!=e){for(var a=0;a<=e.length-1;a++)i+='<li class="search__found-sub"><a href="'+t[a]+'">'+e[a]+"</a></li>";i+=""}f+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+i});else{for(var u=0;u<=n.length-1;u++)if(l&&(r.push(n[u]),l=!1),r[r.length-1][0]!=n[u][0])r.push(n[u]);else for(var h=0;h<=n[u].length-1;h++)for(var v=0;v<=n[u][2].length-1;v++)r[r.length-1][2].indexOf(n[u][2][v])==-1&&r[r.length-1][2].push(n[u][2][v]);for(var _=0,u=0;u<=r.length-1;u++){for(var h=0;h<=r[u].length-1;h++){for(var p="",v=0;v<=r[u][2].length-1;v++)p+='<li class="search__found-sub"><a href="'+r[u][3][v]+'">'+r[u][2][v]+"</a></li>",_++;p+=""}f+='<li><a href="'+r[u][1]+'">'+r[u][0]+"</a></li>"+p}}f+="</ul>",c.find("div:first").html(f),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")}else c.removeClass("visible")},u=function(e,t){return a.abort(),a=$.ajax({url:s,data:{value:e.val(),action:"main_search"},dataType:"json",type:"get",success:function(e){0!=Object.keys(e).length&&f(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}}),!1},h=function(){l()};h()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
