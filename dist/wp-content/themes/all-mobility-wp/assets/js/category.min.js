!function(){var e=!0;$(function(){$(".site__menu").each(function(){new n($(this)),new i($(this))}),$(".not-found").each(function(){new t($(this))}),$(".confirmation").each(function(){new t($(this))}),$("#wpsl-stores").each(function(){$(this).perfectScrollbar({wheelPropagation:!0})}),$(".checkout").each(function(){new o($(this))})});var n=function(e){var n=e,i=n.find(".site__menu-item"),t=n.find(".site__menu-icon"),o=$(window),s=null,d=o.width(),a=function(){o.on({resize:function(){d>o.width()&&(d=o.width(),o.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),t.on({click:function(){var e=jQuery(this),n=e.parents("li"),i=n.find(".site__menu-sub");return o.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),i.slideUp()):(n.addClass("opened"),i.slideDown())),!1}}),i.on({mouseenter:function(){if(o.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");o.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(o.width()>=1024){$(".featured-product__loading").addClass("visible"),s&&(clearTimeout(s),s=null);var e=$(this),i=e.data("product");s=setTimeout(function(){n.find(".featured-product").find(".featured-product__title").text(i.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",i.src),n.find(".featured-product").find(".btn").attr("href",i.href),n.find(".featured-product").find(".featured-product__price span").text(i.price),i.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),i.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(i.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),s=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){o.width()>=1024&&$(this).removeClass("opened")})},r=function(){a()};r()},i=function(n){var i,t,o=this,s=n,d=$(window),a=!1,r=$(".site__header"),c=$(".site__hidden-items"),u=r.innerHeight(),f=$(".site__header-btn"),l=$(".site__hidden-close"),h=$(".search"),p=$(".search-btn"),_=$(".search__cancel"),m=$(".site__hidden-btn"),v=$(".site"),C=$("html"),w=($(".site__content"),function(){$(document).on("click",".search",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click","body",function(){H()}),f.on({click:function(){k($(this))}}),l.on({click:function(){return y(),!1}}),p.on({click:function(){return T($(this)),!1}}),_.on({click:function(){return H(),!1}}),d.on({scroll:function(e){g(),a=d.scrollTop()>=u,0==d.scrollTop()&&r.removeClass("site__header_hidden")},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;b(i)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;b(i)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>i?b(-1):n<i&&b(1),i=n},keydown:function(e){switch(e.which){case 32:b(1);break;case 33:b(-1);break;case 34:b(1);break;case 35:b(1);break;case 36:b(-1);break;case 38:b(-1);break;case 40:b(1);break;default:return}},resize:function(){d.width()>=1024&&(v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""})},10))}})}),b=function(n){n>0&&!r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&r.addClass("site__header_hidden"),n<0&&r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&e&&r.removeClass("site__header_hidden")},g=function(){d.scrollTop()>u+150?r.addClass("fixed"):r.removeClass("fixed")},k=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),c.removeClass("opened")):(n.addClass("opened"),c.addClass("opened")),t=d.scrollTop(),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":"scroll"}),setTimeout(function(){v.css({height:"100%"})},10)},300)},T=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")):(n.addClass("opened"),h.addClass("active"),m.addClass("hidden"))},y=function(){f.removeClass("opened"),c.removeClass("opened"),h.find("input").focusout(),v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""}),d.scrollTop(t)},10)},H=function(){p.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")},x=function(){s[0].obj=o,w(),g()};x()},t=function(e){var n=e,i=$(window),t=i.width(),o=function(){i.on({resize:function(){t!=i.width()&&(t=i.width(),s())}})},s=function(){n.css({minHeight:""}),n.css({minHeight:i.height()-$(".site__header").innerHeight()-$(".site__footer").innerHeight()-$(".breadcrumbs").innerHeight()})},d=function(){o(),s()};d()},o=function(e){var n=e,i=n.find(".total-order"),t=function(){},o=function(){n.css({minHeight:i.innerHeight()})},s=function(){t(),o()};s()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return v($(this).attr("data-popup")),!1}}),u.find(">div").on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},v=function(o){m(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
"use strict";!function(){$(function(){$.each($(".product__slider"),function(){new i($(this))}),$.each($(".featured-products"),function(){new s($(this))})});var i=function(i){var s=this,o=i,e=function(){o[0].obj=s,n()},n=function(){$(".slider-for").slick({slidesToShow:1,slidesPerRow:1,slidesToScroll:1,arrows:!1,infinite:!0,asNavFor:".slider-nav"}),$(".slider-nav").slick({slidesToShow:4,slidesPerRow:4,asNavFor:".slider-for",dots:!1,arrows:!1,infinite:!0,centerMode:!1,focusOnSelect:!0,responsive:[{breakpoint:1360,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:1024,settings:{slidesToShow:4,slidesToScroll:4}},{breakpoint:412,settings:{slidesToShow:3,slidesToScroll:3}}]})};e()},s=function(i){var s,o,e=this,n=i,t=$(window),r=n.find(".swiper-pagination"),d=n.find(".swiper-button-prev"),l=n.find(".swiper-button-next"),c=!1,u=function(){n[0].obj=e,a(),t.width()<=768?o=!1:(o=!0,p())},a=function(){t.on({resize:function(){t.width()<=768?o&&(o=!1,f()):o||(o=!0,p())}})},f=function(){s.slick("unslick")},p=function(){w(),s=$(".featured-products__wrapper").slick({dots:!0,slidesToShow:5,slidesToScroll:1,autoplay:!0,autoplaySpeed:5e3,prevArrow:d,nextArrow:l,appendDots:r,responsive:[{breakpoint:1440,settings:{slidesToShow:4}}]})},w=function(){t.width()>=1024?n.find(".featured-products__slide").length>=4&&(c=!0):t.width()>=1425&&n.find(".featured-products__slide").length>=5&&(c=!0),c||n.find(".featured-products__controls").css({display:"none"})};u()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),$(document).on("change","select",function(){$(this).prev().text($(this).find("option:selected").text())}),1!=s||l||p.on({click:function(e){e.stopPropagation(),u?v():y()}}),f.on({click:function(){u&&v()}}),r.on({scroll:function(){u&&v()}})},g=function(){!s||l?x():1==s&&_()},_=function(){p.addClass("websters-select_custom")},x=function(){p.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".category").each(function(){new e($(this))})});var e=function(e){var a=e,t=$("body").data("action"),i=new XMLHttpRequest,n=a.find(".category__filters-item span"),s=a.find(".category__filters-title"),r=a.find(".category__filters-items"),c=(r.find("form"),a.find(".category__filtered-close")),o=a.find(".category__filters-list"),d=a.find(".category__filtered"),l=a.find(".category__filtered-list"),f=0,p=a.find(".category__filters-title"),v=a.find(".category__filters-title-inner"),h=a.find(".category__filtered .btn, .category__filters-clear"),u=(a.find(".category__filtered-remove"),a.find(".category__find-parameters")),g=!1,_=$('<div class="loading"></div>'),m=a.find("input[type=hidden].value-check"),y=a.find("input[type=hidden].current-page"),b=a.find("#items-page"),C=a.find("#sorting-date"),k=a.find(".category__wrap").data("rate-path"),w=a.find(".category__filters-apply"),x=$(window),P={},T=null,I=[],z=(a.find("input[name=_price]"),function(){x.on({resize:function(){n.each(function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")&&t.css({"min-height":t.find(">div").innerHeight()})}),x.width()>=1024&&$(".site__content").css({"z-index":""})},load:function(){}}),n.on({click:function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")?(a.removeClass("opened"),t.css({"min-height":0,height:0})):(a.addClass("opened"),t.css({"min-height":t.find(">div").innerHeight()}),setTimeout(function(){t.css({height:"auto"})},310))}}),s.on({click:function(){R()}}),h.on({click:function(){return y.val("1"),F(),!1}}),$(document).on("click",".pagination a",function(){var e=$(this),a=parseInt(e.text());return e.hasClass("pagination__prev")?1!=parseInt(y.val())&&(y.val(y.val()-1),D(),A()):e.hasClass("pagination__next")?e.prev().hasClass("active")||(y.val(parseInt(y.val())+1),D(),A()):a!=parseInt(y.val())&&(y.val(a),D(),A()),!1}),$(document).on("click",".category__filtered-remove",function(){var e=$(this),a=e.parent(),t=a.data("id"),i=a.data("name");return y.val("1"),M(t,i),!1}),c.on({click:function(){return R(),!1}}),w.on({click:function(){return R(),!1}}),o.find("input[type=checkbox]").on({change:function(){var e=$(this),a=e.next(),t=a.clone().children().remove().end().text(),i=e.attr("name"),n=e.data("id"),s=e.parents(".category__filters-item").find("span")[0].innerText,r=o.find("input[name="+i+"]:checked").length;g=e.prop("checked"),x.width()>=1024&&(D(),R()),console.log(r),E(i,n,g,r),y.val("1"),j(t,n,i,s),A()}}),b.on({change:function(){y.val("1"),D(),A()}}),C.on({change:function(){y.val("1"),D(),A()}}),u.on({submit:function(){return x.width()>=1024&&D(),u.find("select").each(function(){var e=$(this),a=e.attr("name"),t=e.val();E(a,t,"select",""),O(a)}),u.find("input[type=radio]:checked").each(function(){var e=$(this),a=e.attr("name"),t=e.data("id");E(a,t,"radio",""),O(a)}),y.val("1"),A(),!1}})}),j=function(e,a,t,i){g?l.append("<li data-name="+t+' data-id="'+a+'">'+i+": "+e+' <a href="#" class="category__filtered-remove"></a></li>'):l.find('li[data-id="'+a+'"]').remove(),f=l.find("li").length,f>0?(d.removeClass("hidden"),p.find("span").html("("+f+")"),v.find("span").html("("+f+")"),p.addClass("selected"),h.removeClass("hidden")):(d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),h.addClass("hidden"))},D=function(){_=$('<div class="loading"></div>'),$(".category__content").append(_),_.css({top:$(".category__wrap").position().top-20})},H=function(){T&&(clearTimeout(T),T=null),T=setTimeout(function(){$(".loading").addClass("hidden")},300),T=setTimeout(function(){$(".loading").remove()},620)},F=function(){d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),l.find("li").remove(),o.find("input[type=checkbox]").prop("checked",!1),m.val(""),D(),A()},M=function(e,a){o.find('input[data-id="'+e+'"]').prop("checked",!1),g=!1,j("",e,"",""),D(),E(a,e,g,""),A()},O=function(e){o.find('input[name="'+e+'"]').each(function(){var e=$(this),a=e.data("id");o.find('input[data-id="'+a+'"]').prop("checked",!1),g=!1,j("",a,"","")})},R=function(){s.hasClass("opened")?(s.removeClass("opened"),r.removeClass("opened"),$(".site__content").css({"z-index":""})):(s.addClass("opened"),r.addClass("opened"),x.width()<1024&&$(".site__content").css({"z-index":100}))},S=function(e){var a=parseInt(e.settings.pagesAll),t=parseInt(e.settings.currentPage);if(y.val(t),1!=a&&0!=a){var i='<div class="pagination">';if(i+='<a href="#" class="pagination__prev"></a>',a<=7)for(var n=1;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else{if(t<=3||t>a-3){for(var n=1;n<=3;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>";for(var n=a-2;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>"}if(t>3&&t<=a-3){if(i+='<a href="#">1</a>',i+="<span>...</span>",t-1>3&&t+1<=a-3)for(var n=t-1;n<=t+1;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t-1<=3)for(var n=t;n<=t+2;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t+1>=a-3)for(var n=t-2;n<=t;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}if(8==a&&t>3&&t<=a-3){i+='<a href="#">1</a>',i+="<span>...</span>";for(var n=4;n<=5;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}}i+='<a href="#" class="pagination__next"></a>',i+="</div>",$(".pagination-wrap").html(i)}else $(".pagination").length&&$(".pagination").remove()},q=function(e){var a=e.products,t='<div class="products-subcategory">',i=[];if(void 0!=P.price)for(var n=0;n<=P.price.length-1;n++){var s=parseFloat(P.price[n].replace("$","").replace(",",""));i.push(s)}if(i.length){var r;if(0==startingPrice)r=Math.min.apply(null,i);else for(var n=0;n<=i.length-1;n++)if(i[n]>=startingPrice){r=i[n];break}}$.each(a,function(){var e,a=this,n=a.price[0],s=a.oldPrice[0];if(i.length)for(var c=0;c<=a.price.length-1;c++)if(e=parseFloat(a.price[c].replace("$","").replace(",","")),e>=r){n=a.price[c],s=a.oldPrice[c];break}if(t+='<div class="products-subcategory__item">',void 0!=a.featured&&""!=a.featured&&(t+='<span class="site__featured">'+a.featured+"</span>"),t+='<div class="products-subcategory__head">                                            <div>                                                <a href="'+a.urlDetails+'" class="products-subcategory__pic" style="background-image: url('+a.picture+')"></a>                                            </div>                                            <div>                                                <h2 class="products-subcategory__title"><a href="'+a.urlDetails+'">'+a.title+"</a></h2>",void 0!=a.rate){t+='<div class="rate">';for(var c=0;c<=a.rate.starsCount-1;c++)t+='<img src="'+k+'img/star.png" width="60" height="50" alt="">&nbsp;';t+='<a href="'+a.rate.urlReviews+'" class="rate__reviews">'+a.rate.reviewsCount+"</a>                                                </div>"}if(t+='</div>                                        </div>                                        <div class="products-subcategory__content">',void 0!=a.content.description&&""!=a.content.description){t+='<div>                                        <ul class="products-subcategory__description">';for(var c=0;c<=a.content.description.length-1;c++)t+="<li>"+a.content.description[c]+"</li>";t+="</ul>                                    </div>"}if(t+='<div>                                            <div class="products-subcategory__items">',void 0!=a.content.specification&&""!=a.content.specification){t+='<div>                    <div class="products-subcategory__specification">                                                        <div class="products-subcategory__specification-head">';for(var c=0;c<=a.content.specification.head.length-1;c++)t+='<div style="width:'+100/a.content.specification.head.length+'%">'+a.content.specification.head[c]+"</div>";t+='</div>                                                        <div class="products-subcategory__specification-content">';for(var c=0;c<=a.content.specification.content.length-1;c++)t+='<div style="width:'+100/a.content.specification.head.length+'%">'+a.content.specification.content[c]+"</div>";t+="</div>                                                    </div>                                                </div>"}t+=void 0!=s&&""!=s?'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        <del>'+s+"</del> "+n+"                                                    </div>":'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        '+n+"                                                    </div>",t+='<a href="'+a.urlDetails+'" class="btn btn_3">see details</a>                                                </div>                                            </div>                                        </div>                                    </div>                                    </div>'}),t+="</div>",$(".category__wrap").html(t),H()},A=function(){i.abort(),i=$.ajax({url:t,data:{action:"get_filtered_products",value:m.val(),pageSorting:b.val(),dateSorting:C.val(),currentPage:y.val(),idCategory:a.data("id-category"),additionalParameters:u.serialize()},dataType:"json",type:"get",success:function(e){q(e),S(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}})},E=function(e,a,t,i){if("radio"==t)P[e]=[a];else if("select"==t)0!=a?P[e]=[a]:delete P[e];else if(t)if(P.hasOwnProperty(e))if(1==i)P[e]=[a];else for(var n in P)n==e&&P[n].push(a);else P[e]=[a];else{for(var n in P)if(n==e){var s=P[n].indexOf(a);s!=-1&&P[n].splice(s,1)}0==P[e].length&&delete P[e]}var r="",c="",o="",d=[];for(var l in P){I=[];var f=P[l];I.push(f);for(var s=0;s<=I.length-1;s++)c=I.join(",");o=l+"="+c,d.push(o),r=d.join("&")}m.val(r)},L=function(){z(),a.hasClass("category_sub")&&(D(),A())};L()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var t=e,i=t.find("input[type=search]"),a=new XMLHttpRequest,s=t.data("path"),n=0,o=0,r=i.val(),c=t.find(".search__result"),l=function(){i.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==c.find(".search__found li").filter(".active").length&&t.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var i=$(this).val();i.length>=t.data("symbols")?u($(this),i.length):""==$(this).val()&&(c.removeClass("visible"),n=0)}},keydown:function(e){if(c.find(".search__found").html(""),c.find(".top-products").html(""),n=0,$(window).width()>=1024)switch(e.keyCode){case 13:return 0==c.find(".search__found li").filter(".active").length?window.location.href=t.data("action"):window.location.href=c.find(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),n=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),n==o&&(n=0))}}}),$("html").click(function(){c.removeClass("visible"),n=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),t=e.find("a").text();i.val(t),c.removeClass("visible"),n=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){c.find(".search__found li").removeClass("active"),t.parents().hasClass("site__footer")?(38==e&&n<o?n++:40==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(-1-(n-1)).addClass("active"),i.val(c.find(".search__found li").eq(-1-(n-1)).find("a").text())):i.val(r)):(40==e&&n<o?n++:38==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(n-1).addClass("active"),i.val(c.find(".search__found li").eq(n-1).find("a").text())):i.val(r))},f=function(e){var e=e,t=e.categories,i=0!=t.length,a=e.products,s=0!=a.length,n=[],r=[],l=!0;if(s){var d='<div class="top-products__wrap">';$.each(a,function(){var e=this;d+='<div>                                                <div class="top-products__item">                                                    <div class="top-products__pic" style="background-image: url('+e.src+')">                                                    </div>                                                    <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                    <h3 class="top-products__item-title">'+e.name+'</h3>                                                    <a href="'+e.href+'" class="top-products__btn">view</a>                                                </div>                                            </div>',i||n.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),d+="</div>",c.find("div").eq(1).find(".top-products").html('<h2 class="top-products__title">Top Products</h2>'+d);var f='<ul class="search__found">';if(i)$.each(t,function(){var e=this.subcategories,t=this.urlSubcategories,i="";if(void 0!=e){for(var a=0;a<=e.length-1;a++)i+='<li class="search__found-sub"><a href="'+t[a]+'">'+e[a]+"</a></li>";i+=""}f+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+i});else{for(var u=0;u<=n.length-1;u++)if(l&&(r.push(n[u]),l=!1),r[r.length-1][0]!=n[u][0])r.push(n[u]);else for(var h=0;h<=n[u].length-1;h++)for(var v=0;v<=n[u][2].length-1;v++)r[r.length-1][2].indexOf(n[u][2][v])==-1&&r[r.length-1][2].push(n[u][2][v]);for(var _=0,u=0;u<=r.length-1;u++){for(var h=0;h<=r[u].length-1;h++){for(var p="",v=0;v<=r[u][2].length-1;v++)p+='<li class="search__found-sub"><a href="'+r[u][3][v]+'">'+r[u][2][v]+"</a></li>",_++;p+=""}f+='<li><a href="'+r[u][1]+'">'+r[u][0]+"</a></li>"+p}}f+="</ul>",c.find("div:first").html(f),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")}else c.removeClass("visible")},u=function(e,t){return a.abort(),a=$.ajax({url:s,data:{value:e.val(),action:"main_search"},dataType:"json",type:"get",success:function(e){0!=Object.keys(e).length&&f(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}}),!1},h=function(){l()};h()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnBvcHVwLmpzIiwianF1ZXJ5LnByb2R1Y3Qtc2xpZGVyLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyIsImpxdWVyeS5maWx0ZXJzLmpzIiwianF1ZXJ5LnNlYXJjaC5qcyJdLCJuYW1lcyI6WyJnbG9iYWxTY3JvbGxGbGFnIiwiJCIsImVhY2giLCJTdWJNZW51IiwidGhpcyIsIk1lbnUiLCJGdWxsSGVpZ2h0IiwicGVyZmVjdFNjcm9sbGJhciIsIndoZWVsUHJvcGFnYXRpb24iLCJDaGVja291dEhlaWdodCIsIm9iaiIsIl9vYmoiLCJfaXRlbXMiLCJmaW5kIiwiX2Fycm93IiwiX3dpbmRvdyIsIndpbmRvdyIsInRpbWVvdXQiLCJfc3RhcnRXaW5XaWR0aCIsIndpZHRoIiwiX2FkZEV2ZW50cyIsIm9uIiwicmVzaXplIiwicmVtb3ZlQ2xhc3MiLCJqUXVlcnkiLCJjdXJJdGVtIiwicGFyZW50IiwiaGFzQ2xhc3MiLCJhZGRDbGFzcyIsImNsaWNrIiwicGFyZW50cyIsInN1Yk1lbnUiLCJzbGlkZVVwIiwic2xpZGVEb3duIiwibW91c2VlbnRlciIsImlubmVyV2lkdGgiLCJvZmZzZXQiLCJsZWZ0IiwiY3NzIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJwb3NpdGlvbiIsImNsZWFyVGltZW91dCIsImRhdGEiLCJzZXRUaW1lb3V0IiwidGV4dCIsIm5hbWUiLCJhdHRyIiwic3JjIiwiaHJlZiIsInByaWNlIiwib25TYWxlIiwib2xkUHJpY2UiLCJfaW5pdCIsIl9sYXN0UG9zIiwic2l0ZVNjcm9sbFRvcCIsIl9zZWxmIiwiX21lbnUiLCJfYWN0aW9uIiwiX2hlYWRlciIsIl9oaWRkZW5CbG9ja01lbnUiLCJfaGVhZGVySGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJfc2hvd0J0biIsIl9jbG9zZUJ0biIsIl9zZWFyY2giLCJfb3BlblNlYXJjaCIsIl9jbG9zZVNlYXJjaCIsIl9nZXRGcmVlIiwiX3NpdGUiLCJfZG9tIiwiZG9jdW1lbnQiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsIl9jbG9zZVNlYXJjaEJveCIsIl9vcGVuTWVudSIsIl9jbG9zZU1lbnUiLCJfb3BlblNlYXJjaEJveCIsInNjcm9sbCIsImUiLCJfZml4ZWRIZWFkZXIiLCJzY3JvbGxUb3AiLCJET01Nb3VzZVNjcm9sbCIsImRlbHRhIiwib3JpZ2luYWxFdmVudCIsImRldGFpbCIsImRpcmVjdGlvbiIsIl9jaGVja1Njcm9sbCIsIm1vdXNld2hlZWwiLCJ3aGVlbERlbHRhIiwidG91Y2htb3ZlIiwiY3VycmVudFBvcyIsInRvdWNoZXMiLCJjbGllbnRZIiwia2V5ZG93biIsIndoaWNoIiwiaGVpZ2h0Iiwib3ZlcmZsb3cteSIsImVsZW0iLCJmb2N1c291dCIsIl9nbG9iYWxXaW5XaWR0aCIsIl9zZXRIZWlnaHQiLCJtaW5IZWlnaHQiLCJfdG90YWxPcmRlciIsIlBvcHVwIiwiX3BvcHVwUGFkZGluZyIsIl9idG5TaG93IiwiX2J0bkNsb3NlIiwiX3dyYXAiLCJfY29udGVudHMiLCJfc2Nyb2xsQ29udGVpbmVyIiwiX3RpbWVyIiwiX2NlbnRlcldyYXAiLCJ0b3AiLCJfZ2V0U2Nyb2xsV2lkdGgiLCJzY3JvbGxCYXJXaWR0aCIsInNjcm9sbERpdiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJvZmZzZXRXaWR0aCIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJfaGlkZSIsIm92ZXJmbG93WSIsInBhZGRpbmdSaWdodCIsIl9vbkV2ZW50cyIsIl9zaG93IiwiX3NldFBvcHVwQ29udGVudCIsImN1ckNvbnRlbnQiLCJmaWx0ZXIiLCJkaXNwbGF5IiwiUHJvZHVjdFNsaWRlciIsIkZlYXR1cmVkUHJvZHVjdHNTbGlkZXIiLCJfY29uc3RydWN0b3IiLCJfaW5pdFNsaWRlciIsInNsaWNrIiwic2xpZGVzVG9TaG93Iiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TY3JvbGwiLCJhcnJvd3MiLCJpbmZpbml0ZSIsImFzTmF2Rm9yIiwiZG90cyIsImNlbnRlck1vZGUiLCJmb2N1c09uU2VsZWN0IiwicmVzcG9uc2l2ZSIsImJyZWFrcG9pbnQiLCJzZXR0aW5ncyIsIl9zbGlkZXIiLCJfZmxhZyIsIl9wYWdpbmF0aW9uIiwiX3ByZXYiLCJfbmV4dCIsIl9sb29wIiwiX2Rlc3Ryb3kiLCJfYWRkU29tZVBhcmFtcyIsImF1dG9wbGF5IiwiYXV0b3BsYXlTcGVlZCIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsImFwcGVuZERvdHMiLCJsZW5ndGgiLCJXZWJzdGVyc1NlbGVjdCIsIm9wdGlvblR5cGUiLCJzaG93VHlwZSIsInBhcmFtcyIsIl9wb3B1cCIsIl9zY3JvbGwiLCJfb3B0aW9uVHlwZSIsIl9zaG93VHlwZSIsIl92aXNpYmxlIiwidmlzaWJsZSIsIl9kZXZpY2UiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX3RleHQiLCJfYm9keSIsIl9vcGVuZWQiLCJfYWRkV3JhcCIsImN1clRleHQiLCJvcGFjaXR5Iiwid3JhcCIsImFwcGVuZCIsImJlZm9yZSIsImVxIiwiX2hpZGVQb3B1cCIsInN0b3AiLCJyZW1vdmUiLCJmYWRlT3V0IiwiX3NlbGVjdFZpZXdUeXBlIiwicHJldiIsIl9zaG93UG9wdXAiLCJfc2V0TW9iaWxlVmlldyIsIl9zZXRDdXN0b20xIiwic2VsZWN0cyIsImxpc3QiLCJtYXhIZWlnaHQiLCJjdXJJbmRleCIsImluZGV4IiwiaWQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJjaGVja09wZW5lZCIsImNsb3NlIiwiaSIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsImFuaW1hdGUiLCJ2YWwiLCJ0cmlnZ2VyIiwiRmlsdGVycyIsIl9wYXRoIiwiX3JlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIl9idG4iLCJfYnRuMiIsIl9maWx0ZXJzIiwiX2Nsb3NlRmlsdGVycyIsIl9maWx0ZXJJdGVtIiwiX2ZpbHRlcmVkIiwiX2ZpbHRlcmVkTGlzdCIsIl9jb3VudEZpbHRlcmVkIiwiX3RpdGxlIiwiX3RpdGxlSW5uZXIiLCJfY2xlYXJGaWx0ZXJzIiwiX2FkZGl0aW9uYWxQYXJhbWV0ZXJzIiwiX2dsb2JhbENoZWNrRmxhZyIsIl9sb2FkaW5nIiwiX2lucHV0SGlkZGVuIiwiX2lucHV0SGlkZGVuUGFnZSIsIl9zb3J0aW5nUGFnZSIsIl9zb3J0aW5nRGF0ZSIsIl9kYXRhUmF0ZVBhdGgiLCJfYXBwbHkiLCJfb2JqVmFsdWUiLCJfdGltZW91dCIsIl9hcnIiLCJuZXh0RmlsdGVycyIsIm5leHQiLCJtaW4taGVpZ2h0Iiwiei1pbmRleCIsImxvYWQiLCJfY2xvc2VGaWx0ZXIiLCJfY2xlYXJGaWx0ZXIiLCJ2YWx1ZSIsInBhcnNlSW50IiwiX2FkZExvYWRpbmciLCJfcmVxdWVzdENvbnRlbnQiLCJkYXRhSWQiLCJkYXRhTmFtZSIsIl9jbGVhclNpbmdsZUZpbHRlciIsImNoYW5nZSIsImxhYmVsIiwibGFiZWxUZXh0IiwiY2xvbmUiLCJjaGlsZHJlbiIsImVuZCIsImNhdGVnb3J5TmFtZSIsImlubmVyVGV4dCIsImNvdW50R3JvdXBDaGVjayIsInByb3AiLCJjb25zb2xlIiwibG9nIiwiX3dyaXRlSW5IaWRkZW4iLCJfYWRkaW5nRmlsdGVyZWRCeSIsInN1Ym1pdCIsIl9jbGVhckdyb3VwRmlsdGVycyIsIml0ZW1UZXh0IiwiaXRlbUlkIiwiaXRlbU5hbWUiLCJodG1sIiwiX2Nsb3NlTG9hZGluZyIsIl9jcmVhdGVQYWdpbmF0aW9uIiwicGFnZXMiLCJwYWdlc0FsbCIsImFjdGl2ZVBhZ2UiLCJjdXJyZW50UGFnZSIsInBhZ2luYXRpb25XcmFwIiwiX3Bhc3RlTmV3UHJvZHVjdHMiLCJuZXdEYXRhIiwicHJvZHVjdHMiLCJwcm9kdWN0c1dyYXAiLCJuZXdBcnJQcmljZVJhbmdlIiwidW5kZWZpbmVkIiwicHJpY2VJdGVtIiwicGFyc2VGbG9hdCIsInJlcGxhY2UiLCJwdXNoIiwicHJpY2VSYW5nZSIsInN0YXJ0aW5nUHJpY2UiLCJtaW4iLCJhcHBseSIsInByb2R1Y3QiLCJzYWxlUHJpY2UiLCJmZWF0dXJlZCIsInVybERldGFpbHMiLCJwaWN0dXJlIiwidGl0bGUiLCJyYXRlIiwic3RhcnNDb3VudCIsInVybFJldmlld3MiLCJyZXZpZXdzQ291bnQiLCJjb250ZW50IiwiZGVzY3JpcHRpb24iLCJzcGVjaWZpY2F0aW9uIiwiaGVhZCIsImFib3J0IiwiYWpheCIsInVybCIsImFjdGlvbiIsInBhZ2VTb3J0aW5nIiwiZGF0ZVNvcnRpbmciLCJpZENhdGVnb3J5IiwiYWRkaXRpb25hbFBhcmFtZXRlcnMiLCJzZXJpYWxpemUiLCJkYXRhVHlwZSIsInR5cGUiLCJzdWNjZXNzIiwibSIsImVycm9yIiwic3RhdHVzVGV4dCIsImNoZWNrRmxhZyIsImhhc093blByb3BlcnR5IiwiaW5kZXhPZiIsInNwbGljZSIsInN0ckZpbmlzaCIsInN0clZhbHVlcyIsInN0ckZ1bGwiLCJhcnJBbGwiLCJrZXkiLCJpdGVtIiwiam9pbiIsIlNlYXJjaCIsIl9pbnB1dCIsInN1Z2dlc3RTZWxlY3RlZCIsImNvdW50SXRlbXMiLCJ2YWx1ZUlucHV0IiwiX3Jlc3VsdCIsImtleXVwIiwiSSIsImtleUNvZGUiLCJfYWpheFJlcXVlc3QiLCJsb2NhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiX2tleUFjdGl2YXRlIiwibiIsIl9hZGREYXRhIiwiY2F0ZWdvcmllcyIsImNhdGVnb3JpZXNBdmFpbGFiaWxpdHkiLCJwcm9kdWN0c0F2YWlsYWJpbGl0eSIsImFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FyciIsInByb2R1Y3RzQ2F0ZWdvcmllc0FyciIsImZsYWciLCJtYWluQ2F0ZWdvcnkiLCJ1cmxNYWluQ2F0ZWdvcnkiLCJzdWJjYXRlZ29yaWVzIiwidXJsU3ViY2F0ZWdvcmllcyIsInJlc3VsdFN0ciIsInN1YmNhdGVnb3JpZXNXcmFwIiwidXJsQ2F0ZWdvcnkiLCJqIiwieiIsImNvdW50IiwiaW5wdXQiLCJtc2ciLCJPYmplY3QiLCJrZXlzIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVJLEdBQUlBLElBQW1CLENBRXZCQyxHQUFFLFdBRUVBLEVBQUUsZUFBZUMsS0FBSyxXQUVsQixHQUFJQyxHQUFTRixFQUFFRyxPQUNmLEdBQUlDLEdBQU1KLEVBQUVHLFNBSWhCSCxFQUFFLGNBQWNDLEtBQUssV0FFakIsR0FBSUksR0FBWUwsRUFBRUcsU0FJdEJILEVBQUUsaUJBQWlCQyxLQUFLLFdBRXBCLEdBQUlJLEdBQVlMLEVBQUVHLFNBSXRCSCxFQUFFLGdCQUFnQkMsS0FBSyxXQUVuQkQsRUFBRUcsTUFBTUcsa0JBQ0pDLGtCQUFrQixNQUsxQlAsRUFBRSxhQUFhQyxLQUFLLFdBRWhCLEdBQUlPLEdBQWdCUixFQUFFRyxVQU05QixJQUFJRCxHQUFVLFNBQVVPLEdBR3BCLEdBQUlDLEdBQU9ELEVBQ1BFLEVBQVNELEVBQUtFLEtBQUssb0JBQ25CQyxFQUFTSCxFQUFLRSxLQUFLLG9CQUNuQkUsRUFBVWQsRUFBRWUsUUFDWkMsRUFBVSxLQUNWQyxFQUFpQkgsRUFBUUksUUFJekJDLEVBQWEsV0FFVEwsRUFBUU0sSUFDSkMsT0FBUSxXQUVBSixFQUFpQkgsRUFBUUksVUFFekJELEVBQWlCSCxFQUFRSSxRQUV6QkosRUFBUUYsS0FBSyxXQUFXVSxZQUFZLGNBTWhEdEIsRUFBRSxRQUFRb0IsR0FBRyxRQUFTLG1CQUFvQixXQUV0QyxHQUFJRyxPQUFPUixRQUFRRyxRQUFVLElBQU8sQ0FFaEMsR0FBSU0sR0FBVUQsT0FBT3BCLE1BQ2pCc0IsRUFBU0QsRUFBUUMsT0FBTyxLQUV2QkEsR0FBT0MsU0FBUyxVQUVqQkQsRUFBT0gsWUFBWSxVQUluQkcsRUFBT0UsU0FBUyxVQU14QixPQUFPLElBR1hkLEVBQU9PLElBQ0hRLE1BQU8sV0FFSCxHQUFJSixHQUFVRCxPQUFPcEIsTUFDakJzQixFQUFTRCxFQUFRSyxRQUFRLE1BQ3pCQyxFQUFVTCxFQUFPYixLQUFLLGtCQWdCMUIsT0FkSUUsR0FBUUksUUFBVSxPQUNiTyxFQUFPQyxTQUFTLFdBRWpCRCxFQUFPSCxZQUFZLFVBQ25CUSxFQUFRQyxZQUlSTixFQUFPRSxTQUFTLFVBQ2hCRyxFQUFRRSxlQUtULEtBR2ZyQixFQUFPUyxJQUNIYSxXQUFZLFdBRVIsR0FBSW5CLEVBQVFJLFNBQVcsS0FBTyxDQUUxQixHQUFJTSxHQUFVeEIsRUFBRUcsS0FDSHFCLEdBQVFDLE9BQU8sS0FFNUIsSUFBSUQsRUFBUUUsU0FBUyx1QkFBeUIsQ0FFMUNGLEVBQVFHLFNBQVMsU0FFakIsSUFBSUcsR0FBVU4sRUFBUVosS0FBSyxrQkFFckJFLEdBQVFJLFNBQVlZLEVBQVFJLGFBQWVWLEVBQVFXLFNBQVNDLE1BQVcsRUFFakVaLEVBQVFXLFNBQVNDLEtBQU9aLEVBQVFVLGFBQWlCSixFQUFRSSxhQUFpQixFQUU5RUosRUFBUU8sS0FDSkQsS0FBTSxNQUNORSxvQkFBcUIsbUJBQ3JCQyxVQUFhLHFCQUtqQlQsRUFBUU8sS0FDSkQsS0FBTVosRUFBUWdCLFdBQVdKLEtBQU9OLEVBQVFJLGFBQWVWLEVBQVFVLGVBT3ZFSixFQUFRTyxLQUNKRCxLQUFNWixFQUFRZ0IsV0FBV0osWUFXakRwQyxFQUFFLGtCQUFrQm9CLElBQ2hCYSxXQUFZLFdBRVIsR0FBSW5CLEVBQVFJLFNBQVcsS0FBTyxDQUUxQmxCLEVBQUUsOEJBQThCMkIsU0FBUyxXQUVyQ1gsSUFFQXlCLGFBQWF6QixHQUNiQSxFQUFVLEtBSWQsSUFBSVEsR0FBVXhCLEVBQUVHLE1BRVp1QyxFQUFPbEIsRUFBUWtCLEtBQUssVUFJcEIxQixHQUFVMkIsV0FBWSxXQUVsQmpDLEVBQUtFLEtBQUsscUJBQXFCQSxLQUFLLDRCQUE0QmdDLEtBQUtGLEVBQUtHLE1BQzFFbkMsRUFBS0UsS0FBSyxxQkFBcUJBLEtBQUssOEJBQThCa0MsS0FBSyxNQUFPSixFQUFLSyxLQUNuRnJDLEVBQUtFLEtBQUsscUJBQXFCQSxLQUFLLFFBQVFrQyxLQUFLLE9BQVFKLEVBQUtNLE1BQzlEdEMsRUFBS0UsS0FBSyxxQkFBcUJBLEtBQUssaUNBQWlDZ0MsS0FBS0YsRUFBS08sT0FFM0VQLEVBQUtRLE9BQ0x4QyxFQUFLRSxLQUFLLHFCQUFxQkEsS0FBSyw2QkFBNkJlLFNBQVMsV0FFMUVqQixFQUFLRSxLQUFLLHFCQUFxQkEsS0FBSyw2QkFBNkJVLFlBQVksV0FHN0VvQixFQUFLUyxTQUNMekMsRUFBS0UsS0FBSyxxQkFBcUJBLEtBQUssZ0NBQWdDZ0MsS0FBS0YsRUFBS1MsVUFFOUV6QyxFQUFLRSxLQUFLLHFCQUFxQkEsS0FBSyxnQ0FBZ0NlLFNBQVMsV0FHbEYsS0FFSFgsRUFBVTJCLFdBQVksV0FFbEIzQyxFQUFFLDhCQUE4QnNCLFlBQVksWUFFN0MsU0FRbkJaLEVBQUtVLEdBQUksYUFBYyxXQUVmTixFQUFRSSxTQUFXLE1BRW5CbEIsRUFBRUcsTUFBTVMsS0FBSyxXQUFXVSxZQUFZLFlBSzVDWixFQUFLRSxLQUFLLE1BQU1RLEdBQUksYUFBYyxXQUUxQk4sRUFBUUksU0FBVyxNQUVuQmxCLEVBQUVHLE1BQU1TLEtBQUssV0FBV1UsWUFBWSxZQUs1Q1osRUFBS0UsS0FBSyxNQUFNUSxHQUFJLGFBQWMsV0FFMUJOLEVBQVFJLFNBQVcsTUFFbkJsQixFQUFFRyxNQUFNbUIsWUFBWSxhQU9oQzhCLEVBQVEsV0FDSmpDLElBT1JpQyxNQUVBaEQsRUFBTyxTQUFVSyxHQUdqQixHQUtJNEMsR0FZQUMsRUFqQkFDLEVBQVFwRCxLQUNScUQsRUFBUS9DLEVBQ1JLLEVBQVVkLEVBQUVlLFFBQ1owQyxHQUFVLEVBR1ZDLEVBQVUxRCxFQUFFLGlCQUNaMkQsRUFBbUIzRCxFQUFFLHVCQUNyQjRELEVBQWdCRixFQUFRRyxjQUN4QkMsRUFBVzlELEVBQUUscUJBQ2IrRCxFQUFZL0QsRUFBRSx1QkFDZGdFLEVBQVVoRSxFQUFFLFdBQ1ppRSxFQUFjakUsRUFBRSxlQUNoQmtFLEVBQWVsRSxFQUFFLG1CQUNqQm1FLEVBQVduRSxFQUFFLHFCQUNib0UsRUFBUXBFLEVBQUUsU0FDVnFFLEVBQU9yRSxFQUFHLFFBTVZtQixHQUpXbkIsRUFBRSxrQkFJQSxXQUVUQSxFQUFFc0UsVUFBVWxELEdBQ1IsUUFDQSxVQUNBLFNBQVVtRCxHQUNOQSxFQUFRQSxHQUFTeEQsT0FBT3dELE1BRXBCQSxFQUFNQyxnQkFDTkQsRUFBTUMsa0JBRU5ELEVBQU1FLGNBQWUsSUFLakN6RSxFQUFFc0UsVUFBVWxELEdBQ1IsUUFDQSxPQUNBLFdBRUlzRCxNQUtSWixFQUFTMUMsSUFDTFEsTUFBTyxXQUVIK0MsRUFBVTNFLEVBQUVHLFVBSXBCNEQsRUFBVTNDLElBQ05RLE1BQU8sV0FJSCxNQUZBZ0QsTUFFTyxLQUlmWCxFQUFZN0MsSUFDUlEsTUFBTyxXQUlILE1BRkFpRCxHQUFlN0UsRUFBRUcsUUFFVixLQUlmK0QsRUFBYTlDLElBQ1RRLE1BQU8sV0FJSCxNQUZBOEMsTUFFTyxLQUlmNUQsRUFBUU0sSUFDSjBELE9BQVEsU0FBV0MsR0FDZkMsSUFDQXZCLEVBQVUzQyxFQUFRbUUsYUFBZXJCLEVBR04sR0FBdkI5QyxFQUFRbUUsYUFDUnZCLEVBQVFwQyxZQUFZLHdCQUk1QjRELGVBQWdCLFNBQVVILEdBRXRCLEdBQUlJLEdBQVFKLEVBQUVLLGNBQWNDLE1BRTVCLElBQUlGLEVBQU8sQ0FDUCxHQUFJRyxHQUFhSCxFQUFRLEVBQUssSUFFOUJJLEdBQWFELEtBS3JCRSxXQUFZLFNBQVVULEdBRWxCLEdBQUlJLEdBQVFKLEVBQUVLLGNBQWNLLFVBRTVCLElBQUlOLEVBQU8sQ0FDUCxHQUFJRyxHQUFhSCxFQUFRLEtBQVUsQ0FFbkNJLEdBQWFELEtBS3JCSSxVQUFXLFNBQVVYLEdBRWpCLEdBQUlZLEdBQWFaLEVBQUVLLGNBQWNRLFFBQVEsR0FBR0MsT0FFeENGLEdBQWF0QyxFQUVia0MsTUFHT0ksRUFBYXRDLEdBRXBCa0MsRUFBYSxHQUlqQmxDLEVBQVdzQyxHQUdmRyxRQUFTLFNBQVVmLEdBQ2YsT0FBUUEsRUFBRWdCLE9BRU4sSUFBSyxJQUNEUixFQUFhLEVBQ2IsTUFDSixLQUFLLElBQ0RBLEtBQ0EsTUFDSixLQUFLLElBQ0RBLEVBQWEsRUFDYixNQUNKLEtBQUssSUFDREEsRUFBYSxFQUNiLE1BQ0osS0FBSyxJQUNEQSxLQUNBLE1BQ0osS0FBSyxJQUNEQSxLQUNBLE1BQ0osS0FBSyxJQUNEQSxFQUFhLEVBQ2IsTUFFSixTQUNJLFNBR1psRSxPQUFRLFdBRUFQLEVBQVFJLFNBQVMsT0FFakJrRCxFQUFNL0IsS0FDRjJELE9BQVUsS0FHZHJELFdBQVksV0FFSnlCLEVBQU00QixTQUFXbEYsRUFBUWtGLFVBQ3pCM0IsRUFBS2hDLEtBQ0Q0RCxhQUFjLE1BSXZCLFVBUW5CVixFQUFlLFNBQVVELEdBRWpCQSxFQUFZLElBQU01QixFQUFRaEMsU0FBUyx5QkFBMkJvQyxFQUFTcEMsU0FBUyxXQUFhK0IsR0FFN0ZDLEVBQVEvQixTQUFTLHVCQUlqQjJELEVBQVksR0FBSzVCLEVBQVFoQyxTQUFTLHlCQUEyQm9DLEVBQVNwQyxTQUFTLFdBQWErQixHQUFXMUQsR0FFdkcyRCxFQUFRcEMsWUFBWSx3QkFLNUIwRCxFQUFlLFdBRVBsRSxFQUFRbUUsWUFBY3JCLEVBQWdCLElBRXRDRixFQUFRL0IsU0FBUyxTQUtqQitCLEVBQVFwQyxZQUFZLFVBSzVCcUQsRUFBWSxTQUFVdUIsR0FFbEIsR0FBSTFFLEdBQVUwRSxDQUVWMUUsR0FBUUUsU0FBUyxXQUVqQkYsRUFBUUYsWUFBWSxVQUNwQnFDLEVBQWlCckMsWUFBWSxZQUk3QkUsRUFBUUcsU0FBUyxVQUNqQmdDLEVBQWlCaEMsU0FBUyxXQUk5QjJCLEVBQWdCeEMsRUFBUW1FLFlBR3hCdEMsV0FBWSxXQUVKeUIsRUFBTTRCLFNBQVdsRixFQUFRa0YsVUFDekIzQixFQUFLaEMsS0FDRDRELGFBQWMsV0FJdEJ0RCxXQUFZLFdBRVJ5QixFQUFNL0IsS0FDRjJELE9BQVUsVUFHZixLQUVKLE1BR1BuQixFQUFpQixTQUFVcUIsR0FFdkIsR0FBSTFFLEdBQVUwRSxDQUVWMUUsR0FBUUUsU0FBUyxXQUVqQkYsRUFBUUYsWUFBWSxVQUNwQjBDLEVBQVExQyxZQUFZLFVBQ3BCNkMsRUFBUzdDLFlBQVksWUFJckJFLEVBQVFHLFNBQVMsVUFDakJxQyxFQUFRckMsU0FBUyxVQUNqQndDLEVBQVN4QyxTQUFTLFlBSzFCaUQsRUFBYSxXQUVUZCxFQUFTeEMsWUFBWSxVQUNyQnFDLEVBQWlCckMsWUFBWSxVQUM3QjBDLEVBQVFwRCxLQUFLLFNBQVN1RixXQUd0Qi9CLEVBQU0vQixLQUNGMkQsT0FBVSxLQUdkckQsV0FBWSxXQUVKeUIsRUFBTTRCLFNBQVdsRixFQUFRa0YsVUFDekIzQixFQUFLaEMsS0FDRDRELGFBQWMsS0FJdEJuRixFQUFRbUUsVUFBVzNCLElBRXBCLEtBR1BvQixFQUFrQixXQUVkVCxFQUFZM0MsWUFBWSxVQUN4QjBDLEVBQVExQyxZQUFZLFVBQ3BCNkMsRUFBUzdDLFlBQVksV0FHekI4QixFQUFRLFdBQ0pJLEVBQU0sR0FBRy9DLElBQU04QyxFQUNmcEMsSUFDQTZELElBR1I1QixNQUVBL0MsRUFBYSxTQUFVSSxHQUd2QixHQUFJQyxHQUFPRCxFQUNQSyxFQUFVZCxFQUFFZSxRQUNacUYsRUFBa0J0RixFQUFRSSxRQUkxQkMsRUFBYSxXQUVUTCxFQUFRTSxJQUNKQyxPQUFRLFdBRUMrRSxHQUFtQnRGLEVBQVFJLFVBRTVCa0YsRUFBa0J0RixFQUFRSSxRQUUxQm1GLFNBTWhCQSxFQUFhLFdBRVQzRixFQUFLMkIsS0FDRGlFLFVBQVcsS0FFZjVGLEVBQUsyQixLQUNEaUUsVUFBV3hGLEVBQVFrRixTQUFXaEcsRUFBRSxpQkFBaUI2RCxjQUFnQjdELEVBQUUsaUJBQWlCNkQsY0FBZ0I3RCxFQUFFLGdCQUFnQjZELGlCQUk5SFQsRUFBUSxXQUNKakMsSUFDQWtGLElBT1JqRCxNQUVBNUMsRUFBaUIsU0FBVUMsR0FHM0IsR0FBSUMsR0FBT0QsRUFDUDhGLEVBQWM3RixFQUFLRSxLQUFLLGdCQUl4Qk8sRUFBYSxhQUdia0YsRUFBYSxXQUVUM0YsRUFBSzJCLEtBQ0RpRSxVQUFXQyxFQUFZMUMsaUJBSS9CVCxFQUFRLFdBQ0pqQyxJQUNBa0YsSUFPUmpEO0NDaG9CUixXQUVJcEQsRUFBRyxXQUVDQSxFQUFHLFVBQVdDLEtBQUssV0FFZixHQUFJdUcsR0FBTXhHLEVBQUVHLFVBTXBCLElBQUlxRyxHQUFRLFNBQVUvRixHQUdsQixHQUFJOEMsR0FBUXBELEtBQ1JzRyxFQUFnQixHQUNoQkMsRUFBWTFHLEVBQUcsZ0JBQ2ZVLEVBQU9ELEVBQ1BrRyxFQUFZakcsRUFBS0UsS0FBTSxpQ0FDdkJnRyxFQUFRbEcsRUFBS0UsS0FBTSxnQkFDbkJpRyxFQUFZbkcsRUFBS0UsS0FBTSxtQkFDdkJrRyxFQUFtQjlHLEVBQUcsUUFDdEJjLEVBQVVkLEVBQUdlLFFBQ2JnRyxFQUFTcEUsV0FBWSxhQUFjLEdBR25DcUUsRUFBYyxXQUNMbEcsRUFBUWtGLFNBQTZCLEVBQWhCUyxFQUFzQkcsRUFBTVosU0FBVyxFQUM3RFksRUFBTXZFLEtBQU80RSxLQUFTbkcsRUFBUWtGLFNBQTZCLEVBQWhCUyxFQUF3QkcsRUFBTVosVUFBYSxJQUV0RlksRUFBTXZFLEtBQU80RSxJQUFLLEtBRzFCQyxFQUFrQixXQUNkLEdBQ0lDLEdBREFDLEVBQVk5QyxTQUFTK0MsY0FBZSxNQVd4QyxPQVJBRCxHQUFVRSxVQUFZLDJCQUV0QmhELFNBQVNpRCxLQUFLQyxZQUFhSixHQUUzQkQsRUFBaUJDLEVBQVVLLFlBQWNMLEVBQVVNLFlBRW5EcEQsU0FBU2lELEtBQUtJLFlBQVlQLEdBRW5CRCxHQUVYUyxFQUFRLFdBQ0psSCxFQUFLMkIsS0FDRHdGLFVBQVcsV0FFZmYsRUFBaUJ6RSxLQUNid0YsVUFBVyxPQUNYQyxhQUFjLElBR2xCcEgsRUFBS1ksWUFBYSxnQkFDbEJaLEVBQUtpQixTQUFVLGNBRWZvRixFQUFTcEUsV0FBWSxXQUVqQmpDLEVBQUsyQixLQUNEd0YsVUFBVyxTQUdmbkgsRUFBS1ksWUFBYSxlQUNuQixNQUdQOEIsRUFBUSxXQUNKMUMsRUFBTSxHQUFJRCxJQUFNOEMsRUFDaEJ3RSxLQUVKQSxFQUFZLFdBQ1JqSCxFQUFRTSxJQUNKQyxPQUFRLFdBQ0oyRixPQUdSTixFQUFTdEYsSUFDTFEsTUFBTyxXQUVILE1BREFvRyxHQUFPaEksRUFBR0csTUFBTzJDLEtBQU0sZ0JBQ2hCLEtBR2YrRCxFQUFVakcsS0FBSyxRQUFRUSxJQUNuQlEsTUFBTyxTQUFVbUQsR0FDYkEsRUFBRVAscUJBR1Y5RCxFQUFLVSxJQUNEUSxNQUFPLFdBRUgsTUFEQWdHLE1BQ08sS0FHZmpCLEVBQVV2RixJQUNOUSxNQUFPLFdBRUgsTUFEQWdHLE1BQ08sTUFJbkJJLEVBQVEsU0FBVVYsR0FDZFcsRUFBa0JYLEdBRWxCUixFQUFpQnpFLEtBQ2J3RixVQUFXLFNBQ1hDLGFBQWNaLE1BRWxCeEcsRUFBS2lCLFNBQVUsZ0JBQ2ZxRixLQUdKaUIsRUFBbUIsU0FBVVgsR0FDekIsR0FBSVksR0FBYXJCLEVBQVVzQixPQUFRLFdBQWFiLEVBRWhEVCxHQUFVeEUsS0FBTytGLFFBQVMsU0FDMUJGLEVBQVc3RixLQUFPK0YsUUFBUyxVQVFuQ2hGO0FDL0hSLGNBQ0EsV0FFSXBELEVBQUcsV0FFQ0EsRUFBRUMsS0FBTUQsRUFBRyxvQkFBc0IsV0FFN0IsR0FBSXFJLEdBQWdCckksRUFBR0csU0FJM0JILEVBQUVDLEtBQU1ELEVBQUcsc0JBQXdCLFdBRS9CLEdBQUlzSSxHQUF5QnRJLEVBQUdHLFVBS3hDLElBQUlrSSxHQUFnQixTQUFVNUgsR0FHMUIsR0FBSThDLEdBQVFwRCxLQUNSTyxFQUFPRCxFQUdQOEgsRUFBZSxXQUNYN0gsRUFBTSxHQUFJRCxJQUFNOEMsRUFDaEJpRixLQUVKQSxFQUFjLFdBRVZ4SSxFQUFFLGVBQWV5SSxPQUNiQyxhQUFjLEVBQ2RDLGFBQWMsRUFDZEMsZUFBZ0IsRUFDaEJDLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxTQUFVLGdCQUVkL0ksRUFBRSxlQUFleUksT0FDYkMsYUFBYyxFQUNkQyxhQUFjLEVBQ2RJLFNBQVUsY0FDVkMsTUFBTSxFQUNOSCxRQUFRLEVBQ1JDLFVBQVUsRUFDVkcsWUFBWSxFQUNaQyxlQUFlLEVBQ2ZDLGFBRVFDLFdBQVksS0FDWkMsVUFDSVgsYUFBYyxFQUNkRSxlQUFnQixLQUlwQlEsV0FBWSxLQUNaQyxVQUNJWCxhQUFjLEVBQ2RFLGVBQWdCLEtBSXBCUSxXQUFZLElBQ1pDLFVBQ0lYLGFBQWMsRUFDZEUsZUFBZ0IsT0FReENMLE1BRUFELEVBQXlCLFNBQVU3SCxHQUduQyxHQUVJNkksR0FFQUMsRUFKQWhHLEVBQVFwRCxLQUNSTyxFQUFPRCxFQUVQSyxFQUFVZCxFQUFFZSxRQUVaeUksRUFBYzlJLEVBQUtFLEtBQUssc0JBQ3hCNkksRUFBUS9JLEVBQUtFLEtBQUssdUJBQ2xCOEksRUFBUWhKLEVBQUtFLEtBQUssdUJBQ2xCK0ksR0FBUSxFQUdScEIsRUFBZSxXQUNYN0gsRUFBTSxHQUFJRCxJQUFNOEMsRUFDaEJwQyxJQUVJTCxFQUFRSSxTQUFXLElBRW5CcUksR0FBUSxHQUlSQSxHQUFRLEVBQ1JmLE1BS1JySCxFQUFhLFdBRVRMLEVBQVFNLElBQ0pDLE9BQVEsV0FFQVAsRUFBUUksU0FBVyxJQUVmcUksSUFFQUEsR0FBUSxFQUNSSyxLQU1DTCxJQUVEQSxHQUFRLEVBQ1JmLFNBV3BCb0IsRUFBVyxXQUVQTixFQUFRYixNQUFNLFlBR2xCRCxFQUFjLFdBRVZxQixJQUVBUCxFQUFVdEosRUFBRSwrQkFBK0J5SSxPQUN2Q08sTUFBTSxFQUNOTixhQUFjLEVBQ2RFLGVBQWdCLEVBQ2hCa0IsVUFBVSxFQUNWQyxjQUFlLElBQ2ZDLFVBQVdQLEVBQ1hRLFVBQVdQLEVBQ1hRLFdBQWFWLEVBQ2JMLGFBRVFDLFdBQVksS0FDWkMsVUFDSVgsYUFBYyxRQU9sQ21CLEVBQWlCLFdBRVQvSSxFQUFRSSxTQUFXLEtBRWZSLEVBQUtFLEtBQUssNkJBQTZCdUosUUFBVSxJQUVqRFIsR0FBUSxHQUlKN0ksRUFBUUksU0FBVyxNQUV2QlIsRUFBS0UsS0FBSyw2QkFBNkJ1SixRQUFVLElBRWpEUixHQUFRLEdBTVpBLEdBRUFqSixFQUFLRSxLQUFLLGdDQUFnQ3lCLEtBQ3RDK0YsUUFBUyxTQU96Qkc7Q0NwTVIsV0FFSXZJLEVBQUcsV0FDQ0EsRUFBRyxVQUFXQyxLQUFNLFdBQ2hCLEdBQUltSyxJQUNBM0osSUFBS1QsRUFBR0csTUFDUmtLLFdBQVksRUFDWkMsU0FBVSxPQU10QixJQUFJRixHQUFpQixTQUFVRyxHQUczQixHQVdJQyxHQUFRQyxFQVhSbEgsRUFBUXBELEtBQ1JPLEVBQU82SixFQUFPOUosSUFDZGlLLEVBQWNILEVBQU9GLFlBQWMsRUFDbkNNLEVBQVlKLEVBQU9ELFVBQVksRUFDL0JNLEVBQVdMLEVBQU9NLFNBQVcsRUFDN0JDLEVBQVUsaUVBQWlFQyxLQUFNQyxVQUFVQyxXQUMzRkMsRUFBUWxMLEVBQUcsK0NBQ1g0RyxFQUFRNUcsRUFBRyx1Q0FDWGMsRUFBVWQsRUFBR2UsUUFDYm9LLEVBQVFuTCxFQUFHLFFBQ1hvTCxHQUFVLEVBSVZDLEVBQVcsV0FDUCxHQUFJQyxHQUFVLEVBRWQ1SyxHQUFLMkIsS0FDRGtKLFFBQVMsSUFHYjdLLEVBQUs4SyxLQUFNNUUsR0FDWEEsRUFBUWxHLEVBQUtlLFNBQ2JtRixFQUFNNkUsT0FBUSw4Q0FDZC9LLEVBQUtnTCxPQUFRUixHQUNieEssRUFBS0UsS0FBTSxVQUFXWCxLQUFNLFdBQ3hCLEdBQUl1QixHQUFVeEIsRUFBR0csS0FFaUIsYUFBOUJxQixFQUFRc0IsS0FBTSxjQUNkd0ksRUFBVTlKLEVBQVFvQixVQUlYLElBQVgwSSxJQUNBQSxFQUFXNUssRUFBS0UsS0FBTSxVQUFVK0ssR0FBSSxHQUFJL0ksUUFFNUNzSSxFQUFNdEksS0FBTTBJLElBRWhCTSxFQUFhLFdBQ1RSLEdBQVUsRUFFTFQsRUFJbUIsR0FBYkEsRUFDUEgsRUFBT3FCLE1BQU0sR0FBTSxHQUFROUosUUFBUyxJQUFLLFdBQ3JDeUksRUFBT3NCLFdBRVMsR0FBYm5CLEdBQ1BILEVBQU9xQixNQUFNLEdBQU0sR0FBUUUsUUFBUyxJQUFLLFdBQ3JDdkIsRUFBT3NCLFdBVFh0QixFQUFPbkksS0FDSCtGLFFBQVMsU0FZakJ4QixFQUFNdEYsWUFBYSwyQkFHdkJpSCxFQUFlLFdBQ1g3SCxFQUFNLEdBQUlELElBQU04QyxFQUVoQjhILElBQ0FXLElBQ0FqRSxLQUVKQSxFQUFZLFdBQ1JySCxFQUFLVSxHQUFJLFNBQVUsV0FDZjhKLEVBQU10SSxLQUFNNUMsRUFBR0csTUFBT1MsS0FBTSxtQkFBb0JnQyxVQUdwRDVDLEVBQUVzRSxVQUFVbEQsR0FDUixTQUNBLFNBQ0EsV0FDSXBCLEVBQUdHLE1BQU04TCxPQUFPckosS0FBTTVDLEVBQUdHLE1BQU9TLEtBQU0sbUJBQW9CZ0MsVUFJL0MsR0FBZjhILEdBQXFCSSxHQUNyQmxFLEVBQU14RixJQUNGUSxNQUFTLFNBQVVtRCxHQUNmQSxFQUFFUCxrQkFFRTRHLEVBQ0FRLElBRUFNLE9BTWhCZixFQUFNL0osSUFDRlEsTUFBUyxXQUNEd0osR0FDQVEsT0FLWjlLLEVBQVFNLElBQ0owRCxPQUFVLFdBQ0ZzRyxHQUNBUSxRQU1oQkksRUFBa0IsWUFFVHRCLEdBQWVJLEVBQ2hCcUIsSUFDc0IsR0FBZnpCLEdBQ1AwQixLQUdSQSxFQUFjLFdBQ1Z4RixFQUFNakYsU0FBVSwyQkFFcEJ3SyxFQUFpQixXQUNidkYsRUFBTWpGLFNBQVUsMkJBRXBCdUssRUFBYSxXQUNULEdBQUlHLEdBQVVyTSxFQUFHLFVBQ2JzTSxFQUFPdE0sRUFBRyxhQUVWbUMsR0FEWXJCLEVBQVFtRSxZQUNYMkIsRUFBTXpFLFVBQ2ZvSyxFQUFZLEVBQ1pDLEVBQVc5TCxFQUFLRSxLQUFNLG1CQUFvQjZMLFFBQzFDQyxFQUFLQyxLQUFLQyxNQUF1QixJQUFoQkQsS0FBS0UsU0FFMUJSLEdBQVFwTSxLQUFNLFdBQ05FLE9BQVNPLEVBQU0sSUFBT1AsS0FBS00sSUFBSXFNLGVBQy9CM00sS0FBS00sSUFBSXNNLFVBSWIzQixHQUNBWixFQUFPc0IsU0FFWFYsR0FBVSxFQUVWWixFQUFTeEssRUFBRyxpRUFBbUUwTSxFQUFLLFlBRXBGaE0sRUFBS0UsS0FBTSxVQUFXWCxLQUFNLFNBQVUrTSxHQUNsQyxHQUFJeEwsR0FBVXhCLEVBQUdHLEtBRWI2TSxJQUFLUixFQUNMRixFQUFLYixPQUFRLHNCQUF3QmpLLEVBQVFvQixPQUFTLFNBRXREMEosRUFBS2IsT0FBUSxPQUFTakssRUFBUW9CLE9BQVMsV0FLL0M0SCxFQUFPaUIsT0FBUWEsR0FDZm5CLEVBQU1NLE9BQVFqQixHQUNkNUQsRUFBTWpGLFNBQVUsMEJBRWhCNkksRUFBT25JLEtBQ0huQixNQUFPMEYsRUFBTXFHLGFBQ2I3SyxLQUFNRCxFQUFPQyxLQUNiNkUsSUFBSzlFLEVBQU84RSxJQUFNTCxFQUFNc0csZ0JBRzVCWCxFQUFZL0IsRUFBTzBDLGNBQ2ZYLEVBQVkvQixFQUFPNUosS0FBTSxNQUFPK0ssR0FBSSxHQUFJdUIsY0FBZ0J0QyxJQUN4REosRUFBT3hFLE9BQVF3RSxFQUFPNUosS0FBTSxNQUFPK0ssR0FBSSxHQUFJdUIsY0FBZ0J0QyxHQUMzREgsRUFBVUQsRUFBT2xLLG9CQUdKLEdBQWJxSyxHQUNBSCxFQUFPbkksS0FDSCtGLFFBQVMsU0FFYm9DLEVBQU94SSxVQUFXLE1BQ0UsR0FBYjJJLElBQ1BILEVBQU9uSSxLQUNIa0osUUFBUyxLQUViZixFQUFPMkMsU0FBVzVCLFFBQVMsR0FBSyxNQUdwQ2YsRUFBTzVKLEtBQU0sTUFBT1EsSUFDaEJRLE1BQVMsU0FBVW1ELEdBQ2YsR0FBSTBILEdBQVF6TSxFQUFHRyxNQUFPc00sT0FFdEIxSCxHQUFFUCxrQkFFRjlELEVBQUswTSxJQUFLMU0sRUFBS0UsS0FBTSxVQUFXK0ssR0FBSWMsR0FBUTNKLEtBQU0sVUFDbERwQyxFQUFLMk0sUUFBUyxVQUNkekIsT0FTaEJySSxHQUFNdUosWUFBYyxXQUNoQixNQUFPMUIsSUFFWDdILEVBQU13SixNQUFRLFdBQ1ZuQixLQUlKckQ7Q0NqT1IsV0FFSXZJLEVBQUUsV0FFRUEsRUFBRSxhQUFhQyxLQUFLLFdBRWhCLEdBQUlxTixHQUFTdE4sRUFBRUcsVUFNdkIsSUFBSW1OLEdBQVUsU0FBVTdNLEdBR3BCLEdBQUlDLEdBQU9ELEVBQ1A4TSxFQUFRdk4sRUFBRSxRQUFRMEMsS0FBSyxVQUN2QjhLLEVBQVcsR0FBSUMsZ0JBQ2ZDLEVBQU9oTixFQUFLRSxLQUFLLGdDQUNqQitNLEVBQVFqTixFQUFLRSxLQUFLLDRCQUNsQmdOLEVBQVdsTixFQUFLRSxLQUFLLDRCQUVyQmlOLEdBRFFELEVBQVNoTixLQUFLLFFBQ05GLEVBQUtFLEtBQUssOEJBQzFCa04sRUFBY3BOLEVBQUtFLEtBQUssMkJBQ3hCbU4sRUFBWXJOLEVBQUtFLEtBQUssdUJBQ3RCb04sRUFBZ0J0TixFQUFLRSxLQUFLLDRCQUMxQnFOLEVBQWlCLEVBQ2pCQyxFQUFTeE4sRUFBS0UsS0FBSyw0QkFDbkJ1TixFQUFjek4sRUFBS0UsS0FBSyxrQ0FDeEJ3TixFQUFnQjFOLEVBQUtFLEtBQUssc0RBRTFCeU4sR0FEZTNOLEVBQUtFLEtBQUssOEJBQ0RGLEVBQUtFLEtBQUssK0JBQ2xDME4sR0FBbUIsRUFDbkJDLEVBQVd2TyxFQUFFLCtCQUNid08sRUFBZTlOLEVBQUtFLEtBQUssa0NBQ3pCNk4sRUFBbUIvTixFQUFLRSxLQUFLLG1DQUM3QjhOLEVBQWVoTyxFQUFLRSxLQUFLLGVBQ3pCK04sRUFBZWpPLEVBQUtFLEtBQUssaUJBQ3pCZ08sRUFBZ0JsTyxFQUFLRSxLQUFLLG1CQUFtQjhCLEtBQUssYUFDbERtTSxFQUFTbk8sRUFBS0UsS0FBSyw0QkFDbkJFLEVBQVVkLEVBQUVlLFFBQ1orTixLQUNBQyxFQUFXLEtBQ1hDLEtBU0E3TixHQUppQlQsRUFBS0UsS0FBSyxzQkFJZCxXQUVURSxFQUFRTSxJQUNKQyxPQUFRLFdBRUpxTSxFQUFLek4sS0FBTSxXQUVQLEdBQUl1QixHQUFVeEIsRUFBRUcsTUFDWnNCLEVBQVNELEVBQVFDLFNBQ2pCd04sRUFBY3pOLEVBQVEwTixNQUV0QnpOLEdBQU9DLFNBQVMsV0FFaEJ1TixFQUFZNU0sS0FDUjhNLGFBQWNGLEVBQVlyTyxLQUFLLFFBQVFpRCxrQkFPL0MvQyxFQUFRSSxTQUFXLE1BRW5CbEIsRUFBRSxrQkFBa0JxQyxLQUFPK00sVUFBVyxNQUs5Q0MsS0FBTSxlQUtWM0IsRUFBS3RNLElBQ0RRLE1BQU8sV0FFSCxHQUFJSixHQUFVeEIsRUFBRUcsTUFDWnNCLEVBQVNELEVBQVFDLFNBQ2pCd04sRUFBY3pOLEVBQVEwTixNQUV0QnpOLEdBQU9DLFNBQVMsV0FFaEJELEVBQU9ILFlBQVksVUFDbkIyTixFQUFZNU0sS0FDUjhNLGFBQWMsRUFDZG5KLE9BQVEsTUFLWnZFLEVBQU9FLFNBQVMsVUFDaEJzTixFQUFZNU0sS0FDUjhNLGFBQWNGLEVBQVlyTyxLQUFLLFFBQVFpRCxnQkFFM0NsQixXQUFZLFdBRVJzTSxFQUFZNU0sS0FDUjJELE9BQVUsVUFHZixTQU1mMkgsRUFBTXZNLElBQ0ZRLE1BQU8sV0FFSDBOLE9BSVJsQixFQUFjaE4sSUFDVlEsTUFBTyxXQUtILE1BSEE2TSxHQUFpQnJCLElBQUksS0FDckJtQyxLQUVPLEtBR2Z2UCxFQUFFc0UsVUFBVWxELEdBQ1IsUUFDQSxnQkFDQSxXQUNJLEdBQUlJLEdBQVV4QixFQUFFRyxNQUNacVAsRUFBUUMsU0FBU2pPLEVBQVFvQixPQW1DN0IsT0FqQ0lwQixHQUFRRSxTQUFTLG9CQUV5QixHQUF0QytOLFNBQVVoQixFQUFpQnJCLFNBRTNCcUIsRUFBaUJyQixJQUFLcUIsRUFBaUJyQixNQUFRLEdBQy9Dc0MsSUFDQUMsS0FLR25PLEVBQVFFLFNBQVMsb0JBRWpCRixFQUFReUssT0FBT3ZLLFNBQVMsWUFFM0IrTSxFQUFpQnJCLElBQUtxQyxTQUFVaEIsRUFBaUJyQixPQUFVLEdBQzNEc0MsSUFDQUMsS0FNQUgsR0FBU0MsU0FBVWhCLEVBQWlCckIsU0FFcENxQixFQUFpQnJCLElBQUlvQyxHQUNyQkUsSUFDQUMsTUFNRCxJQUdmM1AsRUFBRXNFLFVBQVVsRCxHQUNSLFFBQ0EsNkJBQ0EsV0FDSSxHQUFJSSxHQUFVeEIsRUFBRUcsTUFDWnNCLEVBQVNELEVBQVFDLFNBQ2pCbU8sRUFBU25PLEVBQU9pQixLQUFLLE1BQ3JCbU4sRUFBV3BPLEVBQU9pQixLQUFLLE9BSzNCLE9BSEErTCxHQUFpQnJCLElBQUksS0FDckIwQyxFQUFvQkYsRUFBUUMsSUFFckIsSUFHZmhDLEVBQWN6TSxJQUNWUSxNQUFPLFdBSUgsTUFGQTBOLE1BRU8sS0FJZlQsRUFBT3pOLElBQ0hRLE1BQU8sV0FJSCxNQUZBME4sTUFFTyxLQUlmeEIsRUFBWWxOLEtBQUssd0JBQXdCUSxJQUNyQzJPLE9BQVEsV0FFSixHQUFJdk8sR0FBVXhCLEVBQUVHLE1BQ1o2UCxFQUFReE8sRUFBUTBOLE9BQ2hCZSxFQUFZRCxFQUFNRSxRQUFRQyxXQUFXckUsU0FBU3NFLE1BQU14TixPQUNwREMsRUFBT3JCLEVBQVFzQixLQUFLLFFBQ3BCNEosRUFBS2xMLEVBQVFrQixLQUFLLE1BQ2xCMk4sRUFBZTdPLEVBQVFLLFFBQVEsMkJBQTJCakIsS0FBSyxRQUFRLEdBQUcwUCxVQUMxRUMsRUFBa0J6QyxFQUFZbE4sS0FBSyxjQUFlaUMsRUFBTSxhQUFhc0gsTUFFekVtRSxHQUFtQjlNLEVBQVFnUCxLQUFLLFdBRTVCMVAsRUFBUUksU0FBVyxPQUVuQndPLElBQ0FKLEtBSUptQixRQUFRQyxJQUFJSCxHQUVaSSxFQUFnQjlOLEVBQU02SixFQUFJNEIsRUFBa0JpQyxHQUM1QzlCLEVBQWlCckIsSUFBSSxLQUNyQndELEVBQW1CWCxFQUFXdkQsRUFBSTdKLEVBQU13TixHQUN4Q1YsT0FJUmpCLEVBQWF0TixJQUNUMk8sT0FBUSxXQUVKdEIsRUFBaUJyQixJQUFJLEtBQ3JCc0MsSUFDQUMsT0FJUmhCLEVBQWF2TixJQUNUMk8sT0FBUSxXQUVKdEIsRUFBaUJyQixJQUFJLEtBQ3JCc0MsSUFDQUMsT0FJUnRCLEVBQXNCak4sSUFDbkJ5UCxPQUFRLFdBa0NKLE1BaENJL1AsR0FBUUksU0FBVyxNQUVuQndPLElBSUpyQixFQUFzQnpOLEtBQUssVUFBVVgsS0FBTSxXQUV2QyxHQUFJdUIsR0FBVXhCLEVBQUVHLE1BQ1owQyxFQUFPckIsRUFBUXNCLEtBQUssUUFDcEI0SixFQUFLbEwsRUFBUTRMLEtBRWpCdUQsR0FBZ0I5TixFQUFNNkosRUFBSSxTQUFVLElBRXBDb0UsRUFBbUJqTyxLQUd2QndMLEVBQXNCek4sS0FBSyw2QkFBNkJYLEtBQU0sV0FFMUQsR0FBSXVCLEdBQVV4QixFQUFFRyxNQUNaMEMsRUFBT3JCLEVBQVFzQixLQUFLLFFBQ3BCNEosRUFBS2xMLEVBQVFrQixLQUFLLEtBRXRCaU8sR0FBZ0I5TixFQUFNNkosRUFBSSxRQUFTLElBRW5Db0UsRUFBbUJqTyxLQUl2QjRMLEVBQWlCckIsSUFBSSxLQUNyQnVDLEtBRU8sT0FNbEJpQixFQUFvQixTQUFVRyxFQUFVQyxFQUFRQyxFQUFVWixHQUVsRC9CLEVBRUFOLEVBQWN2QyxPQUFPLGlCQUFrQndGLEVBQVUsYUFBY0QsRUFBUSxLQUFNWCxFQUFjLEtBQU1VLEVBQVUsNERBSTNHL0MsRUFBY3BOLEtBQUssZUFBaUJvUSxFQUFTLE1BQU1sRixTQUd2RG1DLEVBQWlCRCxFQUFjcE4sS0FBSyxNQUFNdUosT0FFdEM4RCxFQUFpQixHQUVqQkYsRUFBVXpNLFlBQVksVUFDdEI0TSxFQUFPdE4sS0FBSyxRQUFRc1EsS0FBSyxJQUFLakQsRUFBZ0IsS0FDOUNFLEVBQVl2TixLQUFLLFFBQVFzUSxLQUFLLElBQUtqRCxFQUFnQixLQUNuREMsRUFBT3ZNLFNBQVMsWUFDaEJ5TSxFQUFjOU0sWUFBWSxZQUkxQnlNLEVBQVVwTSxTQUFTLFVBQ25CdU0sRUFBT3ROLEtBQUssUUFBUXNRLEtBQUssSUFDekIvQyxFQUFZdk4sS0FBSyxRQUFRc1EsS0FBSyxJQUM5QmhELEVBQU81TSxZQUFZLFlBQ25COE0sRUFBY3pNLFNBQVMsWUFLL0IrTixFQUFjLFdBRVZuQixFQUFXdk8sRUFBRSwrQkFFYkEsRUFBRSxzQkFBc0J5TCxPQUFPOEMsR0FFL0JBLEVBQVNsTSxLQUNMNEUsSUFBS2pILEVBQUUsbUJBQW1Cd0MsV0FBV3lFLElBQU0sTUFJbkRrSyxFQUFnQixXQUVScEMsSUFFQXRNLGFBQWFzTSxHQUNiQSxFQUFXLE1BSWZBLEVBQVdwTSxXQUFZLFdBQ25CM0MsRUFBRSxZQUFZMkIsU0FBUyxXQUN4QixLQUVIb04sRUFBV3BNLFdBQVksV0FDbkIzQyxFQUFFLFlBQVk4TCxVQUNmLE1BR1B5RCxFQUFlLFdBRVh4QixFQUFVcE0sU0FBUyxVQUNuQnVNLEVBQU90TixLQUFLLFFBQVFzUSxLQUFLLElBQ3pCL0MsRUFBWXZOLEtBQUssUUFBUXNRLEtBQUssSUFDOUJoRCxFQUFPNU0sWUFBWSxZQUNuQjBNLEVBQWNwTixLQUFLLE1BQU1rTCxTQUN6QmdDLEVBQVlsTixLQUFLLHdCQUF3QjRQLEtBQUssV0FBVyxHQUN6RGhDLEVBQWFwQixJQUFJLElBRWpCc0MsSUFDQUMsS0FHSkcsRUFBcUIsU0FBVWtCLEVBQVFDLEdBRW5DbkQsRUFBWWxOLEtBQUssa0JBQW1Cb1EsRUFBUSxNQUFNUixLQUFLLFdBQVcsR0FDbEVsQyxHQUFtQixFQUNuQnNDLEVBQW1CLEdBQUlJLEVBQVEsR0FBSSxJQUNuQ3RCLElBQ0FpQixFQUFnQk0sRUFBVUQsRUFBUTFDLEVBQWtCLElBQ3BEcUIsS0FHSm1CLEVBQXFCLFNBQVVHLEdBRTNCbkQsRUFBWWxOLEtBQUssZUFBZ0JxUSxFQUFVLE1BQU1oUixLQUFNLFdBRW5ELEdBQUl1QixHQUFVeEIsRUFBRUcsTUFDWjZRLEVBQVN4UCxFQUFRa0IsS0FBSyxLQUUxQm9MLEdBQVlsTixLQUFLLGtCQUFtQm9RLEVBQVEsTUFBTVIsS0FBSyxXQUFXLEdBQ2xFbEMsR0FBbUIsRUFDbkJzQyxFQUFtQixHQUFJSSxFQUFRLEdBQUksT0FLM0MxQixFQUFlLFdBRVAzQixFQUFNak0sU0FBUyxXQUVmaU0sRUFBTXJNLFlBQVksVUFDbEJzTSxFQUFTdE0sWUFBWSxVQUNyQnRCLEVBQUUsa0JBQWtCcUMsS0FBTytNLFVBQVcsT0FJdEN6QixFQUFNaE0sU0FBUyxVQUNmaU0sRUFBU2pNLFNBQVMsVUFFYmIsRUFBUUksUUFBVSxNQUVuQmxCLEVBQUUsa0JBQWtCcUMsS0FBTytNLFVBQVcsUUFNbERnQyxFQUFvQixTQUFVMU8sR0FFMUIsR0FBSTJPLEdBQVE1QixTQUFTL00sRUFBSzJHLFNBQVNpSSxVQUMvQkMsRUFBYTlCLFNBQVMvTSxFQUFLMkcsU0FBU21JLFlBSXhDLElBRkEvQyxFQUFpQnJCLElBQUltRSxHQUVSLEdBQVRGLEdBQXdCLEdBQVRBLEVBQWEsQ0FFNUIsR0FBSUksR0FBaUIsMEJBSXJCLElBRkFBLEdBQWlCLDRDQUViSixHQUFTLEVBRVQsSUFBSyxHQUFJckUsR0FBSSxFQUFHQSxHQUFLcUUsRUFBT3JFLElBR3BCeUUsR0FEQXpFLEdBQUt1RSxFQUNZLDhCQUErQnZFLEVBQUcsT0FFbEMsZUFBZ0JBLEVBQUcsV0FNM0MsQ0FFRCxHQUFJdUUsR0FBYyxHQUFLQSxFQUFhRixFQUFNLEVBQUksQ0FFMUMsSUFBSyxHQUFJckUsR0FBSSxFQUFHQSxHQUFLLEVBQUdBLElBR2hCeUUsR0FEQXpFLEdBQUt1RSxFQUNZLDhCQUErQnZFLEVBQUcsT0FFbEMsZUFBZ0JBLEVBQUcsTUFLNUN5RSxJQUFpQixrQkFFakIsS0FBSyxHQUFJekUsR0FBSXFFLEVBQU0sRUFBR3JFLEdBQUtxRSxFQUFPckUsSUFHMUJ5RSxHQURBekUsR0FBS3VFLEVBQ1ksOEJBQStCdkUsRUFBRyxPQUVsQyxlQUFnQkEsRUFBRyxPQU1oRCxHQUFJdUUsRUFBYSxHQUFLQSxHQUFjRixFQUFNLEVBQUksQ0FLMUMsR0FIQUksR0FBaUIsb0JBQ2pCQSxHQUFpQixtQkFFWkYsRUFBVyxFQUFJLEdBQU9BLEVBQVcsR0FBS0YsRUFBTSxFQUU3QyxJQUFLLEdBQUlyRSxHQUFJdUUsRUFBVyxFQUFHdkUsR0FBS3VFLEVBQVcsRUFBR3ZFLElBR3RDeUUsR0FEQXpFLEdBQUt1RSxFQUNZLDhCQUErQnZFLEVBQUcsT0FFbEMsZUFBZ0JBLEVBQUcsV0FLekMsSUFBSXVFLEVBQVcsR0FBSyxFQUV2QixJQUFLLEdBQUl2RSxHQUFJdUUsRUFBWXZFLEdBQUt1RSxFQUFXLEVBQUd2RSxJQUdwQ3lFLEdBREF6RSxHQUFLdUUsRUFDWSw4QkFBK0J2RSxFQUFHLE9BRWxDLGVBQWdCQSxFQUFHLFdBS3pDLElBQUl1RSxFQUFXLEdBQUtGLEVBQU0sRUFFN0IsSUFBSyxHQUFJckUsR0FBSXVFLEVBQVcsRUFBR3ZFLEdBQUt1RSxFQUFZdkUsSUFHcEN5RSxHQURBekUsR0FBS3VFLEVBQ1ksOEJBQStCdkUsRUFBRyxPQUVsQyxlQUFnQkEsRUFBRyxNQU9oRHlFLElBQWlCLG1CQUNqQkEsR0FBaUIsZUFBZ0JKLEVBQU8sT0FHNUMsR0FBYSxHQUFUQSxHQUVJRSxFQUFhLEdBQUtBLEdBQWNGLEVBQU0sRUFBSSxDQUMxQ0ksR0FBaUIsb0JBQ2pCQSxHQUFpQixrQkFFakIsS0FBSyxHQUFJekUsR0FBSSxFQUFHQSxHQUFLLEVBQUdBLElBR2hCeUUsR0FEQXpFLEdBQUt1RSxFQUNZLDhCQUErQnZFLEVBQUcsT0FFbEMsZUFBZ0JBLEVBQUcsTUFLNUN5RSxJQUFpQixtQkFDakJBLEdBQWlCLGVBQWdCSixFQUFPLFFBUXBESSxHQUFpQiw0Q0FDakJBLEdBQWtCLFNBRWxCelIsRUFBRSxvQkFBb0JrUixLQUFLTyxPQUl2QnpSLEdBQUUsZUFBZW1LLFFBRWpCbkssRUFBRSxlQUFlOEwsVUFPN0I0RixFQUFvQixTQUFVaFAsR0FFMUIsR0FBSWlQLEdBQVVqUCxFQUFLa1AsU0FDZkMsRUFBZSxxQ0FDZkMsSUFFSixJQUEwQkMsUUFBdEJqRCxFQUFpQixNQUVqQixJQUFLLEdBQUk5QixHQUFJLEVBQUdBLEdBQUs4QixFQUFpQixNQUFFM0UsT0FBTyxFQUFHNkMsSUFBTSxDQUVwRCxHQUFJZ0YsR0FBWUMsV0FBV25ELEVBQWlCLE1BQUU5QixHQUFHa0YsUUFBUSxJQUFJLElBQUlBLFFBQVEsSUFBSSxJQUU3RUosR0FBaUJLLEtBQUtILEdBYTlCLEdBQUlGLEVBQWlCM0gsT0FBUyxDQUUxQixHQUFJaUksRUFFSixJQUFxQixHQUFqQkMsY0FFQUQsRUFBYXpGLEtBQUsyRixJQUFJQyxNQUFNLEtBQU1ULE9BSWxDLEtBQUssR0FBSTlFLEdBQUksRUFBR0EsR0FBSzhFLEVBQWlCM0gsT0FBTyxFQUFHNkMsSUFFNUMsR0FBSThFLEVBQWlCOUUsSUFBTXFGLGNBQWdCLENBRXZDRCxFQUFhTixFQUFpQjlFLEVBRTlCLFFBV2hCaE4sRUFBRUMsS0FBTTBSLEVBQVMsV0FFYixHQUdJSyxHQUhBUSxFQUFVclMsS0FDVjhDLEVBQVF1UCxFQUFRdlAsTUFBTSxHQUN0QndQLEVBQVlELEVBQVFyUCxTQUFTLEVBcUJqQyxJQUFJMk8sRUFBaUIzSCxPQUVqQixJQUFLLEdBQUk2QyxHQUFJLEVBQUdBLEdBQUt3RixFQUFRdlAsTUFBTWtILE9BQU8sRUFBRzZDLElBSXpDLEdBRkFnRixFQUFZQyxXQUFXTyxFQUFRdlAsTUFBTStKLEdBQUdrRixRQUFRLElBQUksSUFBSUEsUUFBUSxJQUFJLEtBRWhFRixHQUFhSSxFQUFhLENBRTFCblAsRUFBUXVQLEVBQVF2UCxNQUFNK0osR0FDdEJ5RixFQUFZRCxFQUFRclAsU0FBUzZKLEVBRTdCLE9BNEJaLEdBcEJBNkUsR0FBZ0IsMkNBRVFFLFFBQXBCUyxFQUFRRSxVQUE2QyxJQUFwQkYsRUFBUUUsV0FFekNiLEdBQWdCLGdDQUFpQ1csRUFBUUUsU0FBVSxXQUl2RWIsR0FBZ0IscUpBSXdCVyxFQUFRRyxXQUFZLG9FQUFxRUgsRUFBUUksUUFBUyw4TUFNbEVKLEVBQVFHLFdBQVksS0FBTUgsRUFBUUssTUFBTyxZQUVyR2QsUUFBaEJTLEVBQVFNLEtBQW9CLENBRTVCakIsR0FBZ0Isb0JBRWhCLEtBQUssR0FBSTdFLEdBQUksRUFBR0EsR0FBS3dGLEVBQVFNLEtBQUtDLFdBQVcsRUFBRy9GLElBQzVDNkUsR0FBZSxhQUFjakQsRUFBZSxvREFHaERpRCxJQUFlLFlBQWFXLEVBQVFNLEtBQUtFLFdBQVksMkJBQTRCUixFQUFRTSxLQUFLRyxhQUFjLDZEQWNoSCxHQVJBcEIsR0FBZSwwSUFRb0JFLFFBQS9CUyxFQUFRVSxRQUFRQyxhQUEyRCxJQUEvQlgsRUFBUVUsUUFBUUMsWUFBb0IsQ0FFaEZ0QixHQUFlLDZGQUlmLEtBQUssR0FBSTdFLEdBQUksRUFBR0EsR0FBS3dGLEVBQVFVLFFBQVFDLFlBQVloSixPQUFPLEVBQUc2QyxJQUN2RDZFLEdBQWUsT0FBUVcsRUFBUVUsUUFBUUMsWUFBWW5HLEdBQUksT0FHM0Q2RSxJQUFlLGtEQVVuQixHQUpBQSxHQUFlLDZGQUlzQkUsUUFBakNTLEVBQVFVLFFBQVFFLGVBQStELElBQWpDWixFQUFRVSxRQUFRRSxjQUFzQixDQUVwRnZCLEdBQWUsMExBTWYsS0FBSyxHQUFJN0UsR0FBSSxFQUFHQSxHQUFLd0YsRUFBUVUsUUFBUUUsY0FBY0MsS0FBS2xKLE9BQU8sRUFBRzZDLElBQzlENkUsR0FBZSxxQkFBdUIsSUFBSVcsRUFBUVUsUUFBUUUsY0FBY0MsS0FBS2xKLE9BQVMsTUFBT3FJLEVBQVFVLFFBQVFFLGNBQWNDLEtBQUtyRyxHQUFJLFFBRXhJNkUsSUFBZSx5SEFJZixLQUFLLEdBQUk3RSxHQUFJLEVBQUdBLEdBQUt3RixFQUFRVSxRQUFRRSxjQUFjRixRQUFRL0ksT0FBTyxFQUFHNkMsSUFDakU2RSxHQUFlLHFCQUF1QixJQUFJVyxFQUFRVSxRQUFRRSxjQUFjQyxLQUFLbEosT0FBUyxNQUFPcUksRUFBUVUsUUFBUUUsY0FBY0YsUUFBUWxHLEdBQUksUUFFM0k2RSxJQUFlLHlIQVVmQSxHQUZhRSxRQUFiVSxHQUF1QyxJQUFiQSxFQUVYLHVNQUl5QkEsRUFBVyxVQUFXeFAsRUFBTyw2REFNdEQsa01BSW9CQSxFQUFPLDZEQU05QzRPLEdBQWUsWUFBYVcsRUFBUUcsV0FBWSxrUkFnQnBEZCxHQUFnQixTQUVoQjdSLEVBQUUsbUJBQW1Ca1IsS0FBS1csR0FFMUJWLEtBR0p4QixFQUFrQixXQUVkbkMsRUFBUzhGLFFBQ1Q5RixFQUFXeE4sRUFBRXVULE1BQ1RDLElBQUtqRyxFQUNMN0ssTUFDSStRLE9BQVMsd0JBQ1RqRSxNQUFPaEIsRUFBYXBCLE1BQ3BCc0csWUFBYWhGLEVBQWF0QixNQUMxQnVHLFlBQWFoRixFQUFhdkIsTUFDMUJvRSxZQUFhL0MsRUFBaUJyQixNQUM5QndHLFdBQVlsVCxFQUFLZ0MsS0FBSyxlQUN0Qm1SLHFCQUFzQnhGLEVBQXNCeUYsYUFFaERDLFNBQVUsT0FDVkMsS0FBTSxNQUNOQyxRQUFTLFNBQVdDLEdBRWhCeEMsRUFBbUJ3QyxHQUNuQjlDLEVBQW1COEMsSUFHdkJDLE1BQU8sU0FBVTFHLEdBQ3FCLFNBQTdCQSxFQUFlMkcsWUFDaEIzRCxRQUFRQyxJQUFJLGFBTTVCQyxFQUFpQixTQUFTOU4sRUFBTTJNLEVBQU82RSxFQUFXOUQsR0FFOUMsR0FBaUIsU0FBYjhELEVBRUF2RixFQUFVak0sSUFBUzJNLE9BR2hCLElBQWlCLFVBQWI2RSxFQUVNLEdBQVQ3RSxFQUVBVixFQUFVak0sSUFBUzJNLFNBSVpWLEdBQVVqTSxPQU9yQixJQUFJd1IsRUFFRCxHQUFJdkYsRUFBVXdGLGVBQWV6UixHQUV6QixHQUF1QixHQUFuQjBOLEVBRUF6QixFQUFVak0sSUFBUzJNLE9BSW5CLEtBQUssR0FBSWdCLEtBQVExQixHQUVUMEIsR0FBUTNOLEdBRVJpTSxFQUFVMEIsR0FBTTJCLEtBQUszQyxPQVVqQ1YsR0FBVWpNLElBQVMyTSxPQUluQixDQUVKLElBQUssR0FBSWdCLEtBQVExQixHQUViLEdBQUkwQixHQUFRM04sRUFBTyxDQUVmLEdBQUltSyxHQUFJOEIsRUFBVTBCLEdBQU0rRCxRQUFRL0UsRUFFN0J4QyxRQUVDOEIsRUFBVTBCLEdBQU1nRSxPQUFPeEgsRUFBRyxHQVFSLEdBQTFCOEIsRUFBVWpNLEdBQU1zSCxjQUVUMkUsR0FBVWpNLEdBUTVCLEdBQUk0UixHQUFZLEdBQ1pDLEVBQVksR0FDWkMsRUFBVSxHQUNWQyxJQUVKLEtBQUssR0FBSUMsS0FBTy9GLEdBQVksQ0FFeEJFLElBRUEsSUFBSThGLEdBQU9oRyxFQUFXK0YsRUFFdEI3RixHQUFLbUQsS0FBTTJDLEVBRVgsS0FBSyxHQUFJOUgsR0FBSSxFQUFHQSxHQUFLZ0MsRUFBSzdFLE9BQU8sRUFBRzZDLElBRWhDMEgsRUFBWTFGLEVBQUsrRixLQUFLLElBSTFCSixHQUFVRSxFQUFNLElBQU1ILEVBRXRCRSxFQUFPekMsS0FBS3dDLEdBRVpGLEVBQVlHLEVBQU9HLEtBQUssS0FJNUJ2RyxFQUFhcEIsSUFBS3FILElBR3RCclIsRUFBUSxXQUNKakMsSUFFSVQsRUFBS2dCLFNBQVMsa0JBRWRnTyxJQUNBQyxLQVVadk07Q0M5NkJSLFdBRUlwRCxFQUFFLFdBRUVBLEVBQUUsV0FBV0MsS0FBSyxXQUVkLEdBQUkrVSxHQUFRaFYsRUFBRUcsVUFNdEIsSUFBSTZVLEdBQVMsU0FBVXZVLEdBR25CLEdBQUlDLEdBQU9ELEVBQ1B3VSxFQUFTdlUsRUFBS0UsS0FBSyxzQkFDbkI0TSxFQUFXLEdBQUlDLGdCQUNmRixFQUFRN00sRUFBS2dDLEtBQUssUUFDbEJ3UyxFQUFrQixFQUNsQkMsRUFBYSxFQUNiQyxFQUFhSCxFQUFPN0gsTUFDcEJpSSxFQUFVM1UsRUFBS0UsS0FBSyxtQkFJcEJPLEVBQWEsV0FFVDhULEVBQU83VCxJQUNIa1UsTUFBTyxTQUFTQyxHQUVaLEdBQUl2VixFQUFFZSxRQUFRRyxTQUFXLEtBRXJCLE9BQU9xVSxFQUFFQyxTQUNMLElBQUssSUFFaUUsR0FBOURILEVBQVF6VSxLQUFLLHFCQUFxQnVILE9BQU8sV0FBV2dDLFFBQ3BEekosRUFBS0UsS0FBSyxRQUFRaVEsUUFHdEIsTUFDSixLQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDRCxLQUNKLFNBRUksR0FBSXVFLEdBQWFwVixFQUFFRyxNQUFNaU4sS0FHckJnSSxHQUFXakwsUUFBVXpKLEVBQUtnQyxLQUFLLFdBRS9CK1MsRUFBY3pWLEVBQUVHLE1BQU9pVixFQUFXakwsUUFLYixJQUFqQm5LLEVBQUVHLE1BQU1pTixRQUNSaUksRUFBUS9ULFlBQVksV0FDcEI0VCxFQUFrQixLQVMxQ3BQLFFBQVMsU0FBU3lQLEdBT2QsR0FMQUYsRUFBUXpVLEtBQUssa0JBQWtCc1EsS0FBSyxJQUNwQ21FLEVBQVF6VSxLQUFLLGlCQUFpQnNRLEtBQUssSUFFbkNnRSxFQUFrQixFQUVkbFYsRUFBRWUsUUFBUUcsU0FBVyxLQUVyQixPQUFRcVUsRUFBRUMsU0FDTixJQUFLLElBT0QsTUFMa0UsSUFBOURILEVBQVF6VSxLQUFLLHFCQUFxQnVILE9BQU8sV0FBV2dDLE9BQ3BEcEosT0FBTzJVLFNBQVMxUyxLQUFPdEMsRUFBS2dDLEtBQUssVUFFakMzQixPQUFPMlUsU0FBUzFTLEtBQU9xUyxFQUFRelUsS0FBSyxxQkFBcUJ1SCxPQUFPLFdBQVd2SCxLQUFLLEtBQUtrQyxLQUFLLFNBRXZGLENBR1gsS0FBSyxJQUdELE1BRkF1UyxHQUFRdkosU0FDUm9KLEVBQWtCLEdBQ1gsQ0FHWCxLQUFLLElBQ0wsSUFBSyxJQUNESyxFQUFFSSxpQkFFRVIsRUFBYSxJQUNiUyxFQUFjTCxFQUFFQyxTQUVaTixHQUFtQkMsSUFDbkJELEVBQWtCLFFBYTlDbFYsRUFBRSxRQUFRNEIsTUFBTyxXQUVieVQsRUFBUS9ULFlBQVksV0FFcEI0VCxFQUFrQixJQUd0QmxWLEVBQUVzRSxVQUFVbEQsR0FDUixRQUNBLE9BQ0EsU0FBVW1ELEdBQ05BLEVBQVFBLEdBQVN4RCxPQUFPd0QsTUFFcEJBLEVBQU1DLGdCQUNORCxFQUFNQyxrQkFFTkQsRUFBTUUsY0FBZSxJQUlqQ3pFLEVBQUVzRSxVQUFVbEQsR0FDUixRQUNBLG9CQUNBLFdBQ0ksR0FBSUksR0FBVXhCLEVBQUVHLE1BQ1ptTCxFQUFVOUosRUFBUVosS0FBSyxLQUFLZ0MsTUFFaENxUyxHQUFPN0gsSUFBSTlCLEdBQ1grSixFQUFRL1QsWUFBWSxXQUNwQjRULEVBQWtCLElBRzFCbFYsRUFBRXNFLFVBQVVsRCxHQUNSLFVBQ0Esb0JBQ0EsU0FBU21VLEdBQ0wsT0FBT0EsRUFBRUMsU0FDTCxJQUFLLElBRUR4VixFQUFFRyxNQUFNa04sUUFBUSxhQU9wQ3VJLEVBQWUsU0FBU0MsR0FFcEJSLEVBQVF6VSxLQUFLLHFCQUFxQlUsWUFBWSxVQUUxQ1osRUFBS21CLFVBQVVILFNBQVMsaUJBRWYsSUFBTG1VLEdBQVdYLEVBQWtCQyxFQUU3QkQsSUFFYSxJQUFMVyxHQUFXWCxFQUFrQixHQUVyQ0EsSUFHQUEsRUFBa0IsR0FFbEJHLEVBQVF6VSxLQUFLLHFCQUFxQitLLE9BQVV1SixFQUFrQixJQUFLdlQsU0FBUyxVQUM1RXNULEVBQU83SCxJQUFLaUksRUFBUXpVLEtBQUsscUJBQXFCK0ssT0FBVXVKLEVBQWtCLElBQUt0VSxLQUFLLEtBQUtnQyxTQUl6RnFTLEVBQU83SCxJQUFLZ0ksS0FNUCxJQUFMUyxHQUFXWCxFQUFrQkMsRUFFN0JELElBRWEsSUFBTFcsR0FBV1gsRUFBa0IsR0FFckNBLElBR0FBLEVBQWtCLEdBRWxCRyxFQUFRelUsS0FBSyxxQkFBcUIrSyxHQUFJdUosRUFBa0IsR0FBSXZULFNBQVMsVUFDckVzVCxFQUFPN0gsSUFBS2lJLEVBQVF6VSxLQUFLLHFCQUFxQitLLEdBQUl1SixFQUFrQixHQUFJdFUsS0FBSyxLQUFLZ0MsU0FJbEZxUyxFQUFPN0gsSUFBS2dJLEtBUXhCVSxFQUFXLFNBQVVwVCxHQUVqQixHQUFJQSxHQUFPQSxFQUNQcVQsRUFBYXJULEVBQUtxVCxXQUNsQkMsRUFBOEMsR0FBckJELEVBQVc1TCxPQUNwQ3lILEVBQVdsUCxFQUFLa1AsU0FDaEJxRSxFQUEwQyxHQUFuQnJFLEVBQVN6SCxPQUNoQytMLEtBQ0FDLEtBRUFDLEdBQU8sQ0FFWCxJQUFJSCxFQUF1QixDQUV2QixHQUFJcEUsR0FBZSxrQ0FFbkI3UixHQUFFQyxLQUFNMlIsRUFBVSxXQUVkLEdBQUlZLEdBQVVyUyxJQUVkMFIsSUFBZ0Isd01BSTJFVyxFQUFRelAsSUFBSywySkFJbEN5UCxFQUFRclAsU0FBVSxVQUFXcVAsRUFBUXZQLE1BQU8sbUdBRTlDdVAsRUFBUTNQLEtBQU0scUVBRTFDMlAsRUFBUXhQLEtBQU0sK0lBS2pEZ1QsR0FFREUsRUFBeUIvRCxNQUFPSyxFQUFRdUQsV0FBV00sYUFBYzdELEVBQVF1RCxXQUFXTyxnQkFBaUI5RCxFQUFRdUQsV0FBV1EsY0FBZS9ELEVBQVF1RCxXQUFXUyxxQkFNbEszRSxHQUFnQixTQUVoQndELEVBQVF6VSxLQUFLLE9BQU8rSyxHQUFHLEdBQUcvSyxLQUFLLGlCQUFpQnNRLEtBQUssb0RBQXNEVyxFQUUzRyxJQUFJNEUsR0FBWSw0QkFFaEIsSUFBSVQsRUFFQWhXLEVBQUVDLEtBQU04VixFQUFZLFdBRWhCLEdBQUlRLEdBQWdCcFcsS0FBS29XLGNBQ3JCQyxFQUFtQnJXLEtBQUtxVyxpQkFDeEJFLEVBQW9CLEVBRXhCLElBQXFCM0UsUUFBakJ3RSxFQUE2QixDQUU3QixJQUFLLEdBQUl2SixHQUFJLEVBQUdBLEdBQUt1SixFQUFjcE0sT0FBTyxFQUFHNkMsSUFFekMwSixHQUFxQiwwQ0FBMkNGLEVBQWlCeEosR0FBSSxLQUFPdUosRUFBY3ZKLEdBQUssV0FHbkgwSixJQUFxQixHQUl6QkQsR0FBYSxnQkFBaUJ0VyxLQUFLd1csWUFBYSxLQUFNeFcsS0FBSzBDLEtBQU0sWUFBYTZULFFBSS9FLENBRUgsSUFBTSxHQUFJMUosR0FBSSxFQUFHQSxHQUFLa0osRUFBeUIvTCxPQUFPLEVBQUc2QyxJQU9yRCxHQUxJb0osSUFDQUQsRUFBc0JoRSxLQUFLK0QsRUFBeUJsSixJQUNwRG9KLEdBQU8sR0FHUEQsRUFBc0JBLEVBQXNCaE0sT0FBTyxHQUFHLElBQU0rTCxFQUF5QmxKLEdBQUcsR0FFeEZtSixFQUFzQmhFLEtBQUsrRCxFQUF5QmxKLFFBSXBELEtBQU0sR0FBSTRKLEdBQUksRUFBR0EsR0FBS1YsRUFBeUJsSixHQUFHN0MsT0FBTyxFQUFHeU0sSUFFeEQsSUFBTSxHQUFJQyxHQUFJLEVBQUdBLEdBQUtYLEVBQXlCbEosR0FBRyxHQUFHN0MsT0FBTyxFQUFHME0sSUFFdkRWLEVBQXNCQSxFQUFzQmhNLE9BQU8sR0FBRyxHQUFHb0ssUUFBUzJCLEVBQXlCbEosR0FBRyxHQUFHNkosU0FFakdWLEVBQXNCQSxFQUFzQmhNLE9BQU8sR0FBRyxHQUFHZ0ksS0FBTStELEVBQXlCbEosR0FBRyxHQUFHNkosR0FjbEgsS0FBTSxHQUZGQyxHQUFRLEVBRUY5SixFQUFJLEVBQUdBLEdBQUttSixFQUFzQmhNLE9BQU8sRUFBRzZDLElBQU0sQ0FFeEQsSUFBTSxHQUFJNEosR0FBSSxFQUFHQSxHQUFLVCxFQUFzQm5KLEdBQUc3QyxPQUFPLEVBQUd5TSxJQUFNLENBSTNELElBQUssR0FGREYsR0FBb0IsR0FFZkcsRUFBSSxFQUFHQSxHQUFLVixFQUFzQm5KLEdBQUcsR0FBRzdDLE9BQU8sRUFBRzBNLElBRXZESCxHQUFxQiwwQ0FBNENQLEVBQXNCbkosR0FBRyxHQUFHNkosR0FBSyxLQUFPVixFQUFzQm5KLEdBQUcsR0FBRzZKLEdBQUssWUFDMUlDLEdBSUpKLElBQXFCLEdBSXpCRCxHQUFhLGdCQUFrQk4sRUFBc0JuSixHQUFHLEdBQUssS0FBT21KLEVBQXNCbkosR0FBRyxHQUFLLFlBQWEwSixHQU12SEQsR0FBYSxRQUVicEIsRUFBUXpVLEtBQUssYUFBYXNRLEtBQUt1RixHQUUvQnBCLEVBQVF6VSxLQUFLLGtCQUFrQkEsS0FBSyxtQkFBbUJrTCxTQUV2RHFKLEVBQWFFLEVBQVF6VSxLQUFLLGtCQUFrQkEsS0FBSyxNQUFNdUosT0FFdkRrTCxFQUFRMVQsU0FBUyxlQUlqQjBULEdBQVEvVCxZQUFZLFlBSTVCbVUsRUFBZ0IsU0FBVXNCLEVBQU9sQixHQXlCN0IsTUF2QkFySSxHQUFTOEYsUUFDVDlGLEVBQVd4TixFQUFFdVQsTUFDVEMsSUFBS2pHLEVBQ0w3SyxNQUNJOE0sTUFBT3VILEVBQU0zSixNQUNicUcsT0FBTyxlQUVYTSxTQUFVLE9BQ1ZDLEtBQU0sTUFDTkMsUUFBUyxTQUFXK0MsR0FFZSxHQUEzQkMsT0FBT0MsS0FBS0YsR0FBSzdNLFFBQ2pCMkwsRUFBVWtCLElBSWxCN0MsTUFBTyxTQUFVMUcsR0FDb0IsU0FBN0JBLEVBQWUyRyxZQUNmM0QsUUFBUUMsSUFBSSxhQUtqQixHQUVYdE4sRUFBUSxXQUNKakMsSUFPUmlDIiwiZmlsZSI6ImNhdGVnb3J5Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICB2YXIgZ2xvYmFsU2Nyb2xsRmxhZyA9IHRydWU7XHJcblxyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICQoJy5zaXRlX19tZW51JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgU3ViTWVudSggJCh0aGlzKSApO1xyXG4gICAgICAgICAgICBuZXcgTWVudSggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQoJy5ub3QtZm91bmQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBGdWxsSGVpZ2h0KCAkKHRoaXMpICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJCgnLmNvbmZpcm1hdGlvbicpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEZ1bGxIZWlnaHQoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkKCcjd3BzbC1zdG9yZXMnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICQodGhpcykucGVyZmVjdFNjcm9sbGJhcih7XHJcbiAgICAgICAgICAgICAgICB3aGVlbFByb3BhZ2F0aW9uOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQoJy5jaGVja291dCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IENoZWNrb3V0SGVpZ2h0KCAkKHRoaXMpICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIFN1Yk1lbnUgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9pdGVtcyA9IF9vYmouZmluZCgnLnNpdGVfX21lbnUtaXRlbScpLFxyXG4gICAgICAgICAgICBfYXJyb3cgPSBfb2JqLmZpbmQoJy5zaXRlX19tZW51LWljb24nKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcclxuICAgICAgICAgICAgdGltZW91dCA9IG51bGwsXHJcbiAgICAgICAgICAgIF9zdGFydFdpbldpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG5cclxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3N0YXJ0V2luV2lkdGggPiBfd2luZG93LndpZHRoKCkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N0YXJ0V2luV2lkdGggPSBfd2luZG93LndpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dpbmRvdy5maW5kKCcub3BlbmVkJykucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAkKCdib2R5Jykub24oJ2NsaWNrJywgJy5zaXRlX19tZW51LWljb24nLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGpRdWVyeSh3aW5kb3cpLndpZHRoKCkgPCAxMDAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSBqUXVlcnkodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgnbGknKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFyZW50Lmhhc0NsYXNzKCdvcGVuZWQnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYWRkQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIF9hcnJvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGpRdWVyeSh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50cygnbGknKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUgPSBwYXJlbnQuZmluZCgnLnNpdGVfX21lbnUtc3ViJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFyZW50Lmhhc0NsYXNzKCdvcGVuZWQnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51LnNsaWRlVXAoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYWRkQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuc2xpZGVEb3duKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2l0ZW1zLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50KCd1bCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmhhc0NsYXNzKCdzaXRlX19tZW51LWl0ZW1fc3ViJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViTWVudSA9IGN1ckl0ZW0uZmluZCgnLnNpdGVfX21lbnUtc3ViJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoIF93aW5kb3cud2lkdGgoKSAtICggc3ViTWVudS5pbm5lcldpZHRoKCkgKyBjdXJJdGVtLm9mZnNldCgpLmxlZnQgKSApIDwgMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoICggY3VySXRlbS5vZmZzZXQoKS5sZWZ0ICsgY3VySXRlbS5pbm5lcldpZHRoKCkgKSAtIHN1Yk1lbnUuaW5uZXJXaWR0aCgpICkgPCAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJzUwJScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoLTUwJSknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgtNTAlKSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjdXJJdGVtLnBvc2l0aW9uKCkubGVmdCAtIHN1Yk1lbnUuaW5uZXJXaWR0aCgpICsgY3VySXRlbS5pbm5lcldpZHRoKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlICB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51LmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogY3VySXRlbS5wb3NpdGlvbigpLmxlZnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAkKCdbZGF0YS1wcm9kdWN0XScpLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmZlYXR1cmVkLXByb2R1Y3RfX2xvYWRpbmcnKS5hZGRDbGFzcygndmlzaWJsZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gY3VySXRlbS5kYXRhKCdwcm9kdWN0Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiggJCgnLmZlYXR1cmVkLXByb2R1Y3RfX2xvYWRpbmcnKS5oYXNDbGFzcygndmlzaWJsZScpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3RpdGxlJykudGV4dChkYXRhLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3BpYyBpbWcnKS5hdHRyKCdzcmMnLCBkYXRhLnNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuYnRuJykuYXR0cignaHJlZicsIGRhdGEuaHJlZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2Ugc3BhbicpLnRleHQoZGF0YS5wcmljZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggZGF0YS5vblNhbGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3JlbWFyaycpLmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3JlbWFyaycpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkYXRhLm9sZFByaWNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZSBkZWwnKS50ZXh0KGRhdGEub2xkUHJpY2UgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2UgZGVsJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDE2MCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fbG9hZGluZycpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9vYmouZmluZCgndWwnKS5vbiggJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5vcGVuZWQnKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJ2xpJykub24oICdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIE1lbnUgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX21lbnUgPSBvYmosXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIF9hY3Rpb24gPSBmYWxzZSxcclxuICAgICAgICAgICAgX2FjdGlvblNjcm9sbCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfbGFzdFBvcyxcclxuICAgICAgICAgICAgX2hlYWRlciA9ICQoJy5zaXRlX19oZWFkZXInKSxcclxuICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudSA9ICQoJy5zaXRlX19oaWRkZW4taXRlbXMnKSxcclxuICAgICAgICAgICAgX2hlYWRlckhlaWdodCA9IF9oZWFkZXIuaW5uZXJIZWlnaHQoKSxcclxuICAgICAgICAgICAgX3Nob3dCdG4gPSAkKCcuc2l0ZV9faGVhZGVyLWJ0bicpLFxyXG4gICAgICAgICAgICBfY2xvc2VCdG4gPSAkKCcuc2l0ZV9faGlkZGVuLWNsb3NlJyksXHJcbiAgICAgICAgICAgIF9zZWFyY2ggPSAkKCcuc2VhcmNoJyksXHJcbiAgICAgICAgICAgIF9vcGVuU2VhcmNoID0gJCgnLnNlYXJjaC1idG4nKSxcclxuICAgICAgICAgICAgX2Nsb3NlU2VhcmNoID0gJCgnLnNlYXJjaF9fY2FuY2VsJyksXHJcbiAgICAgICAgICAgIF9nZXRGcmVlID0gJCgnLnNpdGVfX2hpZGRlbi1idG4nKSxcclxuICAgICAgICAgICAgX3NpdGUgPSAkKCcuc2l0ZScpLFxyXG4gICAgICAgICAgICBfZG9tID0gJCggJ2h0bWwnICksXHJcbiAgICAgICAgICAgIHNpdGVTY3JvbGxUb3AsXHJcbiAgICAgICAgICAgIF9jb250ZW50ID0gJCgnLnNpdGVfX2NvbnRlbnQnKSxcclxuICAgICAgICAgICAgX2xhc3RTY3JvbGxUb3AgPSAwO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICAgICAgICBcIi5zZWFyY2hcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiggZXZlbnQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICAgICAgICBcImJvZHlcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Nob3dCdG4ub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb3Blbk1lbnUoJCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX2Nsb3NlQnRuLm9uKHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIF9vcGVuU2VhcmNoLm9uKHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5TZWFyY2hCb3goJCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoLm9uKHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZnVuY3Rpb24gKCBlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZml4ZWRIZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbiA9IF93aW5kb3cuc2Nyb2xsVG9wKCkgPj0gX2hlYWRlckhlaWdodDtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy5zY3JvbGxUb3AoKSA9PSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5yZW1vdmVDbGFzcygnc2l0ZV9faGVhZGVyX2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgRE9NTW91c2VTY3JvbGw6IGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQuZGV0YWlsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKGRlbHRhID4gMCkgPyAxIDogLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKGRpcmVjdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2V3aGVlbDogZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKGRlbHRhID4gMCkgPyAtMSA6IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKGRpcmVjdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG91Y2htb3ZlOiBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3MgPSBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3MgPiBfbGFzdFBvcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UG9zIDwgX2xhc3RQb3MpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGFzdFBvcyA9IGN1cnJlbnRQb3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAga2V5ZG93bjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM0IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM1IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM2IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpPj0xMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaXRlLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3NpdGUuaGVpZ2h0KCkgPiBfd2luZG93LmhlaWdodCgpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZG9tLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93LXknOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NoZWNrU2Nyb2xsID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPiAwICYmICFfaGVhZGVyLmhhc0NsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJykgJiYgIV9zaG93QnRuLmhhc0NsYXNzKCdvcGVuZWQnKSAmJiBfYWN0aW9uICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLmFkZENsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPCAwICYmIF9oZWFkZXIuaGFzQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKSAmJiAhX3Nob3dCdG4uaGFzQ2xhc3MoJ29wZW5lZCcpICYmIF9hY3Rpb24gJiYgZ2xvYmFsU2Nyb2xsRmxhZykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLnJlbW92ZUNsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2ZpeGVkSGVhZGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfd2luZG93LnNjcm9sbFRvcCgpID4gX2hlYWRlckhlaWdodCArIDE1MCAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoJ2ZpeGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIucmVtb3ZlQ2xhc3MoJ2ZpeGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29wZW5NZW51ID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGVsZW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1ckl0ZW0uaGFzQ2xhc3MoJ29wZW5lZCcpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9oaWRkZW5CbG9ja01lbnUucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9oaWRkZW5CbG9ja01lbnUuYWRkQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzaXRlU2Nyb2xsVG9wID0gX3dpbmRvdy5zY3JvbGxUb3AoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfc2l0ZS5oZWlnaHQoKSA+IF93aW5kb3cuaGVpZ2h0KCkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdzY3JvbGwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3NpdGUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDMwMCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb3BlblNlYXJjaEJveCA9IGZ1bmN0aW9uIChlbGVtKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSBlbGVtO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJJdGVtLmhhc0NsYXNzKCdvcGVuZWQnKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBfc2VhcmNoLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBfZ2V0RnJlZS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NlYXJjaC5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2dldEZyZWUuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jbG9zZU1lbnUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Nob3dCdG4ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICBfc2VhcmNoLmZpbmQoJ2lucHV0JykuZm9jdXNvdXQoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgX3NpdGUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcnXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfc2l0ZS5oZWlnaHQoKSA+IF93aW5kb3cuaGVpZ2h0KCkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF93aW5kb3cuc2Nyb2xsVG9wKCBzaXRlU2Nyb2xsVG9wICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMTApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vcGVuU2VhcmNoLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgIF9zZWFyY2gucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgX2dldEZyZWUucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfbWVudVswXS5vYmogPSBfc2VsZjtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9maXhlZEhlYWRlcigpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuICAgIHZhciBGdWxsSGVpZ2h0ID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxyXG4gICAgICAgICAgICBfZ2xvYmFsV2luV2lkdGggPSBfd2luZG93LndpZHRoKCk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX2dsb2JhbFdpbldpZHRoICE9IF93aW5kb3cud2lkdGgoKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2luV2lkdGggPSBfd2luZG93LndpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiAnJ1xyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6IF93aW5kb3cuaGVpZ2h0KCkgLSAkKCcuc2l0ZV9faGVhZGVyJykuaW5uZXJIZWlnaHQoKSAtICQoJy5zaXRlX19mb290ZXInKS5pbm5lckhlaWdodCgpIC0gJCgnLmJyZWFkY3J1bWJzJykuaW5uZXJIZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuICAgIHZhciBDaGVja291dEhlaWdodCA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3RvdGFsT3JkZXIgPSBfb2JqLmZpbmQoJy50b3RhbC1vcmRlcicpO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG5cclxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogX3RvdGFsT3JkZXIuaW5uZXJIZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAkKCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAkKCAnLnBvcHVwJyApLmVhY2goZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgIG5ldyBQb3B1cCgkKHRoaXMpKTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIFBvcHVwID0gZnVuY3Rpb24oIG9iaiApe1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9wb3B1cFBhZGRpbmcgPSA0MCxcclxuICAgICAgICAgICAgX2J0blNob3cgPSAgJCggJy5wb3B1cF9fb3BlbicgKSxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2J0bkNsb3NlID0gX29iai5maW5kKCAnLnBvcHVwX19jbG9zZSwgLnBvcHVwX19jYW5jZWwnICksXHJcbiAgICAgICAgICAgIF93cmFwID0gX29iai5maW5kKCAnLnBvcHVwX193cmFwJyApLFxyXG4gICAgICAgICAgICBfY29udGVudHMgPSBfb2JqLmZpbmQoICcucG9wdXBfX2NvbnRlbnQnICksXHJcbiAgICAgICAgICAgIF9zY3JvbGxDb250ZWluZXIgPSAkKCAnaHRtbCcgKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxyXG4gICAgICAgICAgICBfdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe30sIDEgKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2NlbnRlcldyYXAgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgaWYgKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApIC0gX3dyYXAuaGVpZ2h0KCkgPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6ICggKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApICkgLSBfd3JhcC5oZWlnaHQoKSApIC8gMiB9ICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6IDAgfSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfZ2V0U2Nyb2xsV2lkdGggPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyksXHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9ICdwb3B1cF9fc2Nyb2xsYmFyLW1lYXN1cmUnO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIHNjcm9sbERpdiApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNjcm9sbEJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsQmFyV2lkdGg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9oaWRlID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lci5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDBcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfb3BlbmVkJyApO1xyXG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3BvcHVwX2hpZGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3RpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX29iai5jc3MgKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bydcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3BvcHVwX2hpZGUnICk7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NlbnRlcldyYXAoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfYnRuU2hvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2hvdyggJCggdGhpcyApLmF0dHIoICdkYXRhLXBvcHVwJyApICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfY29udGVudHMuZmluZCgnPmRpdicpLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCBlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX29iai5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2J0bkNsb3NlLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zaG93ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xyXG4gICAgICAgICAgICAgICAgX3NldFBvcHVwQ29udGVudCggY2xhc3NOYW1lICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lci5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogX2dldFNjcm9sbFdpZHRoKClcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XHJcbiAgICAgICAgICAgICAgICBfY2VudGVyV3JhcCgpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldFBvcHVwQ29udGVudCA9IGZ1bmN0aW9uKCBjbGFzc05hbWUgKXtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJDb250ZW50ID0gX2NvbnRlbnRzLmZpbHRlciggJy5wb3B1cF9fJyArIGNsYXNzTmFtZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9jb250ZW50cy5jc3MoIHsgZGlzcGxheTogJ25vbmUnIH0gKTtcclxuICAgICAgICAgICAgICAgIGN1ckNvbnRlbnQuY3NzKCB7IGRpc3BsYXk6ICdibG9jaycgfSApO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG59ICkoKTtcclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG4oIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcucHJvZHVjdF9fc2xpZGVyJyApLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBQcm9kdWN0U2xpZGVyICggJCggdGhpcyApICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLmZlYXR1cmVkLXByb2R1Y3RzJyApLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBGZWF0dXJlZFByb2R1Y3RzU2xpZGVyICggJCggdGhpcyApICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBQcm9kdWN0U2xpZGVyID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfb2JqID0gb2JqO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcclxuICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0U2xpZGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICQoJy5zbGlkZXItZm9yJykuc2xpY2soIHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYXNOYXZGb3I6ICcuc2xpZGVyLW5hdidcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJCgnLnNsaWRlci1uYXYnKS5zbGljaygge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNCxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXNOYXZGb3I6ICcuc2xpZGVyLWZvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTM2MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA0MTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBfY29uc3RydWN0b3IoKTtcclxuICAgIH07XHJcbiAgICB2YXIgRmVhdHVyZWRQcm9kdWN0c1NsaWRlciA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3NsaWRlcixcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcclxuICAgICAgICAgICAgX2ZsYWcsXHJcbiAgICAgICAgICAgIF9wYWdpbmF0aW9uID0gX29iai5maW5kKCcuc3dpcGVyLXBhZ2luYXRpb24nKSxcclxuICAgICAgICAgICAgX3ByZXYgPSBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLXByZXYnKSxcclxuICAgICAgICAgICAgX25leHQgPSBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLW5leHQnKSxcclxuICAgICAgICAgICAgX2xvb3AgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XHJcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8PSA3NjggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9mbGFnID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDw9IDc2OCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX2ZsYWcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3koKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhX2ZsYWcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5pdFNsaWRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9zbGlkZXIuc2xpY2soJ3Vuc2xpY2snKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0U2xpZGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9hZGRTb21lUGFyYW1zKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3NsaWRlciA9ICQoJy5mZWF0dXJlZC1wcm9kdWN0c19fd3JhcHBlcicpLnNsaWNrKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogNTAwMCxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2QXJyb3c6IF9wcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRBcnJvdzogX25leHQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kRG90czogIF9wYWdpbmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTQ0MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWRkU29tZVBhcmFtcyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RzX19zbGlkZScpLmxlbmd0aCA+PSA0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3AgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlICBpZiggX3dpbmRvdy53aWR0aCgpID49IDE0MjUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0c19fc2xpZGUnKS5sZW5ndGggPj0gNSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZighX2xvb3ApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdHNfX2NvbnRyb2xzJykuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpO1xyXG4iLCIoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJCggZnVuY3Rpb24oKXtcclxuICAgICAgICAkKCAnc2VsZWN0JyApLmVhY2goIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIG5ldyBXZWJzdGVyc1NlbGVjdCgge1xyXG4gICAgICAgICAgICAgICAgb2JqOiAkKCB0aGlzICksXHJcbiAgICAgICAgICAgICAgICBvcHRpb25UeXBlOiAxLFxyXG4gICAgICAgICAgICAgICAgc2hvd1R5cGU6IDJcclxuICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIFdlYnN0ZXJzU2VsZWN0ID0gZnVuY3Rpb24oIHBhcmFtcyApe1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9vYmogPSBwYXJhbXMub2JqLFxyXG4gICAgICAgICAgICBfb3B0aW9uVHlwZSA9IHBhcmFtcy5vcHRpb25UeXBlIHx8IDAsXHJcbiAgICAgICAgICAgIF9zaG93VHlwZSA9IHBhcmFtcy5zaG93VHlwZSB8fCAwLFxyXG4gICAgICAgICAgICBfdmlzaWJsZSA9IHBhcmFtcy52aXNpYmxlIHx8IDUsXHJcbiAgICAgICAgICAgIF9kZXZpY2UgPSAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQgKSxcclxuICAgICAgICAgICAgX3RleHQgPSAkKCAnPHNwYW4gY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX2l0ZW1cIj48L3NwYW4+JyApLFxyXG4gICAgICAgICAgICBfd3JhcCA9ICQoICc8ZGl2IGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0XCI+PC9kaXY+JyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXHJcbiAgICAgICAgICAgIF9ib2R5ID0gJCggJ2JvZHknICksXHJcbiAgICAgICAgICAgIF9vcGVuZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgX3BvcHVwLCBfc2Nyb2xsO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfYWRkV3JhcCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VyVGV4dCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmoud3JhcCggX3dyYXAgKTtcclxuICAgICAgICAgICAgICAgIF93cmFwID0gX29iai5wYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgIF93cmFwLmFwcGVuZCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX2Fycm93XCI+PC9kaXY+JyApO1xyXG4gICAgICAgICAgICAgICAgX29iai5iZWZvcmUoIF90ZXh0ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmZpbmQoICdvcHRpb24nICkuZWFjaCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0uYXR0ciggJ3NlbGVjdGVkJyApID09ICdzZWxlY3RlZCcgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9IGN1ckl0ZW0udGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggY3VyVGV4dCA9PSAnJyApe1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clRleHQgPSAgX29iai5maW5kKCAnb3B0aW9uJykuZXEoIDAgKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGV4dC50ZXh0KCBjdXJUZXh0ICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9oaWRlUG9wdXAgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29wZW5lZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCAhX3Nob3dUeXBlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAxICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnN0b3AoIHRydWUsIGZhbHNlICkuc2xpZGVVcCggMzAwLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMiApIHtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc3RvcCggdHJ1ZSwgZmFsc2UgKS5mYWRlT3V0KCAzMDAsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3dyYXAucmVtb3ZlQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3Rfb3BlbmVkJyApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcclxuXHJcbiAgICAgICAgICAgICAgICBfYWRkV3JhcCgpO1xyXG4gICAgICAgICAgICAgICAgX3NlbGVjdFZpZXdUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vYmoub24oICdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGV4dC50ZXh0KCAkKCB0aGlzICkuZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS50ZXh0KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImNoYW5nZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic2VsZWN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMpLnByZXYoKS50ZXh0KCAkKCB0aGlzICkuZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS50ZXh0KCkgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfb3B0aW9uVHlwZSA9PSAxICYmICFfZGV2aWNlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAub24oIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oIGUgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93UG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfYm9keS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGwnOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NlbGVjdFZpZXdUeXBlID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggIV9vcHRpb25UeXBlIHx8IF9kZXZpY2UgKXtcclxuICAgICAgICAgICAgICAgICAgICBfc2V0TW9iaWxlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfb3B0aW9uVHlwZSA9PSAxICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NldEN1c3RvbTEoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldEN1c3RvbTEgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3RfY3VzdG9tJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0TW9iaWxlVmlldyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9tb2JpbGUnICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zaG93UG9wdXAgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdHMgPSAkKCAnc2VsZWN0JyApLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgPSAkKCAnPHVsPjwvdWw+JyksXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyU2Nyb2xsID0gX3dpbmRvdy5zY3JvbGxUb3AoKSxcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBfd3JhcC5vZmZzZXQoKSxcclxuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckluZGV4ID0gX29iai5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLmluZGV4KCksXHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBNYXRoLnJvdW5kKCBNYXRoLnJhbmRvbSgpICogMTAwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGVjdHMuZWFjaCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcyAhPT0gX29ialsgMCBdICYmIHRoaXMub2JqLmNoZWNrT3BlbmVkKCkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmouY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfb3BlbmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXAgPSAkKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9fcG9wdXBcIiBpZD1cIndlYnN0ZXJzLXNlbGVjdF9fcG9wdXAnICsgaWQgKyAnXCI+PC9kaXY+JyApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouZmluZCggJ29wdGlvbicgKS5lYWNoKCBmdW5jdGlvbiggaSApe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCggdGhpcyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBjdXJJbmRleCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZCggJzxsaSBjbGFzcz1cImFjdGl2ZVwiPicgKyBjdXJJdGVtLnRleHQoKSArICc8L2xpPicgKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZCggJzxsaT4nICsgY3VySXRlbS50ZXh0KCkgKyAnPC9saT4nICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXAuYXBwZW5kKCBsaXN0ICk7XHJcbiAgICAgICAgICAgICAgICBfYm9keS5hcHBlbmQoIF9wb3B1cCApO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3Rfb3BlbmVkJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogX3dyYXAub3V0ZXJXaWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogb2Zmc2V0LnRvcCArIF93cmFwLm91dGVySGVpZ2h0KClcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSBfcG9wdXAub3V0ZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIGlmKCBtYXhIZWlnaHQgPiBfcG9wdXAuZmluZCggJ2xpJyApLmVxKCAwICkub3V0ZXJIZWlnaHQoKSAqIF92aXNpYmxlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmhlaWdodCggX3BvcHVwLmZpbmQoICdsaScgKS5lcSggMCApLm91dGVySGVpZ2h0KCkgKiBfdmlzaWJsZSApO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zY3JvbGwgPSBfcG9wdXAucGVyZmVjdFNjcm9sbGJhcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfc2hvd1R5cGUgPT0gMSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zbGlkZURvd24oIDMwMCApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMiApIHtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuMVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuYW5pbWF0ZSggeyBvcGFjaXR5OiAxIH0sIDMwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwLmZpbmQoICdsaScgKS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCBlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICQoIHRoaXMgKS5pbmRleCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoudmFsKCBfb2JqLmZpbmQoICdvcHRpb24nICkuZXEoIGluZGV4ICkuYXR0ciggJ3ZhbHVlJyApICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoudHJpZ2dlciggJ2NoYW5nZScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG4gICAgICAgIF9zZWxmLmNoZWNrT3BlbmVkID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIF9vcGVuZWQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBfc2VsZi5jbG9zZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XHJcblxyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgJCgnLmNhdGVnb3J5JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgRmlsdGVycyggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBGaWx0ZXJzID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfcGF0aCA9ICQoJ2JvZHknKS5kYXRhKCdhY3Rpb24nKSxcclxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcclxuICAgICAgICAgICAgX2J0biA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJzLWl0ZW0gc3BhbicpLFxyXG4gICAgICAgICAgICBfYnRuMiA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJzLXRpdGxlJyksXHJcbiAgICAgICAgICAgIF9maWx0ZXJzID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtaXRlbXMnKSxcclxuICAgICAgICAgICAgX2Zvcm0gPSBfZmlsdGVycy5maW5kKCdmb3JtJyksXHJcbiAgICAgICAgICAgIF9jbG9zZUZpbHRlcnMgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQtY2xvc2UnKSxcclxuICAgICAgICAgICAgX2ZpbHRlckl0ZW0gPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVycy1saXN0JyksXHJcbiAgICAgICAgICAgIF9maWx0ZXJlZCA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJlZCcpLFxyXG4gICAgICAgICAgICBfZmlsdGVyZWRMaXN0ID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcmVkLWxpc3QnKSxcclxuICAgICAgICAgICAgX2NvdW50RmlsdGVyZWQgPSAwLFxyXG4gICAgICAgICAgICBfdGl0bGUgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVycy10aXRsZScpLFxyXG4gICAgICAgICAgICBfdGl0bGVJbm5lciA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJzLXRpdGxlLWlubmVyJyksXHJcbiAgICAgICAgICAgIF9jbGVhckZpbHRlcnMgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQgLmJ0biwgLmNhdGVnb3J5X19maWx0ZXJzLWNsZWFyJyksXHJcbiAgICAgICAgICAgIF9jbGVhclNpbmdsZSA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJlZC1yZW1vdmUnKSxcclxuICAgICAgICAgICAgX2FkZGl0aW9uYWxQYXJhbWV0ZXJzID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbmQtcGFyYW1ldGVycycpLFxyXG4gICAgICAgICAgICBfZ2xvYmFsQ2hlY2tGbGFnID0gZmFsc2UsXHJcbiAgICAgICAgICAgIF9sb2FkaW5nID0gJCgnPGRpdiBjbGFzcz1cImxvYWRpbmdcIj48L2Rpdj4nKSxcclxuICAgICAgICAgICAgX2lucHV0SGlkZGVuID0gX29iai5maW5kKCdpbnB1dFt0eXBlPWhpZGRlbl0udmFsdWUtY2hlY2snKSxcclxuICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZSA9IF9vYmouZmluZCgnaW5wdXRbdHlwZT1oaWRkZW5dLmN1cnJlbnQtcGFnZScpLFxyXG4gICAgICAgICAgICBfc29ydGluZ1BhZ2UgPSBfb2JqLmZpbmQoJyNpdGVtcy1wYWdlJyksXHJcbiAgICAgICAgICAgIF9zb3J0aW5nRGF0ZSA9IF9vYmouZmluZCgnI3NvcnRpbmctZGF0ZScpLFxyXG4gICAgICAgICAgICBfZGF0YVJhdGVQYXRoID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX3dyYXAnKS5kYXRhKCdyYXRlLXBhdGgnKSxcclxuICAgICAgICAgICAgX2FwcGx5ID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtYXBwbHknKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcclxuICAgICAgICAgICAgX29ialZhbHVlID0ge30sXHJcbiAgICAgICAgICAgIF90aW1lb3V0ID0gbnVsbCxcclxuICAgICAgICAgICAgX2FyciA9IFtdLFxyXG4gICAgICAgICAgICBfY2hlY2tOYW1lID0gJycsXHJcbiAgICAgICAgICAgIF9jaGVja1ByaWNlID0gJycsXHJcbiAgICAgICAgICAgIF9jbGVhckZsYWdTZWxlY3QgPSBmYWxzZSxcclxuICAgICAgICAgICAgX2NsZWFyRmxhZ1JhZGlvID0gZmFsc2UsXHJcbiAgICAgICAgICAgIF9wcmljZUNhdGVnb3J5ID0gX29iai5maW5kKCdpbnB1dFtuYW1lPV9wcmljZV0nKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYnRuLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzID0gY3VySXRlbS5uZXh0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHBhcmVudC5oYXNDbGFzcygnb3BlbmVkJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IG5leHRGaWx0ZXJzLmZpbmQoJz5kaXYnKS5pbm5lckhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fY29udGVudCcpLmNzcyggeyAnei1pbmRleCc6ICcnIH0gKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2J0bi5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEZpbHRlcnMgPSBjdXJJdGVtLm5leHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0RmlsdGVycy5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0RmlsdGVycy5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IG5leHRGaWx0ZXJzLmZpbmQoJz5kaXYnKS5pbm5lckhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEZpbHRlcnMuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnYXV0bydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzEwIClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2J0bjIub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlRmlsdGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9jbGVhckZpbHRlcnMub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoJzEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsZWFyRmlsdGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLnBhZ2luYXRpb24gYVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KGN1ckl0ZW0udGV4dCgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLmhhc0NsYXNzKCdwYWdpbmF0aW9uX19wcmV2JykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHBhcnNlSW50KCBfaW5wdXRIaWRkZW5QYWdlLnZhbCgpICkgIT0gMSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoIF9pbnB1dEhpZGRlblBhZ2UudmFsKCkgLSAxICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBjdXJJdGVtLmhhc0NsYXNzKCdwYWdpbmF0aW9uX19uZXh0JykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICEoIGN1ckl0ZW0ucHJldigpLmhhc0NsYXNzKCdhY3RpdmUnKSApICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbCggcGFyc2VJbnQoIF9pbnB1dEhpZGRlblBhZ2UudmFsKCkgKSArIDEgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHZhbHVlICE9IHBhcnNlSW50KCBfaW5wdXRIaWRkZW5QYWdlLnZhbCgpICkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlblBhZ2UudmFsKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLmNhdGVnb3J5X19maWx0ZXJlZC1yZW1vdmVcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFJZCA9IHBhcmVudC5kYXRhKCdpZCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU5hbWUgPSBwYXJlbnQuZGF0YSgnbmFtZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoJzEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsZWFyU2luZ2xlRmlsdGVyKCBkYXRhSWQsIGRhdGFOYW1lICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIF9jbG9zZUZpbHRlcnMub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlRmlsdGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9hcHBseS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VGaWx0ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2ZpbHRlckl0ZW0uZmluZCgnaW5wdXRbdHlwZT1jaGVja2JveF0nKS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBjdXJJdGVtLm5leHQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsVGV4dCA9IGxhYmVsLmNsb25lKCkuY2hpbGRyZW4oKS5yZW1vdmUoKS5lbmQoKS50ZXh0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gY3VySXRlbS5hdHRyKCduYW1lJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGN1ckl0ZW0uZGF0YSgnaWQnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5TmFtZSA9IGN1ckl0ZW0ucGFyZW50cygnLmNhdGVnb3J5X19maWx0ZXJzLWl0ZW0nKS5maW5kKCdzcGFuJylbMF0uaW5uZXJUZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRHcm91cENoZWNrID0gX2ZpbHRlckl0ZW0uZmluZCgnaW5wdXRbbmFtZT0nKyBuYW1lICsnXTpjaGVja2VkJykubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbENoZWNrRmxhZyA9IGN1ckl0ZW0ucHJvcCgnY2hlY2tlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VGaWx0ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvdW50R3JvdXBDaGVjayk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfd3JpdGVJbkhpZGRlbiggbmFtZSwgaWQsIF9nbG9iYWxDaGVja0ZsYWcsIGNvdW50R3JvdXBDaGVjayApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbCgnMScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkaW5nRmlsdGVyZWRCeSggbGFiZWxUZXh0LCBpZCwgbmFtZSwgY2F0ZWdvcnlOYW1lICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfc29ydGluZ1BhZ2Uub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlblBhZ2UudmFsKCcxJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfc29ydGluZ0RhdGUub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlblBhZ2UudmFsKCcxJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfYWRkaXRpb25hbFBhcmFtZXRlcnMub24oIHtcclxuICAgICAgICAgICAgICAgICAgIHN1Ym1pdDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgX2FkZGl0aW9uYWxQYXJhbWV0ZXJzLmZpbmQoJ3NlbGVjdCcpLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGN1ckl0ZW0uYXR0cignbmFtZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBjdXJJdGVtLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dyaXRlSW5IaWRkZW4oIG5hbWUsIGlkLCAnc2VsZWN0JywgJycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NsZWFyR3JvdXBGaWx0ZXJzKG5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgX2FkZGl0aW9uYWxQYXJhbWV0ZXJzLmZpbmQoJ2lucHV0W3R5cGU9cmFkaW9dOmNoZWNrZWQnKS5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBjdXJJdGVtLmF0dHIoJ25hbWUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gY3VySXRlbS5kYXRhKCdpZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dyaXRlSW5IaWRkZW4oIG5hbWUsIGlkLCAncmFkaW8nLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xlYXJHcm91cEZpbHRlcnMobmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoJzEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGRpbmdGaWx0ZXJlZEJ5ID0gZnVuY3Rpb24oIGl0ZW1UZXh0LCBpdGVtSWQsIGl0ZW1OYW1lLCBjYXRlZ29yeU5hbWUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9nbG9iYWxDaGVja0ZsYWcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9maWx0ZXJlZExpc3QuYXBwZW5kKCc8bGkgZGF0YS1uYW1lPScrIGl0ZW1OYW1lICsnIGRhdGEtaWQ9XCInKyBpdGVtSWQgKydcIj4nKyBjYXRlZ29yeU5hbWUgKyc6ICcrIGl0ZW1UZXh0ICsnIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJjYXRlZ29yeV9fZmlsdGVyZWQtcmVtb3ZlXCI+PC9hPjwvbGk+Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlcmVkTGlzdC5maW5kKCdsaVtkYXRhLWlkPVwiJyArIGl0ZW1JZCArICdcIl0nKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfY291bnRGaWx0ZXJlZCA9IF9maWx0ZXJlZExpc3QuZmluZCgnbGknKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9jb3VudEZpbHRlcmVkID4gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlcmVkLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGl0bGUuZmluZCgnc3BhbicpLmh0bWwoJygnKyBfY291bnRGaWx0ZXJlZCArJyknKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGl0bGVJbm5lci5maW5kKCdzcGFuJykuaHRtbCgnKCcrIF9jb3VudEZpbHRlcmVkICsnKScpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aXRsZS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBfY2xlYXJGaWx0ZXJzLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVyZWQuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aXRsZS5maW5kKCdzcGFuJykuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RpdGxlSW5uZXIuZmluZCgnc3BhbicpLmh0bWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aXRsZS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBfY2xlYXJGaWx0ZXJzLmFkZENsYXNzKCdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWRkTG9hZGluZyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9sb2FkaW5nID0gJCgnPGRpdiBjbGFzcz1cImxvYWRpbmdcIj48L2Rpdj4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCcuY2F0ZWdvcnlfX2NvbnRlbnQnKS5hcHBlbmQoX2xvYWRpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgIF9sb2FkaW5nLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAkKCcuY2F0ZWdvcnlfX3dyYXAnKS5wb3NpdGlvbigpLnRvcCAtIDIwXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlTG9hZGluZyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfdGltZW91dCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aW1lb3V0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcubG9hZGluZycpLmFkZENsYXNzKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIH0sIDMwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgIF90aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLmxvYWRpbmcnKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0sIDYyMCApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NsZWFyRmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2ZpbHRlcmVkLmFkZENsYXNzKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIF90aXRsZS5maW5kKCdzcGFuJykuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgICAgICBfdGl0bGVJbm5lci5maW5kKCdzcGFuJykuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgICAgICBfdGl0bGUucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICBfZmlsdGVyZWRMaXN0LmZpbmQoJ2xpJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICBfZmlsdGVySXRlbS5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW4udmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xlYXJTaW5nbGVGaWx0ZXIgPSBmdW5jdGlvbiggaXRlbUlkLCBpdGVtTmFtZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfZmlsdGVySXRlbS5maW5kKCdpbnB1dFtkYXRhLWlkPVwiJysgaXRlbUlkICsnXCJdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIF9nbG9iYWxDaGVja0ZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIF9hZGRpbmdGaWx0ZXJlZEJ5KCAnJywgaXRlbUlkLCAnJywgJycgKTtcclxuICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBfd3JpdGVJbkhpZGRlbiggaXRlbU5hbWUsIGl0ZW1JZCwgX2dsb2JhbENoZWNrRmxhZywgJycgKTtcclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NsZWFyR3JvdXBGaWx0ZXJzID0gZnVuY3Rpb24oIGl0ZW1OYW1lICkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9maWx0ZXJJdGVtLmZpbmQoJ2lucHV0W25hbWU9XCInKyBpdGVtTmFtZSArJ1wiXScpLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1JZCA9IGN1ckl0ZW0uZGF0YSgnaWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlckl0ZW0uZmluZCgnaW5wdXRbZGF0YS1pZD1cIicrIGl0ZW1JZCArJ1wiXScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2dsb2JhbENoZWNrRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hZGRpbmdGaWx0ZXJlZEJ5KCAnJywgaXRlbUlkLCAnJywgJycgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xvc2VGaWx0ZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX2J0bjIuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfYnRuMi5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlcnMucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19jb250ZW50JykuY3NzKCB7ICd6LWluZGV4JzogJycgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9idG4yLmFkZENsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVycy5hZGRDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCAgX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19jb250ZW50JykuY3NzKCB7ICd6LWluZGV4JzogMTAwIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NyZWF0ZVBhZ2luYXRpb24gPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFnZXMgPSBwYXJzZUludChkYXRhLnNldHRpbmdzLnBhZ2VzQWxsKSxcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVQYWdlID0gcGFyc2VJbnQoZGF0YS5zZXR0aW5ncy5jdXJyZW50UGFnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoYWN0aXZlUGFnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIHBhZ2VzICE9IDEgJiYgIHBhZ2VzICE9IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYWdpbmF0aW9uV3JhcCA9ICc8ZGl2IGNsYXNzPVwicGFnaW5hdGlvblwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJwYWdpbmF0aW9uX19wcmV2XCI+PC9hPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBwYWdlcyA8PSA3ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDE7IGkgPD0gcGFnZXM7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBhY3RpdmVQYWdlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhY3RpdmVcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+JysgaSArJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggYWN0aXZlUGFnZSA8PSAzIHx8IGFjdGl2ZVBhZ2UgPiBwYWdlcy0zICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAxOyBpIDw9IDM7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gYWN0aXZlUGFnZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFjdGl2ZVwiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxzcGFuPi4uLjwvc3Bhbj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSBwYWdlcy0yOyBpIDw9IHBhZ2VzOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGFjdGl2ZVBhZ2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhY3RpdmVcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGFjdGl2ZVBhZ2UgPiAzICYmIGFjdGl2ZVBhZ2UgPD0gcGFnZXMtMyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPjE8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxzcGFuPi4uLjwvc3Bhbj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoYWN0aXZlUGFnZS0xID4gMykgJiYgKGFjdGl2ZVBhZ2UrMSA8PSBwYWdlcy0zKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IGFjdGl2ZVBhZ2UtMTsgaSA8PSBhY3RpdmVQYWdlKzE7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGFjdGl2ZVBhZ2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYWN0aXZlXCI+JysgaSArJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggYWN0aXZlUGFnZS0xIDw9IDMgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSBhY3RpdmVQYWdlOyBpIDw9IGFjdGl2ZVBhZ2UrMjsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gYWN0aXZlUGFnZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhY3RpdmVcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBhY3RpdmVQYWdlKzEgPj0gcGFnZXMtMyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IGFjdGl2ZVBhZ2UtMjsgaSA8PSBhY3RpdmVQYWdlOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBhY3RpdmVQYWdlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFjdGl2ZVwiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+JysgaSArJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPHNwYW4+Li4uPC9zcGFuPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIHBhZ2VzICsnPC9hPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwYWdlcyA9PSA4ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBhY3RpdmVQYWdlID4gMyAmJiBhY3RpdmVQYWdlIDw9IHBhZ2VzLTMgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4xPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPHNwYW4+Li4uPC9zcGFuPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSA0OyBpIDw9IDU7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGFjdGl2ZVBhZ2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYWN0aXZlXCI+JysgaSArJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8c3Bhbj4uLi48L3NwYW4+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIHBhZ2VzICsnPC9hPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJwYWdpbmF0aW9uX19uZXh0XCI+PC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0gJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJy5wYWdpbmF0aW9uLXdyYXAnKS5odG1sKHBhZ2luYXRpb25XcmFwKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggJCgnLnBhZ2luYXRpb24nKS5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcucGFnaW5hdGlvbicpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3Bhc3RlTmV3UHJvZHVjdHMgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3RGF0YSA9IGRhdGEucHJvZHVjdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwID0gJzxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeVwiPicsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QXJyUHJpY2VSYW5nZSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfb2JqVmFsdWVbJ3ByaWNlJ10gIT0gdW5kZWZpbmVkICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBfb2JqVmFsdWVbJ3ByaWNlJ10ubGVuZ3RoLTE7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmljZUl0ZW0gPSBwYXJzZUZsb2F0KF9vYmpWYWx1ZVsncHJpY2UnXVtpXS5yZXBsYWNlKCckJywnJykucmVwbGFjZSgnLCcsJycpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0FyclByaWNlUmFuZ2UucHVzaChwcmljZUl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vaWYoIF9wcmljZUNhdGVnb3J5Lmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyAgICB2YXIgY2hlY2tlZFByaWNlUmFuZ2UgPSBfcHJpY2VDYXRlZ29yeS5maWx0ZXIoJzpjaGVja2VkJyksXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgc3RhcnRpbmdQcmljZSA9IHBhcnNlSW50KGNoZWNrZWRQcmljZVJhbmdlLmF0dHIoJ2RhdGEtaWQnKS5zcGxpdCgnLScpWzBdKTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvL31cclxuXHJcbiAgICAgICAgICAgICAgICBpZiggbmV3QXJyUHJpY2VSYW5nZS5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmljZVJhbmdlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggc3RhcnRpbmdQcmljZSA9PSAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VSYW5nZSA9IE1hdGgubWluLmFwcGx5KG51bGwsIG5ld0FyclByaWNlUmFuZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gbmV3QXJyUHJpY2VSYW5nZS5sZW5ndGgtMTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBuZXdBcnJQcmljZVJhbmdlW2ldID49IHN0YXJ0aW5nUHJpY2UgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlUmFuZ2UgPSBuZXdBcnJQcmljZVJhbmdlW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICQuZWFjaCggbmV3RGF0YSwgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0ID0gdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSBwcm9kdWN0LnByaWNlWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWxlUHJpY2UgPSBwcm9kdWN0Lm9sZFByaWNlWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZUl0ZW07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYoIF9wcmljZUNhdGVnb3J5Lmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHByb2R1Y3QucHJpY2UubGVuZ3RoLTE7IGkrKyApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBwcmljZUl0ZW0gPSBwYXJzZUZsb2F0KHByb2R1Y3QucHJpY2VbaV0ucmVwbGFjZSgnJCcsJycpLnJlcGxhY2UoJywnLCcnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgaWYoIHByaWNlSXRlbSA+PSBzdGFydGluZ1ByaWNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICBwcmljZSA9IHByb2R1Y3QucHJpY2VbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICBzYWxlUHJpY2UgPSBwcm9kdWN0Lm9sZFByaWNlW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgICBpZiggbmV3QXJyUHJpY2VSYW5nZS5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LnByaWNlLmxlbmd0aC0xOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VJdGVtID0gcGFyc2VGbG9hdChwcm9kdWN0LnByaWNlW2ldLnJlcGxhY2UoJyQnLCcnKS5yZXBsYWNlKCcsJywnJykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcmljZUl0ZW0gPj0gcHJpY2VSYW5nZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgPSBwcm9kdWN0LnByaWNlW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbGVQcmljZSA9IHByb2R1Y3Qub2xkUHJpY2VbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9faXRlbVwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0LmZlYXR1cmVkICE9IHVuZGVmaW5lZCAmJiBwcm9kdWN0LmZlYXR1cmVkICE9IFwiXCIgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzxzcGFuIGNsYXNzPVwic2l0ZV9fZmVhdHVyZWRcIj4nKyBwcm9kdWN0LmZlYXR1cmVkICsnPC9zcGFuPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2hlYWRcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIicrIHByb2R1Y3QudXJsRGV0YWlscyArJ1wiIGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX3BpY1wiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCcrIHByb2R1Y3QucGljdHVyZSArJylcIj48L2E+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX3RpdGxlXCI+PGEgaHJlZj1cIicrIHByb2R1Y3QudXJsRGV0YWlscyArJ1wiPicrIHByb2R1Y3QudGl0bGUgKyc8L2E+PC9oMj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvZHVjdC5yYXRlICE9IHVuZGVmaW5lZCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPGRpdiBjbGFzcz1cInJhdGVcIj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gcHJvZHVjdC5yYXRlLnN0YXJzQ291bnQtMTsgaSsrICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxpbWcgc3JjPVwiJysgX2RhdGFSYXRlUGF0aCArJ2ltZy9zdGFyLnBuZ1wiIHdpZHRoPVwiNjBcIiBoZWlnaHQ9XCI1MFwiIGFsdD1cIlwiPiZuYnNwOydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxhIGhyZWY9XCInKyBwcm9kdWN0LnJhdGUudXJsUmV2aWV3cyArJ1wiIGNsYXNzPVwicmF0ZV9fcmV2aWV3c1wiPicrIHByb2R1Y3QucmF0ZS5yZXZpZXdzQ291bnQgKyc8L2E+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2NvbnRlbnRcIj4nO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0LmNvbnRlbnQuZGVzY3JpcHRpb24gIT0gdW5kZWZpbmVkICYmIHByb2R1Y3QuY29udGVudC5kZXNjcmlwdGlvbiAhPSBcIlwiICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19kZXNjcmlwdGlvblwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LmNvbnRlbnQuZGVzY3JpcHRpb24ubGVuZ3RoLTE7IGkrKyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8bGk+JysgcHJvZHVjdC5jb250ZW50LmRlc2NyaXB0aW9uW2ldICsnPC9saT4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8L3VsPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2l0ZW1zXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uICE9IHVuZGVmaW5lZCAmJiBwcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbiAhPSBcIlwiICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX3NwZWNpZmljYXRpb25cIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fc3BlY2lmaWNhdGlvbi1oZWFkXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDw9IHByb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uLmhlYWQubGVuZ3RoLTE7IGkrKyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8ZGl2IHN0eWxlPVwid2lkdGg6JysgKDEwMC9wcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5oZWFkLmxlbmd0aCkgKyclXCI+JysgcHJvZHVjdC5jb250ZW50LnNwZWNpZmljYXRpb24uaGVhZFtpXSArJzwvZGl2PidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX3NwZWNpZmljYXRpb24tY29udGVudFwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5jb250ZW50Lmxlbmd0aC0xOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGRpdiBzdHlsZT1cIndpZHRoOicrICgxMDAvcHJvZHVjdC5jb250ZW50LnNwZWNpZmljYXRpb24uaGVhZC5sZW5ndGgpICsnJVwiPicrIHByb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uLmNvbnRlbnRbaV0gKyc8L2Rpdj4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzYWxlUHJpY2UgIT0gdW5kZWZpbmVkICYmIHNhbGVQcmljZSAhPSBcIlwiICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fZm9vdGVyXCI+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fcHJpY2VcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZWw+Jysgc2FsZVByaWNlICsnPC9kZWw+ICcrIHByaWNlICsnXFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19mb290ZXJcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19wcmljZVwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJysgcHJpY2UgKydcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGEgaHJlZj1cIicrIHByb2R1Y3QudXJsRGV0YWlscyArJ1wiIGNsYXNzPVwiYnRuIGJ0bl8zXCI+c2VlIGRldGFpbHM8L2E+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnLmNhdGVnb3J5X193cmFwJykuaHRtbChwcm9kdWN0c1dyYXApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9jbG9zZUxvYWRpbmcoKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdC5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QgPSAkLmFqYXgoIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IF9wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uIDogJ2dldF9maWx0ZXJlZF9wcm9kdWN0cycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfaW5wdXRIaWRkZW4udmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VTb3J0aW5nOiBfc29ydGluZ1BhZ2UudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVTb3J0aW5nOiBfc29ydGluZ0RhdGUudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBfaW5wdXRIaWRkZW5QYWdlLnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZENhdGVnb3J5OiBfb2JqLmRhdGEoJ2lkLWNhdGVnb3J5JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQYXJhbWV0ZXJzOiBfYWRkaXRpb25hbFBhcmFtZXRlcnMuc2VyaWFsaXplKClcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoIG0gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcGFzdGVOZXdQcm9kdWN0cyggbSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY3JlYXRlUGFnaW5hdGlvbiggbSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoWE1MSHR0cFJlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9IFwiYWJvcnRcIiApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfd3JpdGVJbkhpZGRlbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBjaGVja0ZsYWcsIGNvdW50R3JvdXBDaGVjaykge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBjaGVja0ZsYWcgPT0gJ3JhZGlvJyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX29ialZhbHVlW25hbWVdID0gW3ZhbHVlXTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBjaGVja0ZsYWcgPT0gJ3NlbGVjdCcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCB2YWx1ZSAhPSAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX29ialZhbHVlW25hbWVdID0gW3ZhbHVlXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfb2JqVmFsdWVbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGNoZWNrRmxhZyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmpWYWx1ZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjb3VudEdyb3VwQ2hlY2sgPT0gMSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbbmFtZV0gPSBbdmFsdWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIF9vYmpWYWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcHJvcCA9PSBuYW1lICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29ialZhbHVlW3Byb3BdLnB1c2godmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX29ialZhbHVlW25hbWVdID0gW3ZhbHVlXVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gX29ialZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcHJvcCA9PSBuYW1lICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gX29ialZhbHVlW3Byb3BdLmluZGV4T2YodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGkgIT0gLTEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29ialZhbHVlW3Byb3BdLnNwbGljZShpLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmpWYWx1ZVtuYW1lXS5sZW5ndGggPT0gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfb2JqVmFsdWVbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyRmluaXNoID0gJycsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyVmFsdWVzID0gJycsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyRnVsbCA9ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyckFsbCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciggdmFyIGtleSBpbiBfb2JqVmFsdWUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9hcnIgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBfb2JqVmFsdWVbIGtleSBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfYXJyLnB1c2goIGl0ZW0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gX2Fyci5sZW5ndGgtMTsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJWYWx1ZXMgPSBfYXJyLmpvaW4oJywnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdHJGdWxsID0ga2V5ICsgJz0nICsgc3RyVmFsdWVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhcnJBbGwucHVzaChzdHJGdWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyRmluaXNoID0gYXJyQWxsLmpvaW4oJyYnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuLnZhbCggc3RyRmluaXNoICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX29iai5oYXNDbGFzcygnY2F0ZWdvcnlfc3ViJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG5cclxufSApKCk7IiwiKCBmdW5jdGlvbigpe1xyXG5cclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkKCcuc2VhcmNoJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgU2VhcmNoKCAkKHRoaXMpICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIFNlYXJjaCA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2lucHV0ID0gX29iai5maW5kKCdpbnB1dFt0eXBlPXNlYXJjaF0nKSxcclxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcclxuICAgICAgICAgICAgX3BhdGggPSBfb2JqLmRhdGEoJ3BhdGgnKSxcclxuICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMCxcclxuICAgICAgICAgICAgY291bnRJdGVtcyA9IDAsXHJcbiAgICAgICAgICAgIHZhbHVlSW5wdXQgPSBfaW5wdXQudmFsKCksXHJcbiAgICAgICAgICAgIF9yZXN1bHQgPSBfb2JqLmZpbmQoJy5zZWFyY2hfX3Jlc3VsdCcpO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG5cclxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfaW5wdXQub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXl1cDogZnVuY3Rpb24oSSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQod2luZG93KS53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKEkua2V5Q29kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmZpbHRlcignLmFjdGl2ZScpLmxlbmd0aCA9PSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCdmb3JtJykuc3VibWl0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlSW5wdXQgPSAkKHRoaXMpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHZhbHVlSW5wdXQubGVuZ3RoID49IF9vYmouZGF0YSgnc3ltYm9scycpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hamF4UmVxdWVzdCggJCh0aGlzKSwgdmFsdWVJbnB1dC5sZW5ndGgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQodGhpcykudmFsKCkgPT0gJycgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiBmdW5jdGlvbihJKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kJykuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnLnRvcC1wcm9kdWN0cycpLmh0bWwoJycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKHdpbmRvdykud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCggSS5rZXlDb2RlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmZpbHRlcignLmFjdGl2ZScpLmxlbmd0aCA9PSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBfb2JqLmRhdGEoJ2FjdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZmlsdGVyKCcuYWN0aXZlJykuZmluZCgnYScpLmF0dHIoJ2hyZWYnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGNvdW50SXRlbXMgPiAwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfa2V5QWN0aXZhdGUoIEkua2V5Q29kZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzdWdnZXN0U2VsZWN0ZWQgPT0gY291bnRJdGVtcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAkKCdodG1sJykuY2xpY2soIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYm9keVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBldmVudCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIuc2VhcmNoX19mb3VuZCBsaVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUZXh0ID0gY3VySXRlbS5maW5kKCdhJykudGV4dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbChjdXJUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImtleWRvd25cIixcclxuICAgICAgICAgICAgICAgICAgICBcIi5zZWFyY2hfX2ZvdW5kIGxpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oSSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChJLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfa2V5QWN0aXZhdGUgPSBmdW5jdGlvbihuKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX29iai5wYXJlbnRzKCkuaGFzQ2xhc3MoJ3NpdGVfX2Zvb3RlcicpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggbiA9PSAzOCAmJiBzdWdnZXN0U2VsZWN0ZWQgPCBjb3VudEl0ZW1zICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG4gPT0gNDAgJiYgc3VnZ2VzdFNlbGVjdGVkID4gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZXEoIC0xIC0gKHN1Z2dlc3RTZWxlY3RlZCAtIDEpICkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZXEoIC0xIC0gKHN1Z2dlc3RTZWxlY3RlZCAtIDEpICkuZmluZCgnYScpLnRleHQoKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbCggdmFsdWVJbnB1dCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIG4gPT0gNDAgJiYgc3VnZ2VzdFNlbGVjdGVkIDwgY291bnRJdGVtcyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCsrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuID09IDM4ICYmIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzdWdnZXN0U2VsZWN0ZWQgPiAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmVxKCBzdWdnZXN0U2VsZWN0ZWQgLSAxICkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZXEoIHN1Z2dlc3RTZWxlY3RlZCAtIDEgKS5maW5kKCdhJykudGV4dCgpICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCB2YWx1ZUlucHV0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZERhdGEgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcyA9IGRhdGEuY2F0ZWdvcmllcyxcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzQXZhaWxhYmlsaXR5ID0gY2F0ZWdvcmllcy5sZW5ndGggIT0gMCxcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0cyA9IGRhdGEucHJvZHVjdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNBdmFpbGFiaWxpdHkgPSBwcm9kdWN0cy5sZW5ndGggIT0gMCxcclxuICAgICAgICAgICAgICAgICAgICBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0NhdGVnb3JpZXNBcnIgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICB1cmxQcm9kdWN0c0NhdGVnb3JpZXNBcnIgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggcHJvZHVjdHNBdmFpbGFiaWxpdHkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0c1dyYXAgPSAnPGRpdiBjbGFzcz1cInRvcC1wcm9kdWN0c19fd3JhcFwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCggcHJvZHVjdHMsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8ZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX2l0ZW1cIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1wcm9kdWN0c19fcGljXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJysgcHJvZHVjdC5zcmMgKycpXCI+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvcC1wcm9kdWN0c19fcHJpY2VcIj48ZGVsPicrIHByb2R1Y3Qub2xkUHJpY2UgKyc8L2RlbD4gJysgcHJvZHVjdC5wcmljZSArJzwvc3Bhbj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidG9wLXByb2R1Y3RzX19pdGVtLXRpdGxlXCI+JysgcHJvZHVjdC5uYW1lICsnPC9oMz5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIicrIHByb2R1Y3QuaHJlZiArJ1wiIGNsYXNzPVwidG9wLXByb2R1Y3RzX19idG5cIj52aWV3PC9hPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFjYXRlZ29yaWVzQXZhaWxhYmlsaXR5ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5wdXNoKCBbcHJvZHVjdC5jYXRlZ29yaWVzLm1haW5DYXRlZ29yeSwgcHJvZHVjdC5jYXRlZ29yaWVzLnVybE1haW5DYXRlZ29yeSwgcHJvZHVjdC5jYXRlZ29yaWVzLnN1YmNhdGVnb3JpZXMsIHByb2R1Y3QuY2F0ZWdvcmllcy51cmxTdWJjYXRlZ29yaWVzXSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCdkaXYnKS5lcSgxKS5maW5kKCcudG9wLXByb2R1Y3RzJykuaHRtbCgnPGgyIGNsYXNzPVwidG9wLXByb2R1Y3RzX190aXRsZVwiPlRvcCBQcm9kdWN0czwvaDI+JyArIHByb2R1Y3RzV3JhcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRTdHIgPSAnPHVsIGNsYXNzPVwic2VhcmNoX19mb3VuZFwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBjYXRlZ29yaWVzQXZhaWxhYmlsaXR5ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCBjYXRlZ29yaWVzLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViY2F0ZWdvcmllcyA9IHRoaXMuc3ViY2F0ZWdvcmllcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxTdWJjYXRlZ29yaWVzID0gdGhpcy51cmxTdWJjYXRlZ29yaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHN1YmNhdGVnb3JpZXMgIT0gdW5kZWZpbmVkICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBzdWJjYXRlZ29yaWVzLmxlbmd0aC0xOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCArPSAnPGxpIGNsYXNzPVwic2VhcmNoX19mb3VuZC1zdWJcIj48YSBocmVmPVwiJysgdXJsU3ViY2F0ZWdvcmllc1tpXSArJ1wiPicgKyBzdWJjYXRlZ29yaWVzW2ldICsgJzwvYT48L2xpPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCArPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyICs9ICc8bGk+PGEgaHJlZj1cIicrIHRoaXMudXJsQ2F0ZWdvcnkgKydcIj4nKyB0aGlzLm5hbWUgKyc8L2E+PC9saT4nKyBzdWJjYXRlZ29yaWVzV3JhcCArJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPD0gYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGZsYWcgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0NhdGVnb3JpZXNBcnIucHVzaChhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcHJvZHVjdHNDYXRlZ29yaWVzQXJyW3Byb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMV1bMF0gIT0gYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzBdICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0NhdGVnb3JpZXNBcnIucHVzaChhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMDsgaiA8PSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0ubGVuZ3RoLTE7IGorKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciB6ID0gMDsgeiA8PSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl0ubGVuZ3RoLTE7IHorKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcHJvZHVjdHNDYXRlZ29yaWVzQXJyW3Byb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMV1bMl0uaW5kZXhPZiggYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdW3pdKSA9PSAtMSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW3Byb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMV1bMl0ucHVzaCggYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdW3pdIClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDw9IHByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMDsgaiA8PSBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0ubGVuZ3RoLTE7IGorKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YmNhdGVnb3JpZXNXcmFwID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIHogPSAwOyB6IDw9IHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXS5sZW5ndGgtMTsgeisrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJzxsaSBjbGFzcz1cInNlYXJjaF9fZm91bmQtc3ViXCI+PGEgaHJlZj1cIicgKyBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bM11bel0gKyAnXCI+JyArIHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXVt6XSArICc8L2E+PC9saT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCArPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyICs9ICc8bGk+PGEgaHJlZj1cIicgKyBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMV0gKyAnXCI+JyArIHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVswXSArICc8L2E+PC9saT4nKyBzdWJjYXRlZ29yaWVzV3JhcCArJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyICs9ICc8L3VsPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnZGl2OmZpcnN0JykuaHRtbChyZXN1bHRTdHIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kJykuZmluZCgnbGk6bm90KDpsdCgxMSkpJykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50SXRlbXMgPSBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kJykuZmluZCgnbGknKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWpheFJlcXVlc3QgPSAgZnVuY3Rpb24oIGlucHV0LCBuICkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogX3BhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaW5wdXQudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjonbWFpbl9zZWFyY2gnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCBtc2cgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggT2JqZWN0LmtleXMobXNnKS5sZW5ndGggIT0gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGREYXRhKCBtc2cgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoWE1MSHR0cFJlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG59ICkoKTsiXX0=
