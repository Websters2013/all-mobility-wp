!function(){var e=!0;$(function(){$(".site__menu").each(function(){new n($(this)),new t($(this))}),$(".not-found").each(function(){new i($(this))}),$(".confirmation").each(function(){new i($(this))}),$("#wpsl-stores").each(function(){$(this).perfectScrollbar({wheelPropagation:!0})}),$(".checkout").each(function(){new s($(this))}),$(".product__items").each(function(){new o($(this))})});var n=function(e){var n=e,t=n.find(".site__menu-item"),i=n.find(".site__menu-icon"),s=$(window),o=null,a=s.width(),d=function(){s.on({resize:function(){a>s.width()&&(a=s.width(),s.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),i.on({click:function(){var e=jQuery(this),n=e.parents("li"),t=n.find(".site__menu-sub");return s.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),t.slideUp()):(n.addClass("opened"),t.slideDown())),!1}}),t.on({mouseenter:function(){if(s.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");s.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(s.width()>=1024){$(".featured-product__loading").addClass("visible"),o&&(clearTimeout(o),o=null);var e=$(this),t=e.data("product");o=setTimeout(function(){console.log(t),n.find(".featured-product").find(".featured-product__title").text(t.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",t.src),n.find(".featured-product").find(".btn").attr("href",t.href),n.find(".featured-product").find(".featured-product__price span").text(t.price),t.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),t.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(t.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),o=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){s.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){s.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){s.width()>=1024&&$(this).removeClass("opened")})},r=function(){d()};r()},t=function(n){var t,i,s=this,o=n,a=$(window),d=!1,r=$(".site__header"),c=$(".site__hidden-items"),u=r.innerHeight(),f=$(".site__header-btn"),l=$(".site__hidden-close"),h=$(".search"),p=$(".search-btn"),_=$(".search__cancel"),v=$(".site__hidden-btn"),m=$(".site"),w=$("html"),C=($(".site__content"),function(){$(document).on("click",".search",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click","body",function(){x()}),f.on({click:function(){k($(this))}}),l.on({click:function(){return T(),!1}}),p.on({click:function(){return y($(this)),!1}}),_.on({click:function(){return x(),!1}}),a.on({scroll:function(e){g(),d=a.scrollTop()>=u,0==a.scrollTop()&&r.removeClass("site__header_hidden")},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var t=n>0?1:-1;b(t)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var t=n>0?-1:1;b(t)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>t?b(-1):n<t&&b(1),t=n},keydown:function(e){switch(e.which){case 32:b(1);break;case 33:b(-1);break;case 34:b(1);break;case 35:b(1);break;case 36:b(-1);break;case 38:b(-1);break;case 40:b(1);break;default:return}},resize:function(){a.width()>=1024&&(m.css({height:""}),setTimeout(function(){m.height()>a.height()&&w.css({"overflow-y":""})},10))}})}),b=function(n){n>0&&!r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&d&&r.addClass("site__header_hidden"),n<0&&r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&d&&e&&r.removeClass("site__header_hidden")},g=function(){a.scrollTop()>u+150?r.addClass("fixed"):r.removeClass("fixed")},k=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),c.removeClass("opened")):(n.addClass("opened"),c.addClass("opened")),i=a.scrollTop(),setTimeout(function(){m.height()>a.height()&&w.css({"overflow-y":"scroll"}),setTimeout(function(){m.css({height:"100%"})},10)},300)},y=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),h.removeClass("active"),v.removeClass("hidden")):(n.addClass("opened"),h.addClass("active"),v.addClass("hidden"))},T=function(){f.removeClass("opened"),c.removeClass("opened"),h.find("input").focusout(),m.css({height:""}),setTimeout(function(){m.height()>a.height()&&w.css({"overflow-y":""}),a.scrollTop(i)},10)},x=function(){p.removeClass("opened"),h.removeClass("active"),v.removeClass("hidden")},H=function(){o[0].obj=s,C(),g()};H()},i=function(e){var n=e,t=$(window),i=t.width(),s=function(){t.on({resize:function(){i!=t.width()&&(i=t.width(),o())}})},o=function(){n.css({minHeight:""}),n.css({minHeight:t.height()-$(".site__header").innerHeight()-$(".site__footer").innerHeight()-$(".breadcrumbs").innerHeight()})},a=function(){s(),o()};a()},s=function(e){var n=e,t=n.find(".total-order"),i=function(){},s=function(){n.css({minHeight:t.innerHeight()})},o=function(){i(),s()};o()},o=function(e){Number.prototype.formatMoney=function(e,n,t){var i=this,e=isNaN(e=Math.abs(e))?2:e,n=void 0==n?".":n,t=void 0==t?",":t,s=i<0?"-":"",o=String(parseInt(i=Math.abs(Number(i)||0).toFixed(e))),a=(a=o.length)>3?a%3:0;return s+(a?o.substr(0,a)+t:"")+o.substr(a).replace(/(\d{3})(?=\d)/g,"$1"+t)+(e?n+Math.abs(i-o).toFixed(e).slice(2):"")},$(".variations_form").on("change",function(){var e=$(".variations").find("select"),n=0;if(e.each(function(e){$(this).val()&&n++}),n===e.length){var t=$(".price>span").text(),i=$(".price>span>span").text();t=parseFloat(t.slice(1).split(",").join("")),$upsells=$(".variations_form>.websters-select").find("select"),$upsells.each(function(){var e=$(this).val();e>0&&$(this).find("option").each(function(){$(this).val()===e&&(t+=$(this).data("price"))})}),$(".price").css("display","none"),$(".featured-product__price>strong").html("<span>"+i+"</span>"+t.formatMoney(2,".",","))}})}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return v($(this).attr("data-popup")),!1}}),u.find(">div").on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},v=function(o){m(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
"use strict";!function(){$(function(){$.each($(".product__slider"),function(){new i($(this))}),$.each($(".featured-products"),function(){new s($(this))})});var i=function(i){var s=this,o=i,e=function(){o[0].obj=s,n()},n=function(){$(".slider-for").slick({slidesToShow:1,slidesPerRow:1,slidesToScroll:1,arrows:!1,infinite:!0,asNavFor:".slider-nav"}),$(".slider-nav").slick({slidesToShow:4,slidesPerRow:4,asNavFor:".slider-for",dots:!1,arrows:!1,infinite:!0,centerMode:!1,focusOnSelect:!0,responsive:[{breakpoint:1360,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:1024,settings:{slidesToShow:4,slidesToScroll:4}},{breakpoint:412,settings:{slidesToShow:3,slidesToScroll:3}}]})};e()},s=function(i){var s,o,e=this,n=i,t=$(window),r=n.find(".swiper-pagination"),d=n.find(".swiper-button-prev"),l=n.find(".swiper-button-next"),c=!1,u=function(){n[0].obj=e,a(),t.width()<=768?o=!1:(o=!0,p())},a=function(){t.on({resize:function(){t.width()<=768?o&&(o=!1,f()):o||(o=!0,p())}})},f=function(){s.slick("unslick")},p=function(){w(),s=$(".featured-products__wrapper").slick({dots:!0,slidesToShow:5,slidesToScroll:1,autoplay:!0,autoplaySpeed:5e3,prevArrow:d,nextArrow:l,appendDots:r,responsive:[{breakpoint:1440,settings:{slidesToShow:4}}]})},w=function(){t.width()>=1024?n.find(".featured-products__slide").length>=4&&(c=!0):t.width()>=1425&&n.find(".featured-products__slide").length>=5&&(c=!0),c||n.find(".featured-products__controls").css({display:"none"})};u()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),$(document).on("change","select",function(){$(this).prev().text($(this).find("option:selected").text())}),1!=s||l||p.on({click:function(e){e.stopPropagation(),u?v():y()}}),f.on({click:function(){u&&v()}}),r.on({scroll:function(){u&&v()}})},g=function(){!s||l?x():1==s&&_()},_=function(){p.addClass("websters-select_custom")},x=function(){p.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".category").each(function(){new e($(this))})});var e=function(e){var a=e,t=$("body").data("action"),i=new XMLHttpRequest,n=a.find(".category__filters-item span"),s=a.find(".category__filters-title"),r=a.find(".category__filters-items"),c=(r.find("form"),a.find(".category__filtered-close")),o=a.find(".category__filters-list"),d=a.find(".category__filtered"),l=a.find(".category__filtered-list"),f=0,p=a.find(".category__filters-title"),v=a.find(".category__filters-title-inner"),h=a.find(".category__filtered .btn, .category__filters-clear"),u=(a.find(".category__filtered-remove"),a.find(".category__find-parameters")),g=!1,_=$('<div class="loading"></div>'),m=a.find("input[type=hidden].value-check"),y=a.find("input[type=hidden].current-page"),b=a.find("#items-page"),C=a.find("#sorting-date"),k=a.find(".category__wrap").data("rate-path"),w=a.find(".category__filters-apply"),x=$(window),P={},T=null,I=[],z=(a.find("input[name=_price]"),function(){x.on({resize:function(){n.each(function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")&&t.css({"min-height":t.find(">div").innerHeight()})}),x.width()>=1024&&$(".site__content").css({"z-index":""})},load:function(){}}),n.on({click:function(){var e=$(this),a=e.parent(),t=e.next();a.hasClass("opened")?(a.removeClass("opened"),t.css({"min-height":0,height:0})):(a.addClass("opened"),t.css({"min-height":t.find(">div").innerHeight()}),setTimeout(function(){t.css({height:"auto"})},310))}}),s.on({click:function(){R()}}),h.on({click:function(){return y.val("1"),F(),!1}}),$(document).on("click",".pagination a",function(){var e=$(this),a=parseInt(e.text());return e.hasClass("pagination__prev")?1!=parseInt(y.val())&&(y.val(y.val()-1),D(),A()):e.hasClass("pagination__next")?e.prev().hasClass("active")||(y.val(parseInt(y.val())+1),D(),A()):a!=parseInt(y.val())&&(y.val(a),D(),A()),!1}),$(document).on("click",".category__filtered-remove",function(){var e=$(this),a=e.parent(),t=a.data("id"),i=a.data("name");return y.val("1"),M(t,i),!1}),c.on({click:function(){return R(),!1}}),w.on({click:function(){return R(),!1}}),o.find("input[type=checkbox]").on({change:function(){var e=$(this),a=e.next(),t=a.clone().children().remove().end().text(),i=e.attr("name"),n=e.data("id"),s=e.parents(".category__filters-item").find("span")[0].innerText,r=o.find("input[name="+i+"]:checked").length;g=e.prop("checked"),x.width()>=1024&&(D(),R()),console.log(r),E(i,n,g,r),y.val("1"),j(t,n,i,s),A()}}),b.on({change:function(){y.val("1"),D(),A()}}),C.on({change:function(){y.val("1"),D(),A()}}),u.on({submit:function(){return x.width()>=1024&&D(),u.find("select").each(function(){var e=$(this),a=e.attr("name"),t=e.val();E(a,t,"select",""),O(a)}),u.find("input[type=radio]:checked").each(function(){var e=$(this),a=e.attr("name"),t=e.data("id");E(a,t,"radio",""),O(a)}),y.val("1"),A(),!1}})}),j=function(e,a,t,i){g?l.append("<li data-name="+t+' data-id="'+a+'">'+i+": "+e+' <a href="#" class="category__filtered-remove"></a></li>'):l.find('li[data-id="'+a+'"]').remove(),f=l.find("li").length,f>0?(d.removeClass("hidden"),p.find("span").html("("+f+")"),v.find("span").html("("+f+")"),p.addClass("selected"),h.removeClass("hidden")):(d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),h.addClass("hidden"))},D=function(){_=$('<div class="loading"></div>'),$(".category__content").append(_),_.css({top:$(".category__wrap").position().top-20})},H=function(){T&&(clearTimeout(T),T=null),T=setTimeout(function(){$(".loading").addClass("hidden")},300),T=setTimeout(function(){$(".loading").remove()},620)},F=function(){d.addClass("hidden"),p.find("span").html(""),v.find("span").html(""),p.removeClass("selected"),l.find("li").remove(),o.find("input[type=checkbox]").prop("checked",!1),m.val(""),D(),A()},M=function(e,a){o.find('input[data-id="'+e+'"]').prop("checked",!1),g=!1,j("",e,"",""),D(),E(a,e,g,""),A()},O=function(e){o.find('input[name="'+e+'"]').each(function(){var e=$(this),a=e.data("id");o.find('input[data-id="'+a+'"]').prop("checked",!1),g=!1,j("",a,"","")})},R=function(){s.hasClass("opened")?(s.removeClass("opened"),r.removeClass("opened"),$(".site__content").css({"z-index":""})):(s.addClass("opened"),r.addClass("opened"),x.width()<1024&&$(".site__content").css({"z-index":100}))},S=function(e){var a=parseInt(e.settings.pagesAll),t=parseInt(e.settings.currentPage);if(y.val(t),1!=a&&0!=a){var i='<div class="pagination">';if(i+='<a href="#" class="pagination__prev"></a>',a<=7)for(var n=1;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else{if(t<=3||t>a-3){for(var n=1;n<=3;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>";for(var n=a-2;n<=a;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>"}if(t>3&&t<=a-3){if(i+='<a href="#">1</a>',i+="<span>...</span>",t-1>3&&t+1<=a-3)for(var n=t-1;n<=t+1;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t-1<=3)for(var n=t;n<=t+2;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";else if(t+1>=a-3)for(var n=t-2;n<=t;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}if(8==a&&t>3&&t<=a-3){i+='<a href="#">1</a>',i+="<span>...</span>";for(var n=4;n<=5;n++)i+=n==t?'<a href="#" class="active">'+n+"</a>":'<a href="#">'+n+"</a>";i+="<span>...</span>",i+='<a href="#">'+a+"</a>"}}i+='<a href="#" class="pagination__next"></a>',i+="</div>",$(".pagination-wrap").html(i)}else $(".pagination").length&&$(".pagination").remove()},q=function(e){var a=e.products,t='<div class="products-subcategory">',i=[];if(void 0!=P.price)for(var n=0;n<=P.price.length-1;n++){var s=parseFloat(P.price[n].replace("$","").replace(",",""));i.push(s)}if(i.length){var r;if(0==startingPrice)r=Math.min.apply(null,i);else for(var n=0;n<=i.length-1;n++)if(i[n]>=startingPrice){r=i[n];break}}$.each(a,function(){var e,a=this,n=a.price[0],s=a.oldPrice[0];if(i.length)for(var c=0;c<=a.price.length-1;c++)if(e=parseFloat(a.price[c].replace("$","").replace(",","")),e>=r){n=a.price[c],s=a.oldPrice[c];break}if(t+='<div class="products-subcategory__item">',void 0!=a.featured&&""!=a.featured&&(t+='<span class="site__featured">'+a.featured+"</span>"),t+='<div class="products-subcategory__head">                                            <div>                                                <a href="'+a.urlDetails+'" class="products-subcategory__pic" style="background-image: url('+a.picture+')"></a>                                            </div>                                            <div>                                                <h2 class="products-subcategory__title"><a href="'+a.urlDetails+'">'+a.title+"</a></h2>",void 0!=a.rate){t+='<div class="rate">';for(var c=0;c<=a.rate.starsCount-1;c++)t+='<img src="'+k+'img/star.png" width="60" height="50" alt="">&nbsp;';t+='<a href="'+a.rate.urlReviews+'" class="rate__reviews">'+a.rate.reviewsCount+"</a>                                                </div>"}if(t+='</div>                                        </div>                                        <div class="products-subcategory__content">',void 0!=a.content.description&&""!=a.content.description){t+='<div>                                        <ul class="products-subcategory__description">';for(var c=0;c<=a.content.description.length-1;c++)t+="<li>"+a.content.description[c]+"</li>";t+="</ul>                                    </div>"}if(t+='<div>                                            <div class="products-subcategory__items">',void 0!=a.content.specification&&""!=a.content.specification){t+='<div>                    <div class="products-subcategory__specification">                                                        <div class="products-subcategory__specification-head">';for(var c=0;c<=a.content.specification.head.length-1;c++)t+='<div style="width:'+100/a.content.specification.head.length+'%">'+a.content.specification.head[c]+"</div>";t+='</div>                                                        <div class="products-subcategory__specification-content">';for(var c=0;c<=a.content.specification.content.length-1;c++)t+='<div style="width:'+100/a.content.specification.head.length+'%">'+a.content.specification.content[c]+"</div>";t+="</div>                                                    </div>                                                </div>"}t+=void 0!=s&&""!=s?'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        <del>'+s+"</del> "+n+"                                                    </div>":'<div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        '+n+"                                                    </div>",t+='<a href="'+a.urlDetails+'" class="btn btn_3">see details</a>                                                </div>                                            </div>                                        </div>                                    </div>                                    </div>'}),t+="</div>",$(".category__wrap").html(t),H()},A=function(){i.abort(),i=$.ajax({url:t,data:{action:"get_filtered_products",value:m.val(),pageSorting:b.val(),dateSorting:C.val(),currentPage:y.val(),idCategory:a.data("id-category"),additionalParameters:u.serialize()},dataType:"json",type:"get",success:function(e){q(e),S(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}})},E=function(e,a,t,i){if("radio"==t)P[e]=[a];else if("select"==t)0!=a?P[e]=[a]:delete P[e];else if(t)if(P.hasOwnProperty(e))if(1==i)P[e]=[a];else for(var n in P)n==e&&P[n].push(a);else P[e]=[a];else{for(var n in P)if(n==e){var s=P[n].indexOf(a);s!=-1&&P[n].splice(s,1)}0==P[e].length&&delete P[e]}var r="",c="",o="",d=[];for(var l in P){I=[];var f=P[l];I.push(f);for(var s=0;s<=I.length-1;s++)c=I.join(",");o=l+"="+c,d.push(o),r=d.join("&")}m.val(r)},L=function(){z(),a.hasClass("category_sub")&&(D(),A())};L()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var t=e,i=t.find("input[type=search]"),a=new XMLHttpRequest,s=t.data("path"),n=0,o=0,r=i.val(),c=t.find(".search__result"),l=function(){i.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==c.find(".search__found li").filter(".active").length&&t.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var i=$(this).val();i.length>=t.data("symbols")?u($(this),i.length):""==$(this).val()&&(c.removeClass("visible"),n=0)}},keydown:function(e){if(c.find(".search__found").html(""),c.find(".top-products").html(""),n=0,$(window).width()>=1024)switch(e.keyCode){case 13:return 0==c.find(".search__found li").filter(".active").length?window.location.href=t.data("action"):window.location.href=c.find(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),n=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),n==o&&(n=0))}}}),$("html").click(function(){c.removeClass("visible"),n=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),t=e.find("a").text();i.val(t),c.removeClass("visible"),n=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){c.find(".search__found li").removeClass("active"),t.parents().hasClass("site__footer")?(38==e&&n<o?n++:40==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(-1-(n-1)).addClass("active"),i.val(c.find(".search__found li").eq(-1-(n-1)).find("a").text())):i.val(r)):(40==e&&n<o?n++:38==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(n-1).addClass("active"),i.val(c.find(".search__found li").eq(n-1).find("a").text())):i.val(r))},f=function(e){var e=e,t=e.categories,i=0!=t.length,a=e.products,s=0!=a.length,n=[],r=[],l=!0;if(s){var d='<div class="top-products__wrap">';$.each(a,function(){var e=this;d+='<div>                                                <div class="top-products__item">                                                    <div class="top-products__pic" style="background-image: url('+e.src+')">                                                    </div>                                                    <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                    <h3 class="top-products__item-title">'+e.name+'</h3>                                                    <a href="'+e.href+'" class="top-products__btn">view</a>                                                </div>                                            </div>',i||n.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),d+="</div>",c.find("div").eq(1).find(".top-products").html('<h2 class="top-products__title">Top Products</h2>'+d);var f='<ul class="search__found">';if(i)$.each(t,function(){var e=this.subcategories,t=this.urlSubcategories,i="";if(void 0!=e){for(var a=0;a<=e.length-1;a++)i+='<li class="search__found-sub"><a href="'+t[a]+'">'+e[a]+"</a></li>";i+=""}f+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+i});else{for(var u=0;u<=n.length-1;u++)if(l&&(r.push(n[u]),l=!1),r[r.length-1][0]!=n[u][0])r.push(n[u]);else for(var h=0;h<=n[u].length-1;h++)for(var v=0;v<=n[u][2].length-1;v++)r[r.length-1][2].indexOf(n[u][2][v])==-1&&r[r.length-1][2].push(n[u][2][v]);for(var _=0,u=0;u<=r.length-1;u++){for(var h=0;h<=r[u].length-1;h++){for(var p="",v=0;v<=r[u][2].length-1;v++)p+='<li class="search__found-sub"><a href="'+r[u][3][v]+'">'+r[u][2][v]+"</a></li>",_++;p+=""}f+='<li><a href="'+r[u][1]+'">'+r[u][0]+"</a></li>"+p}}f+="</ul>",c.find("div:first").html(f),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")}else c.removeClass("visible")},u=function(e,t){return a.abort(),a=$.ajax({url:s,data:{value:e.val(),action:"main_search"},dataType:"json",type:"get",success:function(e){0!=Object.keys(e).length&&f(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}}),!1},h=function(){l()};h()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnBvcHVwLmpzIiwianF1ZXJ5LnByb2R1Y3Qtc2xpZGVyLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyIsImpxdWVyeS5maWx0ZXJzLmpzIiwianF1ZXJ5LnNlYXJjaC5qcyJdLCJuYW1lcyI6WyJnbG9iYWxTY3JvbGxGbGFnIiwiJCIsImVhY2giLCJTdWJNZW51IiwidGhpcyIsIk1lbnUiLCJGdWxsSGVpZ2h0IiwicGVyZmVjdFNjcm9sbGJhciIsIndoZWVsUHJvcGFnYXRpb24iLCJDaGVja291dEhlaWdodCIsIkNoYW5nZVByaWNlIiwib2JqIiwiX29iaiIsIl9pdGVtcyIsImZpbmQiLCJfYXJyb3ciLCJfd2luZG93Iiwid2luZG93IiwidGltZW91dCIsIl9zdGFydFdpbldpZHRoIiwid2lkdGgiLCJfYWRkRXZlbnRzIiwib24iLCJyZXNpemUiLCJyZW1vdmVDbGFzcyIsImpRdWVyeSIsImN1ckl0ZW0iLCJwYXJlbnQiLCJoYXNDbGFzcyIsImFkZENsYXNzIiwiY2xpY2siLCJwYXJlbnRzIiwic3ViTWVudSIsInNsaWRlVXAiLCJzbGlkZURvd24iLCJtb3VzZWVudGVyIiwiaW5uZXJXaWR0aCIsIm9mZnNldCIsImxlZnQiLCJjc3MiLCItd2Via2l0LXRyYW5zZm9ybSIsInRyYW5zZm9ybSIsInBvc2l0aW9uIiwiY2xlYXJUaW1lb3V0IiwiZGF0YSIsInNldFRpbWVvdXQiLCJjb25zb2xlIiwibG9nIiwidGV4dCIsIm5hbWUiLCJhdHRyIiwic3JjIiwiaHJlZiIsInByaWNlIiwib25TYWxlIiwib2xkUHJpY2UiLCJfaW5pdCIsIl9sYXN0UG9zIiwic2l0ZVNjcm9sbFRvcCIsIl9zZWxmIiwiX21lbnUiLCJfYWN0aW9uIiwiX2hlYWRlciIsIl9oaWRkZW5CbG9ja01lbnUiLCJfaGVhZGVySGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJfc2hvd0J0biIsIl9jbG9zZUJ0biIsIl9zZWFyY2giLCJfb3BlblNlYXJjaCIsIl9jbG9zZVNlYXJjaCIsIl9nZXRGcmVlIiwiX3NpdGUiLCJfZG9tIiwiZG9jdW1lbnQiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsIl9jbG9zZVNlYXJjaEJveCIsIl9vcGVuTWVudSIsIl9jbG9zZU1lbnUiLCJfb3BlblNlYXJjaEJveCIsInNjcm9sbCIsImUiLCJfZml4ZWRIZWFkZXIiLCJzY3JvbGxUb3AiLCJET01Nb3VzZVNjcm9sbCIsImRlbHRhIiwib3JpZ2luYWxFdmVudCIsImRldGFpbCIsImRpcmVjdGlvbiIsIl9jaGVja1Njcm9sbCIsIm1vdXNld2hlZWwiLCJ3aGVlbERlbHRhIiwidG91Y2htb3ZlIiwiY3VycmVudFBvcyIsInRvdWNoZXMiLCJjbGllbnRZIiwia2V5ZG93biIsIndoaWNoIiwiaGVpZ2h0Iiwib3ZlcmZsb3cteSIsImVsZW0iLCJmb2N1c291dCIsIl9nbG9iYWxXaW5XaWR0aCIsIl9zZXRIZWlnaHQiLCJtaW5IZWlnaHQiLCJfdG90YWxPcmRlciIsIk51bWJlciIsInByb3RvdHlwZSIsImZvcm1hdE1vbmV5IiwiYyIsImQiLCJ0IiwibiIsImlzTmFOIiwiTWF0aCIsImFicyIsInVuZGVmaW5lZCIsInMiLCJpIiwiU3RyaW5nIiwicGFyc2VJbnQiLCJ0b0ZpeGVkIiwiaiIsImxlbmd0aCIsInN1YnN0ciIsInJlcGxhY2UiLCJzbGljZSIsInZhcmlhdGlvbiIsImNvdW50ZXIiLCIkdmFsdWUiLCJ2YWwiLCJzeW1ib2wiLCJwYXJzZUZsb2F0Iiwic3BsaXQiLCJqb2luIiwiJHVwc2VsbHMiLCJzZWxlY3QiLCJodG1sIiwiUG9wdXAiLCJfcG9wdXBQYWRkaW5nIiwiX2J0blNob3ciLCJfYnRuQ2xvc2UiLCJfd3JhcCIsIl9jb250ZW50cyIsIl9zY3JvbGxDb250ZWluZXIiLCJfdGltZXIiLCJfY2VudGVyV3JhcCIsInRvcCIsIl9nZXRTY3JvbGxXaWR0aCIsInNjcm9sbEJhcldpZHRoIiwic2Nyb2xsRGl2IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsIm9mZnNldFdpZHRoIiwiY2xpZW50V2lkdGgiLCJyZW1vdmVDaGlsZCIsIl9oaWRlIiwib3ZlcmZsb3dZIiwicGFkZGluZ1JpZ2h0IiwiX29uRXZlbnRzIiwiX3Nob3ciLCJfc2V0UG9wdXBDb250ZW50IiwiY3VyQ29udGVudCIsImZpbHRlciIsImRpc3BsYXkiLCJQcm9kdWN0U2xpZGVyIiwiRmVhdHVyZWRQcm9kdWN0c1NsaWRlciIsIl9jb25zdHJ1Y3RvciIsIl9pbml0U2xpZGVyIiwic2xpY2siLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Njcm9sbCIsImFycm93cyIsImluZmluaXRlIiwiYXNOYXZGb3IiLCJkb3RzIiwiY2VudGVyTW9kZSIsImZvY3VzT25TZWxlY3QiLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludCIsInNldHRpbmdzIiwiX3NsaWRlciIsIl9mbGFnIiwiX3BhZ2luYXRpb24iLCJfcHJldiIsIl9uZXh0IiwiX2xvb3AiLCJfZGVzdHJveSIsIl9hZGRTb21lUGFyYW1zIiwiYXV0b3BsYXkiLCJhdXRvcGxheVNwZWVkIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXBwZW5kRG90cyIsIldlYnN0ZXJzU2VsZWN0Iiwib3B0aW9uVHlwZSIsInNob3dUeXBlIiwicGFyYW1zIiwiX3BvcHVwIiwiX3Njcm9sbCIsIl9vcHRpb25UeXBlIiwiX3Nob3dUeXBlIiwiX3Zpc2libGUiLCJ2aXNpYmxlIiwiX2RldmljZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfdGV4dCIsIl9ib2R5IiwiX29wZW5lZCIsIl9hZGRXcmFwIiwiY3VyVGV4dCIsIm9wYWNpdHkiLCJ3cmFwIiwiYXBwZW5kIiwiYmVmb3JlIiwiZXEiLCJfaGlkZVBvcHVwIiwic3RvcCIsInJlbW92ZSIsImZhZGVPdXQiLCJfc2VsZWN0Vmlld1R5cGUiLCJwcmV2IiwiX3Nob3dQb3B1cCIsIl9zZXRNb2JpbGVWaWV3IiwiX3NldEN1c3RvbTEiLCJzZWxlY3RzIiwibGlzdCIsIm1heEhlaWdodCIsImN1ckluZGV4IiwiaW5kZXgiLCJpZCIsInJvdW5kIiwicmFuZG9tIiwiY2hlY2tPcGVuZWQiLCJjbG9zZSIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsImFuaW1hdGUiLCJ0cmlnZ2VyIiwiRmlsdGVycyIsIl9wYXRoIiwiX3JlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIl9idG4iLCJfYnRuMiIsIl9maWx0ZXJzIiwiX2Nsb3NlRmlsdGVycyIsIl9maWx0ZXJJdGVtIiwiX2ZpbHRlcmVkIiwiX2ZpbHRlcmVkTGlzdCIsIl9jb3VudEZpbHRlcmVkIiwiX3RpdGxlIiwiX3RpdGxlSW5uZXIiLCJfY2xlYXJGaWx0ZXJzIiwiX2FkZGl0aW9uYWxQYXJhbWV0ZXJzIiwiX2dsb2JhbENoZWNrRmxhZyIsIl9sb2FkaW5nIiwiX2lucHV0SGlkZGVuIiwiX2lucHV0SGlkZGVuUGFnZSIsIl9zb3J0aW5nUGFnZSIsIl9zb3J0aW5nRGF0ZSIsIl9kYXRhUmF0ZVBhdGgiLCJfYXBwbHkiLCJfb2JqVmFsdWUiLCJfdGltZW91dCIsIl9hcnIiLCJuZXh0RmlsdGVycyIsIm5leHQiLCJtaW4taGVpZ2h0Iiwiei1pbmRleCIsImxvYWQiLCJfY2xvc2VGaWx0ZXIiLCJfY2xlYXJGaWx0ZXIiLCJ2YWx1ZSIsIl9hZGRMb2FkaW5nIiwiX3JlcXVlc3RDb250ZW50IiwiZGF0YUlkIiwiZGF0YU5hbWUiLCJfY2xlYXJTaW5nbGVGaWx0ZXIiLCJjaGFuZ2UiLCJsYWJlbCIsImxhYmVsVGV4dCIsImNsb25lIiwiY2hpbGRyZW4iLCJlbmQiLCJjYXRlZ29yeU5hbWUiLCJpbm5lclRleHQiLCJjb3VudEdyb3VwQ2hlY2siLCJwcm9wIiwiX3dyaXRlSW5IaWRkZW4iLCJfYWRkaW5nRmlsdGVyZWRCeSIsInN1Ym1pdCIsIl9jbGVhckdyb3VwRmlsdGVycyIsIml0ZW1UZXh0IiwiaXRlbUlkIiwiaXRlbU5hbWUiLCJfY2xvc2VMb2FkaW5nIiwiX2NyZWF0ZVBhZ2luYXRpb24iLCJwYWdlcyIsInBhZ2VzQWxsIiwiYWN0aXZlUGFnZSIsImN1cnJlbnRQYWdlIiwicGFnaW5hdGlvbldyYXAiLCJfcGFzdGVOZXdQcm9kdWN0cyIsIm5ld0RhdGEiLCJwcm9kdWN0cyIsInByb2R1Y3RzV3JhcCIsIm5ld0FyclByaWNlUmFuZ2UiLCJwcmljZUl0ZW0iLCJwdXNoIiwicHJpY2VSYW5nZSIsInN0YXJ0aW5nUHJpY2UiLCJtaW4iLCJhcHBseSIsInByb2R1Y3QiLCJzYWxlUHJpY2UiLCJmZWF0dXJlZCIsInVybERldGFpbHMiLCJwaWN0dXJlIiwidGl0bGUiLCJyYXRlIiwic3RhcnNDb3VudCIsInVybFJldmlld3MiLCJyZXZpZXdzQ291bnQiLCJjb250ZW50IiwiZGVzY3JpcHRpb24iLCJzcGVjaWZpY2F0aW9uIiwiaGVhZCIsImFib3J0IiwiYWpheCIsInVybCIsImFjdGlvbiIsInBhZ2VTb3J0aW5nIiwiZGF0ZVNvcnRpbmciLCJpZENhdGVnb3J5IiwiYWRkaXRpb25hbFBhcmFtZXRlcnMiLCJzZXJpYWxpemUiLCJkYXRhVHlwZSIsInR5cGUiLCJzdWNjZXNzIiwibSIsImVycm9yIiwic3RhdHVzVGV4dCIsImNoZWNrRmxhZyIsImhhc093blByb3BlcnR5IiwiaW5kZXhPZiIsInNwbGljZSIsInN0ckZpbmlzaCIsInN0clZhbHVlcyIsInN0ckZ1bGwiLCJhcnJBbGwiLCJrZXkiLCJpdGVtIiwiU2VhcmNoIiwiX2lucHV0Iiwic3VnZ2VzdFNlbGVjdGVkIiwiY291bnRJdGVtcyIsInZhbHVlSW5wdXQiLCJfcmVzdWx0Iiwia2V5dXAiLCJJIiwia2V5Q29kZSIsIl9hamF4UmVxdWVzdCIsImxvY2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJfa2V5QWN0aXZhdGUiLCJfYWRkRGF0YSIsImNhdGVnb3JpZXMiLCJjYXRlZ29yaWVzQXZhaWxhYmlsaXR5IiwicHJvZHVjdHNBdmFpbGFiaWxpdHkiLCJhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIiLCJwcm9kdWN0c0NhdGVnb3JpZXNBcnIiLCJmbGFnIiwibWFpbkNhdGVnb3J5IiwidXJsTWFpbkNhdGVnb3J5Iiwic3ViY2F0ZWdvcmllcyIsInVybFN1YmNhdGVnb3JpZXMiLCJyZXN1bHRTdHIiLCJzdWJjYXRlZ29yaWVzV3JhcCIsInVybENhdGVnb3J5IiwieiIsImNvdW50IiwiaW5wdXQiLCJtc2ciLCJPYmplY3QiLCJrZXlzIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVJLEdBQUlBLElBQW1CLENBRXZCQyxHQUFFLFdBRUVBLEVBQUUsZUFBZUMsS0FBSyxXQUVsQixHQUFJQyxHQUFTRixFQUFFRyxPQUNmLEdBQUlDLEdBQU1KLEVBQUVHLFNBSWhCSCxFQUFFLGNBQWNDLEtBQUssV0FFakIsR0FBSUksR0FBWUwsRUFBRUcsU0FJdEJILEVBQUUsaUJBQWlCQyxLQUFLLFdBRXBCLEdBQUlJLEdBQVlMLEVBQUVHLFNBSXRCSCxFQUFFLGdCQUFnQkMsS0FBSyxXQUVuQkQsRUFBRUcsTUFBTUcsa0JBQ0pDLGtCQUFrQixNQUsxQlAsRUFBRSxhQUFhQyxLQUFLLFdBRWhCLEdBQUlPLEdBQWdCUixFQUFFRyxTQUkxQkgsRUFBRSxtQkFBbUJDLEtBQUssV0FFdEIsR0FBSVEsR0FBYVQsRUFBRUcsVUFNM0IsSUFBSUQsR0FBVSxTQUFVUSxHQUdwQixHQUFJQyxHQUFPRCxFQUNQRSxFQUFTRCxFQUFLRSxLQUFLLG9CQUNuQkMsRUFBU0gsRUFBS0UsS0FBSyxvQkFDbkJFLEVBQVVmLEVBQUVnQixRQUNaQyxFQUFVLEtBQ1ZDLEVBQWlCSCxFQUFRSSxRQUl6QkMsRUFBYSxXQUVUTCxFQUFRTSxJQUNKQyxPQUFRLFdBRUFKLEVBQWlCSCxFQUFRSSxVQUV6QkQsRUFBaUJILEVBQVFJLFFBRXpCSixFQUFRRixLQUFLLFdBQVdVLFlBQVksY0FNaER2QixFQUFFLFFBQVFxQixHQUFHLFFBQVMsbUJBQW9CLFdBRXRDLEdBQUlHLE9BQU9SLFFBQVFHLFFBQVUsSUFBTyxDQUVoQyxHQUFJTSxHQUFVRCxPQUFPckIsTUFDakJ1QixFQUFTRCxFQUFRQyxPQUFPLEtBRXZCQSxHQUFPQyxTQUFTLFVBRWpCRCxFQUFPSCxZQUFZLFVBSW5CRyxFQUFPRSxTQUFTLFVBTXhCLE9BQU8sSUFHWGQsRUFBT08sSUFDSFEsTUFBTyxXQUVILEdBQUlKLEdBQVVELE9BQU9yQixNQUNqQnVCLEVBQVNELEVBQVFLLFFBQVEsTUFDekJDLEVBQVVMLEVBQU9iLEtBQUssa0JBZ0IxQixPQWRJRSxHQUFRSSxRQUFVLE9BQ2JPLEVBQU9DLFNBQVMsV0FFakJELEVBQU9ILFlBQVksVUFDbkJRLEVBQVFDLFlBSVJOLEVBQU9FLFNBQVMsVUFDaEJHLEVBQVFFLGVBS1QsS0FHZnJCLEVBQU9TLElBQ0hhLFdBQVksV0FFUixHQUFJbkIsRUFBUUksU0FBVyxLQUFPLENBRTFCLEdBQUlNLEdBQVV6QixFQUFFRyxLQUNIc0IsR0FBUUMsT0FBTyxLQUU1QixJQUFJRCxFQUFRRSxTQUFTLHVCQUF5QixDQUUxQ0YsRUFBUUcsU0FBUyxTQUVqQixJQUFJRyxHQUFVTixFQUFRWixLQUFLLGtCQUVyQkUsR0FBUUksU0FBWVksRUFBUUksYUFBZVYsRUFBUVcsU0FBU0MsTUFBVyxFQUVqRVosRUFBUVcsU0FBU0MsS0FBT1osRUFBUVUsYUFBaUJKLEVBQVFJLGFBQWlCLEVBRTlFSixFQUFRTyxLQUNKRCxLQUFNLE1BQ05FLG9CQUFxQixtQkFDckJDLFVBQWEscUJBS2pCVCxFQUFRTyxLQUNKRCxLQUFNWixFQUFRZ0IsV0FBV0osS0FBT04sRUFBUUksYUFBZVYsRUFBUVUsZUFPdkVKLEVBQVFPLEtBQ0pELEtBQU1aLEVBQVFnQixXQUFXSixZQVdqRHJDLEVBQUUsa0JBQWtCcUIsSUFDaEJhLFdBQVksV0FFUixHQUFJbkIsRUFBUUksU0FBVyxLQUFPLENBRTFCbkIsRUFBRSw4QkFBOEI0QixTQUFTLFdBRXJDWCxJQUVBeUIsYUFBYXpCLEdBQ2JBLEVBQVUsS0FJZCxJQUFJUSxHQUFVekIsRUFBRUcsTUFFWndDLEVBQU9sQixFQUFRa0IsS0FBSyxVQUlwQjFCLEdBQVUyQixXQUFZLFdBQ2xCQyxRQUFRQyxJQUFJSCxHQUVaaEMsRUFBS0UsS0FBSyxxQkFBcUJBLEtBQUssNEJBQTRCa0MsS0FBS0osRUFBS0ssTUFDMUVyQyxFQUFLRSxLQUFLLHFCQUFxQkEsS0FBSyw4QkFBOEJvQyxLQUFLLE1BQU9OLEVBQUtPLEtBQ25GdkMsRUFBS0UsS0FBSyxxQkFBcUJBLEtBQUssUUFBUW9DLEtBQUssT0FBUU4sRUFBS1EsTUFDOUR4QyxFQUFLRSxLQUFLLHFCQUFxQkEsS0FBSyxpQ0FBaUNrQyxLQUFLSixFQUFLUyxPQUUzRVQsRUFBS1UsT0FDTDFDLEVBQUtFLEtBQUsscUJBQXFCQSxLQUFLLDZCQUE2QmUsU0FBUyxXQUUxRWpCLEVBQUtFLEtBQUsscUJBQXFCQSxLQUFLLDZCQUE2QlUsWUFBWSxXQUc3RW9CLEVBQUtXLFNBQ0wzQyxFQUFLRSxLQUFLLHFCQUFxQkEsS0FBSyxnQ0FBZ0NrQyxLQUFLSixFQUFLVyxVQUU5RTNDLEVBQUtFLEtBQUsscUJBQXFCQSxLQUFLLGdDQUFnQ2UsU0FBUyxXQUdsRixLQUVIWCxFQUFVMkIsV0FBWSxXQUVsQjVDLEVBQUUsOEJBQThCdUIsWUFBWSxZQUU3QyxTQVFuQlosRUFBS1UsR0FBSSxhQUFjLFdBRWZOLEVBQVFJLFNBQVcsTUFFbkJuQixFQUFFRyxNQUFNVSxLQUFLLFdBQVdVLFlBQVksWUFLNUNaLEVBQUtFLEtBQUssTUFBTVEsR0FBSSxhQUFjLFdBRTFCTixFQUFRSSxTQUFXLE1BRW5CbkIsRUFBRUcsTUFBTVUsS0FBSyxXQUFXVSxZQUFZLFlBSzVDWixFQUFLRSxLQUFLLE1BQU1RLEdBQUksYUFBYyxXQUUxQk4sRUFBUUksU0FBVyxNQUVuQm5CLEVBQUVHLE1BQU1vQixZQUFZLGFBT2hDZ0MsRUFBUSxXQUNKbkMsSUFPUm1DLE1BRUFuRCxFQUFPLFNBQVVNLEdBR2pCLEdBS0k4QyxHQVlBQyxFQWpCQUMsRUFBUXZELEtBQ1J3RCxFQUFRakQsRUFDUkssRUFBVWYsRUFBRWdCLFFBQ1o0QyxHQUFVLEVBR1ZDLEVBQVU3RCxFQUFFLGlCQUNaOEQsRUFBbUI5RCxFQUFFLHVCQUNyQitELEVBQWdCRixFQUFRRyxjQUN4QkMsRUFBV2pFLEVBQUUscUJBQ2JrRSxFQUFZbEUsRUFBRSx1QkFDZG1FLEVBQVVuRSxFQUFFLFdBQ1pvRSxFQUFjcEUsRUFBRSxlQUNoQnFFLEVBQWVyRSxFQUFFLG1CQUNqQnNFLEVBQVd0RSxFQUFFLHFCQUNidUUsRUFBUXZFLEVBQUUsU0FDVndFLEVBQU94RSxFQUFHLFFBTVZvQixHQUpXcEIsRUFBRSxrQkFJQSxXQUVUQSxFQUFFeUUsVUFBVXBELEdBQ1IsUUFDQSxVQUNBLFNBQVVxRCxHQUNOQSxFQUFRQSxHQUFTMUQsT0FBTzBELE1BRXBCQSxFQUFNQyxnQkFDTkQsRUFBTUMsa0JBRU5ELEVBQU1FLGNBQWUsSUFLakM1RSxFQUFFeUUsVUFBVXBELEdBQ1IsUUFDQSxPQUNBLFdBRUl3RCxNQUtSWixFQUFTNUMsSUFDTFEsTUFBTyxXQUVIaUQsRUFBVTlFLEVBQUVHLFVBSXBCK0QsRUFBVTdDLElBQ05RLE1BQU8sV0FJSCxNQUZBa0QsTUFFTyxLQUlmWCxFQUFZL0MsSUFDUlEsTUFBTyxXQUlILE1BRkFtRCxHQUFlaEYsRUFBRUcsUUFFVixLQUlma0UsRUFBYWhELElBQ1RRLE1BQU8sV0FJSCxNQUZBZ0QsTUFFTyxLQUlmOUQsRUFBUU0sSUFDSjRELE9BQVEsU0FBV0MsR0FDZkMsSUFDQXZCLEVBQVU3QyxFQUFRcUUsYUFBZXJCLEVBR04sR0FBdkJoRCxFQUFRcUUsYUFDUnZCLEVBQVF0QyxZQUFZLHdCQUk1QjhELGVBQWdCLFNBQVVILEdBRXRCLEdBQUlJLEdBQVFKLEVBQUVLLGNBQWNDLE1BRTVCLElBQUlGLEVBQU8sQ0FDUCxHQUFJRyxHQUFhSCxFQUFRLEVBQUssSUFFOUJJLEdBQWFELEtBS3JCRSxXQUFZLFNBQVVULEdBRWxCLEdBQUlJLEdBQVFKLEVBQUVLLGNBQWNLLFVBRTVCLElBQUlOLEVBQU8sQ0FDUCxHQUFJRyxHQUFhSCxFQUFRLEtBQVUsQ0FFbkNJLEdBQWFELEtBS3JCSSxVQUFXLFNBQVVYLEdBRWpCLEdBQUlZLEdBQWFaLEVBQUVLLGNBQWNRLFFBQVEsR0FBR0MsT0FFeENGLEdBQWF0QyxFQUVia0MsTUFHT0ksRUFBYXRDLEdBRXBCa0MsRUFBYSxHQUlqQmxDLEVBQVdzQyxHQUdmRyxRQUFTLFNBQVVmLEdBQ2YsT0FBUUEsRUFBRWdCLE9BRU4sSUFBSyxJQUNEUixFQUFhLEVBQ2IsTUFDSixLQUFLLElBQ0RBLEtBQ0EsTUFDSixLQUFLLElBQ0RBLEVBQWEsRUFDYixNQUNKLEtBQUssSUFDREEsRUFBYSxFQUNiLE1BQ0osS0FBSyxJQUNEQSxLQUNBLE1BQ0osS0FBSyxJQUNEQSxLQUNBLE1BQ0osS0FBSyxJQUNEQSxFQUFhLEVBQ2IsTUFFSixTQUNJLFNBR1pwRSxPQUFRLFdBRUFQLEVBQVFJLFNBQVMsT0FFakJvRCxFQUFNakMsS0FDRjZELE9BQVUsS0FHZHZELFdBQVksV0FFSjJCLEVBQU00QixTQUFXcEYsRUFBUW9GLFVBQ3pCM0IsRUFBS2xDLEtBQ0Q4RCxhQUFjLE1BSXZCLFVBUW5CVixFQUFlLFNBQVVELEdBRWpCQSxFQUFZLElBQU01QixFQUFRbEMsU0FBUyx5QkFBMkJzQyxFQUFTdEMsU0FBUyxXQUFhaUMsR0FFN0ZDLEVBQVFqQyxTQUFTLHVCQUlqQjZELEVBQVksR0FBSzVCLEVBQVFsQyxTQUFTLHlCQUEyQnNDLEVBQVN0QyxTQUFTLFdBQWFpQyxHQUFXN0QsR0FFdkc4RCxFQUFRdEMsWUFBWSx3QkFLNUI0RCxFQUFlLFdBRVBwRSxFQUFRcUUsWUFBY3JCLEVBQWdCLElBRXRDRixFQUFRakMsU0FBUyxTQUtqQmlDLEVBQVF0QyxZQUFZLFVBSzVCdUQsRUFBWSxTQUFVdUIsR0FFbEIsR0FBSTVFLEdBQVU0RSxDQUVWNUUsR0FBUUUsU0FBUyxXQUVqQkYsRUFBUUYsWUFBWSxVQUNwQnVDLEVBQWlCdkMsWUFBWSxZQUk3QkUsRUFBUUcsU0FBUyxVQUNqQmtDLEVBQWlCbEMsU0FBUyxXQUk5QjZCLEVBQWdCMUMsRUFBUXFFLFlBR3hCeEMsV0FBWSxXQUVKMkIsRUFBTTRCLFNBQVdwRixFQUFRb0YsVUFDekIzQixFQUFLbEMsS0FDRDhELGFBQWMsV0FJdEJ4RCxXQUFZLFdBRVIyQixFQUFNakMsS0FDRjZELE9BQVUsVUFHZixLQUVKLE1BR1BuQixFQUFpQixTQUFVcUIsR0FFdkIsR0FBSTVFLEdBQVU0RSxDQUVWNUUsR0FBUUUsU0FBUyxXQUVqQkYsRUFBUUYsWUFBWSxVQUNwQjRDLEVBQVE1QyxZQUFZLFVBQ3BCK0MsRUFBUy9DLFlBQVksWUFJckJFLEVBQVFHLFNBQVMsVUFDakJ1QyxFQUFRdkMsU0FBUyxVQUNqQjBDLEVBQVMxQyxTQUFTLFlBSzFCbUQsRUFBYSxXQUVUZCxFQUFTMUMsWUFBWSxVQUNyQnVDLEVBQWlCdkMsWUFBWSxVQUM3QjRDLEVBQVF0RCxLQUFLLFNBQVN5RixXQUd0Qi9CLEVBQU1qQyxLQUNGNkQsT0FBVSxLQUdkdkQsV0FBWSxXQUVKMkIsRUFBTTRCLFNBQVdwRixFQUFRb0YsVUFDekIzQixFQUFLbEMsS0FDRDhELGFBQWMsS0FJdEJyRixFQUFRcUUsVUFBVzNCLElBRXBCLEtBR1BvQixFQUFrQixXQUVkVCxFQUFZN0MsWUFBWSxVQUN4QjRDLEVBQVE1QyxZQUFZLFVBQ3BCK0MsRUFBUy9DLFlBQVksV0FHekJnQyxFQUFRLFdBQ0pJLEVBQU0sR0FBR2pELElBQU1nRCxFQUNmdEMsSUFDQStELElBR1I1QixNQUVBbEQsRUFBYSxTQUFVSyxHQUd2QixHQUFJQyxHQUFPRCxFQUNQSyxFQUFVZixFQUFFZ0IsUUFDWnVGLEVBQWtCeEYsRUFBUUksUUFJMUJDLEVBQWEsV0FFVEwsRUFBUU0sSUFDSkMsT0FBUSxXQUVDaUYsR0FBbUJ4RixFQUFRSSxVQUU1Qm9GLEVBQWtCeEYsRUFBUUksUUFFMUJxRixTQU1oQkEsRUFBYSxXQUVUN0YsRUFBSzJCLEtBQ0RtRSxVQUFXLEtBRWY5RixFQUFLMkIsS0FDRG1FLFVBQVcxRixFQUFRb0YsU0FBV25HLEVBQUUsaUJBQWlCZ0UsY0FBZ0JoRSxFQUFFLGlCQUFpQmdFLGNBQWdCaEUsRUFBRSxnQkFBZ0JnRSxpQkFJOUhULEVBQVEsV0FDSm5DLElBQ0FvRixJQU9SakQsTUFFQS9DLEVBQWlCLFNBQVVFLEdBRzNCLEdBQUlDLEdBQU9ELEVBQ1BnRyxFQUFjL0YsRUFBS0UsS0FBSyxnQkFJeEJPLEVBQWEsYUFHYm9GLEVBQWEsV0FFVDdGLEVBQUsyQixLQUNEbUUsVUFBV0MsRUFBWTFDLGlCQUkvQlQsRUFBUSxXQUNKbkMsSUFDQW9GLElBT1JqRCxNQUdBOUMsRUFBYyxTQUFVQyxHQUV4QmlHLE9BQU9DLFVBQVVDLFlBQWMsU0FBU0MsRUFBR0MsRUFBR0MsR0FDMUMsR0FBSUMsR0FBSTlHLEtBQ0oyRyxFQUFJSSxNQUFNSixFQUFJSyxLQUFLQyxJQUFJTixJQUFNLEVBQUlBLEVBQ2pDQyxFQUFTTSxRQUFMTixFQUFpQixJQUFNQSxFQUMzQkMsRUFBU0ssUUFBTEwsRUFBaUIsSUFBTUEsRUFDM0JNLEVBQUlMLEVBQUksRUFBSSxJQUFNLEdBQ2xCTSxFQUFJQyxPQUFPQyxTQUFTUixFQUFJRSxLQUFLQyxJQUFJVCxPQUFPTSxJQUFNLEdBQUdTLFFBQVFaLEtBQ3pEYSxHQUFLQSxFQUFJSixFQUFFSyxRQUFVLEVBQUlELEVBQUksRUFBSSxDQUNyQyxPQUFPTCxJQUFLSyxFQUFJSixFQUFFTSxPQUFPLEVBQUdGLEdBQUtYLEVBQUksSUFBTU8sRUFBRU0sT0FBT0YsR0FBR0csUUFBUSxpQkFBa0IsS0FBT2QsSUFBTUYsRUFBSUMsRUFBSUksS0FBS0MsSUFBSUgsRUFBSU0sR0FBR0csUUFBUVosR0FBR2lCLE1BQU0sR0FBSyxLQUdoSi9ILEVBQUUsb0JBQW9CcUIsR0FBRyxTQUFVLFdBQ2hDLEdBQUkyRyxHQUFZaEksRUFBRSxlQUFlYSxLQUFLLFVBQ2xDb0gsRUFBVSxDQVFkLElBTEFELEVBQVUvSCxLQUFLLFNBQVVpSSxHQUNsQmxJLEVBQUdHLE1BQU9nSSxPQUNURixNQUdMQSxJQUFZRCxFQUFVSixPQUFRLENBQzdCLEdBQUl4RSxHQUFRcEQsRUFBRSxlQUFlK0MsT0FDekJxRixFQUFTcEksRUFBRSxvQkFBb0IrQyxNQUVuQ0ssR0FBUWlGLFdBQVlqRixFQUFNMkUsTUFBTSxHQUFHTyxNQUFNLEtBQU1DLEtBQUssS0FFcERDLFNBQVd4SSxFQUFFLHFDQUFxQ2EsS0FBSyxVQUN2RDJILFNBQVN2SSxLQUFLLFdBQ1YsR0FBSXdJLEdBQVN6SSxFQUFHRyxNQUFPZ0ksS0FFcEJNLEdBQVMsR0FDUnpJLEVBQUdHLE1BQU9VLEtBQUssVUFBVVosS0FBSyxXQUN2QkQsRUFBRUcsTUFBTWdJLFFBQVVNLElBQ2pCckYsR0FBU3BELEVBQUVHLE1BQU13QyxLQUFLLGNBS3RDM0MsRUFBRSxVQUFVc0MsSUFBSSxVQUFXLFFBQzNCdEMsRUFBRSxtQ0FBbUMwSSxLQUFLLFNBQVNOLEVBQU8sVUFBVWhGLEVBQU15RCxZQUFZLEVBQUcsSUFBSztDQ3ByQjdHLFdBRUk3RyxFQUFHLFdBRUNBLEVBQUcsVUFBV0MsS0FBSyxXQUVmLEdBQUkwSSxHQUFNM0ksRUFBRUcsVUFNcEIsSUFBSXdJLEdBQVEsU0FBVWpJLEdBR2xCLEdBQUlnRCxHQUFRdkQsS0FDUnlJLEVBQWdCLEdBQ2hCQyxFQUFZN0ksRUFBRyxnQkFDZlcsRUFBT0QsRUFDUG9JLEVBQVluSSxFQUFLRSxLQUFNLGlDQUN2QmtJLEVBQVFwSSxFQUFLRSxLQUFNLGdCQUNuQm1JLEVBQVlySSxFQUFLRSxLQUFNLG1CQUN2Qm9JLEVBQW1CakosRUFBRyxRQUN0QmUsRUFBVWYsRUFBR2dCLFFBQ2JrSSxFQUFTdEcsV0FBWSxhQUFjLEdBR25DdUcsRUFBYyxXQUNMcEksRUFBUW9GLFNBQTZCLEVBQWhCeUMsRUFBc0JHLEVBQU01QyxTQUFXLEVBQzdENEMsRUFBTXpHLEtBQU84RyxLQUFTckksRUFBUW9GLFNBQTZCLEVBQWhCeUMsRUFBd0JHLEVBQU01QyxVQUFhLElBRXRGNEMsRUFBTXpHLEtBQU84RyxJQUFLLEtBRzFCQyxFQUFrQixXQUNkLEdBQ0lDLEdBREFDLEVBQVk5RSxTQUFTK0UsY0FBZSxNQVd4QyxPQVJBRCxHQUFVRSxVQUFZLDJCQUV0QmhGLFNBQVNpRixLQUFLQyxZQUFhSixHQUUzQkQsRUFBaUJDLEVBQVVLLFlBQWNMLEVBQVVNLFlBRW5EcEYsU0FBU2lGLEtBQUtJLFlBQVlQLEdBRW5CRCxHQUVYUyxFQUFRLFdBQ0pwSixFQUFLMkIsS0FDRDBILFVBQVcsV0FFZmYsRUFBaUIzRyxLQUNiMEgsVUFBVyxPQUNYQyxhQUFjLElBR2xCdEosRUFBS1ksWUFBYSxnQkFDbEJaLEVBQUtpQixTQUFVLGNBRWZzSCxFQUFTdEcsV0FBWSxXQUVqQmpDLEVBQUsyQixLQUNEMEgsVUFBVyxTQUdmckosRUFBS1ksWUFBYSxlQUNuQixNQUdQZ0MsRUFBUSxXQUNKNUMsRUFBTSxHQUFJRCxJQUFNZ0QsRUFDaEJ3RyxLQUVKQSxFQUFZLFdBQ1JuSixFQUFRTSxJQUNKQyxPQUFRLFdBQ0o2SCxPQUdSTixFQUFTeEgsSUFDTFEsTUFBTyxXQUVILE1BREFzSSxHQUFPbkssRUFBR0csTUFBTzhDLEtBQU0sZ0JBQ2hCLEtBR2YrRixFQUFVbkksS0FBSyxRQUFRUSxJQUNuQlEsTUFBTyxTQUFVcUQsR0FDYkEsRUFBRVAscUJBR1ZoRSxFQUFLVSxJQUNEUSxNQUFPLFdBRUgsTUFEQWtJLE1BQ08sS0FHZmpCLEVBQVV6SCxJQUNOUSxNQUFPLFdBRUgsTUFEQWtJLE1BQ08sTUFJbkJJLEVBQVEsU0FBVVYsR0FDZFcsRUFBa0JYLEdBRWxCUixFQUFpQjNHLEtBQ2IwSCxVQUFXLFNBQ1hDLGFBQWNaLE1BRWxCMUksRUFBS2lCLFNBQVUsZ0JBQ2Z1SCxLQUdKaUIsRUFBbUIsU0FBVVgsR0FDekIsR0FBSVksR0FBYXJCLEVBQVVzQixPQUFRLFdBQWFiLEVBRWhEVCxHQUFVMUcsS0FBT2lJLFFBQVMsU0FDMUJGLEVBQVcvSCxLQUFPaUksUUFBUyxVQVFuQ2hIO0FDL0hSLGNBQ0EsV0FFSXZELEVBQUcsV0FFQ0EsRUFBRUMsS0FBTUQsRUFBRyxvQkFBc0IsV0FFN0IsR0FBSXdLLEdBQWdCeEssRUFBR0csU0FJM0JILEVBQUVDLEtBQU1ELEVBQUcsc0JBQXdCLFdBRS9CLEdBQUl5SyxHQUF5QnpLLEVBQUdHLFVBS3hDLElBQUlxSyxHQUFnQixTQUFVOUosR0FHMUIsR0FBSWdELEdBQVF2RCxLQUNSUSxFQUFPRCxFQUdQZ0ssRUFBZSxXQUNYL0osRUFBTSxHQUFJRCxJQUFNZ0QsRUFDaEJpSCxLQUVKQSxFQUFjLFdBRVYzSyxFQUFFLGVBQWU0SyxPQUNiQyxhQUFjLEVBQ2RDLGFBQWMsRUFDZEMsZUFBZ0IsRUFDaEJDLFFBQVEsRUFDUkMsVUFBVSxFQUNWQyxTQUFVLGdCQUVkbEwsRUFBRSxlQUFlNEssT0FDYkMsYUFBYyxFQUNkQyxhQUFjLEVBQ2RJLFNBQVUsY0FDVkMsTUFBTSxFQUNOSCxRQUFRLEVBQ1JDLFVBQVUsRUFDVkcsWUFBWSxFQUNaQyxlQUFlLEVBQ2ZDLGFBRVFDLFdBQVksS0FDWkMsVUFDSVgsYUFBYyxFQUNkRSxlQUFnQixLQUlwQlEsV0FBWSxLQUNaQyxVQUNJWCxhQUFjLEVBQ2RFLGVBQWdCLEtBSXBCUSxXQUFZLElBQ1pDLFVBQ0lYLGFBQWMsRUFDZEUsZUFBZ0IsT0FReENMLE1BRUFELEVBQXlCLFNBQVUvSixHQUduQyxHQUVJK0ssR0FFQUMsRUFKQWhJLEVBQVF2RCxLQUNSUSxFQUFPRCxFQUVQSyxFQUFVZixFQUFFZ0IsUUFFWjJLLEVBQWNoTCxFQUFLRSxLQUFLLHNCQUN4QitLLEVBQVFqTCxFQUFLRSxLQUFLLHVCQUNsQmdMLEVBQVFsTCxFQUFLRSxLQUFLLHVCQUNsQmlMLEdBQVEsRUFHUnBCLEVBQWUsV0FDWC9KLEVBQU0sR0FBSUQsSUFBTWdELEVBQ2hCdEMsSUFFSUwsRUFBUUksU0FBVyxJQUVuQnVLLEdBQVEsR0FJUkEsR0FBUSxFQUNSZixNQUtSdkosRUFBYSxXQUVUTCxFQUFRTSxJQUNKQyxPQUFRLFdBRUFQLEVBQVFJLFNBQVcsSUFFZnVLLElBRUFBLEdBQVEsRUFDUkssS0FNQ0wsSUFFREEsR0FBUSxFQUNSZixTQVdwQm9CLEVBQVcsV0FFUE4sRUFBUWIsTUFBTSxZQUdsQkQsRUFBYyxXQUVWcUIsSUFFQVAsRUFBVXpMLEVBQUUsK0JBQStCNEssT0FDdkNPLE1BQU0sRUFDTk4sYUFBYyxFQUNkRSxlQUFnQixFQUNoQmtCLFVBQVUsRUFDVkMsY0FBZSxJQUNmQyxVQUFXUCxFQUNYUSxVQUFXUCxFQUNYUSxXQUFhVixFQUNiTCxhQUVRQyxXQUFZLEtBQ1pDLFVBQ0lYLGFBQWMsUUFPbENtQixFQUFpQixXQUVUakwsRUFBUUksU0FBVyxLQUVmUixFQUFLRSxLQUFLLDZCQUE2QitHLFFBQVUsSUFFakRrRSxHQUFRLEdBSUovSyxFQUFRSSxTQUFXLE1BRXZCUixFQUFLRSxLQUFLLDZCQUE2QitHLFFBQVUsSUFFakRrRSxHQUFRLEdBTVpBLEdBRUFuTCxFQUFLRSxLQUFLLGdDQUFnQ3lCLEtBQ3RDaUksUUFBUyxTQU96Qkc7Q0NwTVIsV0FFSTFLLEVBQUcsV0FDQ0EsRUFBRyxVQUFXQyxLQUFNLFdBQ2hCLEdBQUlxTSxJQUNBNUwsSUFBS1YsRUFBR0csTUFDUm9NLFdBQVksRUFDWkMsU0FBVSxPQU10QixJQUFJRixHQUFpQixTQUFVRyxHQUczQixHQVdJQyxHQUFRQyxFQVhSakosRUFBUXZELEtBQ1JRLEVBQU84TCxFQUFPL0wsSUFDZGtNLEVBQWNILEVBQU9GLFlBQWMsRUFDbkNNLEVBQVlKLEVBQU9ELFVBQVksRUFDL0JNLEVBQVdMLEVBQU9NLFNBQVcsRUFDN0JDLEVBQVUsaUVBQWlFQyxLQUFNQyxVQUFVQyxXQUMzRkMsRUFBUXBOLEVBQUcsK0NBQ1grSSxFQUFRL0ksRUFBRyx1Q0FDWGUsRUFBVWYsRUFBR2dCLFFBQ2JxTSxFQUFRck4sRUFBRyxRQUNYc04sR0FBVSxFQUlWQyxFQUFXLFdBQ1AsR0FBSUMsR0FBVSxFQUVkN00sR0FBSzJCLEtBQ0RtTCxRQUFTLElBR2I5TSxFQUFLK00sS0FBTTNFLEdBQ1hBLEVBQVFwSSxFQUFLZSxTQUNicUgsRUFBTTRFLE9BQVEsOENBQ2RoTixFQUFLaU4sT0FBUVIsR0FDYnpNLEVBQUtFLEtBQU0sVUFBV1osS0FBTSxXQUN4QixHQUFJd0IsR0FBVXpCLEVBQUdHLEtBRWlCLGFBQTlCc0IsRUFBUXdCLEtBQU0sY0FDZHVLLEVBQVUvTCxFQUFRc0IsVUFJWCxJQUFYeUssSUFDQUEsRUFBVzdNLEVBQUtFLEtBQU0sVUFBVWdOLEdBQUksR0FBSTlLLFFBRTVDcUssRUFBTXJLLEtBQU15SyxJQUVoQk0sRUFBYSxXQUNUUixHQUFVLEVBRUxULEVBSW1CLEdBQWJBLEVBQ1BILEVBQU9xQixNQUFNLEdBQU0sR0FBUS9MLFFBQVMsSUFBSyxXQUNyQzBLLEVBQU9zQixXQUVTLEdBQWJuQixHQUNQSCxFQUFPcUIsTUFBTSxHQUFNLEdBQVFFLFFBQVMsSUFBSyxXQUNyQ3ZCLEVBQU9zQixXQVRYdEIsRUFBT3BLLEtBQ0hpSSxRQUFTLFNBWWpCeEIsRUFBTXhILFlBQWEsMkJBR3ZCbUosRUFBZSxXQUNYL0osRUFBTSxHQUFJRCxJQUFNZ0QsRUFFaEI2SixJQUNBVyxJQUNBaEUsS0FFSkEsRUFBWSxXQUNSdkosRUFBS1UsR0FBSSxTQUFVLFdBQ2YrTCxFQUFNckssS0FBTS9DLEVBQUdHLE1BQU9VLEtBQU0sbUJBQW9Ca0MsVUFHcEQvQyxFQUFFeUUsVUFBVXBELEdBQ1IsU0FDQSxTQUNBLFdBQ0lyQixFQUFHRyxNQUFNZ08sT0FBT3BMLEtBQU0vQyxFQUFHRyxNQUFPVSxLQUFNLG1CQUFvQmtDLFVBSS9DLEdBQWY2SixHQUFxQkksR0FDckJqRSxFQUFNMUgsSUFDRlEsTUFBUyxTQUFVcUQsR0FDZkEsRUFBRVAsa0JBRUUySSxFQUNBUSxJQUVBTSxPQU1oQmYsRUFBTWhNLElBQ0ZRLE1BQVMsV0FDRHlMLEdBQ0FRLE9BS1ovTSxFQUFRTSxJQUNKNEQsT0FBVSxXQUNGcUksR0FDQVEsUUFNaEJJLEVBQWtCLFlBRVR0QixHQUFlSSxFQUNoQnFCLElBQ3NCLEdBQWZ6QixHQUNQMEIsS0FHUkEsRUFBYyxXQUNWdkYsRUFBTW5ILFNBQVUsMkJBRXBCeU0sRUFBaUIsV0FDYnRGLEVBQU1uSCxTQUFVLDJCQUVwQndNLEVBQWEsV0FDVCxHQUFJRyxHQUFVdk8sRUFBRyxVQUNid08sRUFBT3hPLEVBQUcsYUFFVm9DLEdBRFlyQixFQUFRcUUsWUFDWDJELEVBQU0zRyxVQUNmcU0sRUFBWSxFQUNaQyxFQUFXL04sRUFBS0UsS0FBTSxtQkFBb0I4TixRQUMxQ0MsRUFBS3pILEtBQUswSCxNQUF1QixJQUFoQjFILEtBQUsySCxTQUUxQlAsR0FBUXRPLEtBQU0sV0FDTkUsT0FBU1EsRUFBTSxJQUFPUixLQUFLTyxJQUFJcU8sZUFDL0I1TyxLQUFLTyxJQUFJc08sVUFJYjFCLEdBQ0FaLEVBQU9zQixTQUVYVixHQUFVLEVBRVZaLEVBQVMxTSxFQUFHLGlFQUFtRTRPLEVBQUssWUFFcEZqTyxFQUFLRSxLQUFNLFVBQVdaLEtBQU0sU0FBVXNILEdBQ2xDLEdBQUk5RixHQUFVekIsRUFBR0csS0FFYm9ILElBQUttSCxFQUNMRixFQUFLYixPQUFRLHNCQUF3QmxNLEVBQVFzQixPQUFTLFNBRXREeUwsRUFBS2IsT0FBUSxPQUFTbE0sRUFBUXNCLE9BQVMsV0FLL0MySixFQUFPaUIsT0FBUWEsR0FDZm5CLEVBQU1NLE9BQVFqQixHQUNkM0QsRUFBTW5ILFNBQVUsMEJBRWhCOEssRUFBT3BLLEtBQ0huQixNQUFPNEgsRUFBTWtHLGFBQ2I1TSxLQUFNRCxFQUFPQyxLQUNiK0csSUFBS2hILEVBQU9nSCxJQUFNTCxFQUFNbUcsZ0JBRzVCVCxFQUFZL0IsRUFBT3dDLGNBQ2ZULEVBQVkvQixFQUFPN0wsS0FBTSxNQUFPZ04sR0FBSSxHQUFJcUIsY0FBZ0JwQyxJQUN4REosRUFBT3ZHLE9BQVF1RyxFQUFPN0wsS0FBTSxNQUFPZ04sR0FBSSxHQUFJcUIsY0FBZ0JwQyxHQUMzREgsRUFBVUQsRUFBT3BNLG9CQUdKLEdBQWJ1TSxHQUNBSCxFQUFPcEssS0FDSGlJLFFBQVMsU0FFYm1DLEVBQU96SyxVQUFXLE1BQ0UsR0FBYjRLLElBQ1BILEVBQU9wSyxLQUNIbUwsUUFBUyxLQUViZixFQUFPeUMsU0FBVzFCLFFBQVMsR0FBSyxNQUdwQ2YsRUFBTzdMLEtBQU0sTUFBT1EsSUFDaEJRLE1BQVMsU0FBVXFELEdBQ2YsR0FBSXlKLEdBQVEzTyxFQUFHRyxNQUFPd08sT0FFdEJ6SixHQUFFUCxrQkFFRmhFLEVBQUt3SCxJQUFLeEgsRUFBS0UsS0FBTSxVQUFXZ04sR0FBSWMsR0FBUTFMLEtBQU0sVUFDbER0QyxFQUFLeU8sUUFBUyxVQUNkdEIsT0FTaEJwSyxHQUFNcUwsWUFBYyxXQUNoQixNQUFPekIsSUFFWDVKLEVBQU1zTCxNQUFRLFdBQ1ZsQixLQUlKcEQ7Q0NqT1IsV0FFSTFLLEVBQUUsV0FFRUEsRUFBRSxhQUFhQyxLQUFLLFdBRWhCLEdBQUlvUCxHQUFTclAsRUFBRUcsVUFNdkIsSUFBSWtQLEdBQVUsU0FBVTNPLEdBR3BCLEdBQUlDLEdBQU9ELEVBQ1A0TyxFQUFRdFAsRUFBRSxRQUFRMkMsS0FBSyxVQUN2QjRNLEVBQVcsR0FBSUMsZ0JBQ2ZDLEVBQU85TyxFQUFLRSxLQUFLLGdDQUNqQjZPLEVBQVEvTyxFQUFLRSxLQUFLLDRCQUNsQjhPLEVBQVdoUCxFQUFLRSxLQUFLLDRCQUVyQitPLEdBRFFELEVBQVM5TyxLQUFLLFFBQ05GLEVBQUtFLEtBQUssOEJBQzFCZ1AsRUFBY2xQLEVBQUtFLEtBQUssMkJBQ3hCaVAsRUFBWW5QLEVBQUtFLEtBQUssdUJBQ3RCa1AsRUFBZ0JwUCxFQUFLRSxLQUFLLDRCQUMxQm1QLEVBQWlCLEVBQ2pCQyxFQUFTdFAsRUFBS0UsS0FBSyw0QkFDbkJxUCxFQUFjdlAsRUFBS0UsS0FBSyxrQ0FDeEJzUCxFQUFnQnhQLEVBQUtFLEtBQUssc0RBRTFCdVAsR0FEZXpQLEVBQUtFLEtBQUssOEJBQ0RGLEVBQUtFLEtBQUssK0JBQ2xDd1AsR0FBbUIsRUFDbkJDLEVBQVd0USxFQUFFLCtCQUNidVEsRUFBZTVQLEVBQUtFLEtBQUssa0NBQ3pCMlAsRUFBbUI3UCxFQUFLRSxLQUFLLG1DQUM3QjRQLEVBQWU5UCxFQUFLRSxLQUFLLGVBQ3pCNlAsRUFBZS9QLEVBQUtFLEtBQUssaUJBQ3pCOFAsRUFBZ0JoUSxFQUFLRSxLQUFLLG1CQUFtQjhCLEtBQUssYUFDbERpTyxFQUFTalEsRUFBS0UsS0FBSyw0QkFDbkJFLEVBQVVmLEVBQUVnQixRQUNaNlAsS0FDQUMsRUFBVyxLQUNYQyxLQVNBM1AsR0FKaUJULEVBQUtFLEtBQUssc0JBSWQsV0FFVEUsRUFBUU0sSUFDSkMsT0FBUSxXQUVKbU8sRUFBS3hQLEtBQU0sV0FFUCxHQUFJd0IsR0FBVXpCLEVBQUVHLE1BQ1p1QixFQUFTRCxFQUFRQyxTQUNqQnNQLEVBQWN2UCxFQUFRd1AsTUFFdEJ2UCxHQUFPQyxTQUFTLFdBRWhCcVAsRUFBWTFPLEtBQ1I0TyxhQUFjRixFQUFZblEsS0FBSyxRQUFRbUQsa0JBTy9DakQsRUFBUUksU0FBVyxNQUVuQm5CLEVBQUUsa0JBQWtCc0MsS0FBTzZPLFVBQVcsTUFLOUNDLEtBQU0sZUFLVjNCLEVBQUtwTyxJQUNEUSxNQUFPLFdBRUgsR0FBSUosR0FBVXpCLEVBQUVHLE1BQ1p1QixFQUFTRCxFQUFRQyxTQUNqQnNQLEVBQWN2UCxFQUFRd1AsTUFFdEJ2UCxHQUFPQyxTQUFTLFdBRWhCRCxFQUFPSCxZQUFZLFVBQ25CeVAsRUFBWTFPLEtBQ1I0TyxhQUFjLEVBQ2QvSyxPQUFRLE1BS1p6RSxFQUFPRSxTQUFTLFVBQ2hCb1AsRUFBWTFPLEtBQ1I0TyxhQUFjRixFQUFZblEsS0FBSyxRQUFRbUQsZ0JBRTNDcEIsV0FBWSxXQUVSb08sRUFBWTFPLEtBQ1I2RCxPQUFVLFVBR2YsU0FNZnVKLEVBQU1yTyxJQUNGUSxNQUFPLFdBRUh3UCxPQUlSbEIsRUFBYzlPLElBQ1ZRLE1BQU8sV0FLSCxNQUhBMk8sR0FBaUJySSxJQUFJLEtBQ3JCbUosS0FFTyxLQUdmdFIsRUFBRXlFLFVBQVVwRCxHQUNSLFFBQ0EsZ0JBQ0EsV0FDSSxHQUFJSSxHQUFVekIsRUFBRUcsTUFDWm9SLEVBQVE5SixTQUFTaEcsRUFBUXNCLE9BbUM3QixPQWpDSXRCLEdBQVFFLFNBQVMsb0JBRXlCLEdBQXRDOEYsU0FBVStJLEVBQWlCckksU0FFM0JxSSxFQUFpQnJJLElBQUtxSSxFQUFpQnJJLE1BQVEsR0FDL0NxSixJQUNBQyxLQUtHaFEsRUFBUUUsU0FBUyxvQkFFakJGLEVBQVEwTSxPQUFPeE0sU0FBUyxZQUUzQjZPLEVBQWlCckksSUFBS1YsU0FBVStJLEVBQWlCckksT0FBVSxHQUMzRHFKLElBQ0FDLEtBTUFGLEdBQVM5SixTQUFVK0ksRUFBaUJySSxTQUVwQ3FJLEVBQWlCckksSUFBSW9KLEdBQ3JCQyxJQUNBQyxNQU1ELElBR2Z6UixFQUFFeUUsVUFBVXBELEdBQ1IsUUFDQSw2QkFDQSxXQUNJLEdBQUlJLEdBQVV6QixFQUFFRyxNQUNadUIsRUFBU0QsRUFBUUMsU0FDakJnUSxFQUFTaFEsRUFBT2lCLEtBQUssTUFDckJnUCxFQUFXalEsRUFBT2lCLEtBQUssT0FLM0IsT0FIQTZOLEdBQWlCckksSUFBSSxLQUNyQnlKLEVBQW9CRixFQUFRQyxJQUVyQixJQUdmL0IsRUFBY3ZPLElBQ1ZRLE1BQU8sV0FJSCxNQUZBd1AsTUFFTyxLQUlmVCxFQUFPdlAsSUFDSFEsTUFBTyxXQUlILE1BRkF3UCxNQUVPLEtBSWZ4QixFQUFZaFAsS0FBSyx3QkFBd0JRLElBQ3JDd1EsT0FBUSxXQUVKLEdBQUlwUSxHQUFVekIsRUFBRUcsTUFDWjJSLEVBQVFyUSxFQUFRd1AsT0FDaEJjLEVBQVlELEVBQU1FLFFBQVFDLFdBQVdqRSxTQUFTa0UsTUFBTW5QLE9BQ3BEQyxFQUFPdkIsRUFBUXdCLEtBQUssUUFDcEIyTCxFQUFLbk4sRUFBUWtCLEtBQUssTUFDbEJ3UCxFQUFlMVEsRUFBUUssUUFBUSwyQkFBMkJqQixLQUFLLFFBQVEsR0FBR3VSLFVBQzFFQyxFQUFrQnhDLEVBQVloUCxLQUFLLGNBQWVtQyxFQUFNLGFBQWE0RSxNQUV6RXlJLEdBQW1CNU8sRUFBUTZRLEtBQUssV0FFNUJ2UixFQUFRSSxTQUFXLE9BRW5CcVEsSUFDQUgsS0FJSnhPLFFBQVFDLElBQUl1UCxHQUVaRSxFQUFnQnZQLEVBQU00TCxFQUFJeUIsRUFBa0JnQyxHQUM1QzdCLEVBQWlCckksSUFBSSxLQUNyQnFLLEVBQW1CVCxFQUFXbkQsRUFBSTVMLEVBQU1tUCxHQUN4Q1YsT0FJUmhCLEVBQWFwUCxJQUNUd1EsT0FBUSxXQUVKckIsRUFBaUJySSxJQUFJLEtBQ3JCcUosSUFDQUMsT0FJUmYsRUFBYXJQLElBQ1R3USxPQUFRLFdBRUpyQixFQUFpQnJJLElBQUksS0FDckJxSixJQUNBQyxPQUlSckIsRUFBc0IvTyxJQUNuQm9SLE9BQVEsV0FrQ0osTUFoQ0kxUixHQUFRSSxTQUFXLE1BRW5CcVEsSUFJSnBCLEVBQXNCdlAsS0FBSyxVQUFVWixLQUFNLFdBRXZDLEdBQUl3QixHQUFVekIsRUFBRUcsTUFDWjZDLEVBQU92QixFQUFRd0IsS0FBSyxRQUNwQjJMLEVBQUtuTixFQUFRMEcsS0FFakJvSyxHQUFnQnZQLEVBQU00TCxFQUFJLFNBQVUsSUFFcEM4RCxFQUFtQjFQLEtBR3ZCb04sRUFBc0J2UCxLQUFLLDZCQUE2QlosS0FBTSxXQUUxRCxHQUFJd0IsR0FBVXpCLEVBQUVHLE1BQ1o2QyxFQUFPdkIsRUFBUXdCLEtBQUssUUFDcEIyTCxFQUFLbk4sRUFBUWtCLEtBQUssS0FFdEI0UCxHQUFnQnZQLEVBQU00TCxFQUFJLFFBQVMsSUFFbkM4RCxFQUFtQjFQLEtBSXZCd04sRUFBaUJySSxJQUFJLEtBQ3JCc0osS0FFTyxPQU1sQmUsRUFBb0IsU0FBVUcsRUFBVUMsRUFBUUMsRUFBVVYsR0FFbEQ5QixFQUVBTixFQUFjcEMsT0FBTyxpQkFBa0JrRixFQUFVLGFBQWNELEVBQVEsS0FBTVQsRUFBYyxLQUFNUSxFQUFVLDREQUkzRzVDLEVBQWNsUCxLQUFLLGVBQWlCK1IsRUFBUyxNQUFNNUUsU0FHdkRnQyxFQUFpQkQsRUFBY2xQLEtBQUssTUFBTStHLE9BRXRDb0ksRUFBaUIsR0FFakJGLEVBQVV2TyxZQUFZLFVBQ3RCME8sRUFBT3BQLEtBQUssUUFBUTZILEtBQUssSUFBS3NILEVBQWdCLEtBQzlDRSxFQUFZclAsS0FBSyxRQUFRNkgsS0FBSyxJQUFLc0gsRUFBZ0IsS0FDbkRDLEVBQU9yTyxTQUFTLFlBQ2hCdU8sRUFBYzVPLFlBQVksWUFJMUJ1TyxFQUFVbE8sU0FBUyxVQUNuQnFPLEVBQU9wUCxLQUFLLFFBQVE2SCxLQUFLLElBQ3pCd0gsRUFBWXJQLEtBQUssUUFBUTZILEtBQUssSUFDOUJ1SCxFQUFPMU8sWUFBWSxZQUNuQjRPLEVBQWN2TyxTQUFTLFlBSy9CNFAsRUFBYyxXQUVWbEIsRUFBV3RRLEVBQUUsK0JBRWJBLEVBQUUsc0JBQXNCMk4sT0FBTzJDLEdBRS9CQSxFQUFTaE8sS0FDTDhHLElBQUtwSixFQUFFLG1CQUFtQnlDLFdBQVcyRyxJQUFNLE1BSW5EMEosRUFBZ0IsV0FFUmhDLElBRUFwTyxhQUFhb08sR0FDYkEsRUFBVyxNQUlmQSxFQUFXbE8sV0FBWSxXQUNuQjVDLEVBQUUsWUFBWTRCLFNBQVMsV0FDeEIsS0FFSGtQLEVBQVdsTyxXQUFZLFdBQ25CNUMsRUFBRSxZQUFZZ08sVUFDZixNQUdQc0QsRUFBZSxXQUVYeEIsRUFBVWxPLFNBQVMsVUFDbkJxTyxFQUFPcFAsS0FBSyxRQUFRNkgsS0FBSyxJQUN6QndILEVBQVlyUCxLQUFLLFFBQVE2SCxLQUFLLElBQzlCdUgsRUFBTzFPLFlBQVksWUFDbkJ3TyxFQUFjbFAsS0FBSyxNQUFNbU4sU0FDekI2QixFQUFZaFAsS0FBSyx3QkFBd0J5UixLQUFLLFdBQVcsR0FDekQvQixFQUFhcEksSUFBSSxJQUVqQnFKLElBQ0FDLEtBR0pHLEVBQXFCLFNBQVVnQixFQUFRQyxHQUVuQ2hELEVBQVloUCxLQUFLLGtCQUFtQitSLEVBQVEsTUFBTU4sS0FBSyxXQUFXLEdBQ2xFakMsR0FBbUIsRUFDbkJtQyxFQUFtQixHQUFJSSxFQUFRLEdBQUksSUFDbkNwQixJQUNBZSxFQUFnQk0sRUFBVUQsRUFBUXZDLEVBQWtCLElBQ3BEb0IsS0FHSmlCLEVBQXFCLFNBQVVHLEdBRTNCaEQsRUFBWWhQLEtBQUssZUFBZ0JnUyxFQUFVLE1BQU01UyxLQUFNLFdBRW5ELEdBQUl3QixHQUFVekIsRUFBRUcsTUFDWnlTLEVBQVNuUixFQUFRa0IsS0FBSyxLQUUxQmtOLEdBQVloUCxLQUFLLGtCQUFtQitSLEVBQVEsTUFBTU4sS0FBSyxXQUFXLEdBQ2xFakMsR0FBbUIsRUFDbkJtQyxFQUFtQixHQUFJSSxFQUFRLEdBQUksT0FLM0N2QixFQUFlLFdBRVAzQixFQUFNL04sU0FBUyxXQUVmK04sRUFBTW5PLFlBQVksVUFDbEJvTyxFQUFTcE8sWUFBWSxVQUNyQnZCLEVBQUUsa0JBQWtCc0MsS0FBTzZPLFVBQVcsT0FJdEN6QixFQUFNOU4sU0FBUyxVQUNmK04sRUFBUy9OLFNBQVMsVUFFYmIsRUFBUUksUUFBVSxNQUVuQm5CLEVBQUUsa0JBQWtCc0MsS0FBTzZPLFVBQVcsUUFNbEQ0QixFQUFvQixTQUFVcFEsR0FFMUIsR0FBSXFRLEdBQVF2TCxTQUFTOUUsRUFBSzZJLFNBQVN5SCxVQUMvQkMsRUFBYXpMLFNBQVM5RSxFQUFLNkksU0FBUzJILFlBSXhDLElBRkEzQyxFQUFpQnJJLElBQUkrSyxHQUVSLEdBQVRGLEdBQXdCLEdBQVRBLEVBQWEsQ0FFNUIsR0FBSUksR0FBaUIsMEJBSXJCLElBRkFBLEdBQWlCLDRDQUViSixHQUFTLEVBRVQsSUFBSyxHQUFJekwsR0FBSSxFQUFHQSxHQUFLeUwsRUFBT3pMLElBR3BCNkwsR0FEQTdMLEdBQUsyTCxFQUNZLDhCQUErQjNMLEVBQUcsT0FFbEMsZUFBZ0JBLEVBQUcsV0FNM0MsQ0FFRCxHQUFJMkwsR0FBYyxHQUFLQSxFQUFhRixFQUFNLEVBQUksQ0FFMUMsSUFBSyxHQUFJekwsR0FBSSxFQUFHQSxHQUFLLEVBQUdBLElBR2hCNkwsR0FEQTdMLEdBQUsyTCxFQUNZLDhCQUErQjNMLEVBQUcsT0FFbEMsZUFBZ0JBLEVBQUcsTUFLNUM2TCxJQUFpQixrQkFFakIsS0FBSyxHQUFJN0wsR0FBSXlMLEVBQU0sRUFBR3pMLEdBQUt5TCxFQUFPekwsSUFHMUI2TCxHQURBN0wsR0FBSzJMLEVBQ1ksOEJBQStCM0wsRUFBRyxPQUVsQyxlQUFnQkEsRUFBRyxPQU1oRCxHQUFJMkwsRUFBYSxHQUFLQSxHQUFjRixFQUFNLEVBQUksQ0FLMUMsR0FIQUksR0FBaUIsb0JBQ2pCQSxHQUFpQixtQkFFWkYsRUFBVyxFQUFJLEdBQU9BLEVBQVcsR0FBS0YsRUFBTSxFQUU3QyxJQUFLLEdBQUl6TCxHQUFJMkwsRUFBVyxFQUFHM0wsR0FBSzJMLEVBQVcsRUFBRzNMLElBR3RDNkwsR0FEQTdMLEdBQUsyTCxFQUNZLDhCQUErQjNMLEVBQUcsT0FFbEMsZUFBZ0JBLEVBQUcsV0FLekMsSUFBSTJMLEVBQVcsR0FBSyxFQUV2QixJQUFLLEdBQUkzTCxHQUFJMkwsRUFBWTNMLEdBQUsyTCxFQUFXLEVBQUczTCxJQUdwQzZMLEdBREE3TCxHQUFLMkwsRUFDWSw4QkFBK0IzTCxFQUFHLE9BRWxDLGVBQWdCQSxFQUFHLFdBS3pDLElBQUkyTCxFQUFXLEdBQUtGLEVBQU0sRUFFN0IsSUFBSyxHQUFJekwsR0FBSTJMLEVBQVcsRUFBRzNMLEdBQUsyTCxFQUFZM0wsSUFHcEM2TCxHQURBN0wsR0FBSzJMLEVBQ1ksOEJBQStCM0wsRUFBRyxPQUVsQyxlQUFnQkEsRUFBRyxNQU9oRDZMLElBQWlCLG1CQUNqQkEsR0FBaUIsZUFBZ0JKLEVBQU8sT0FHNUMsR0FBYSxHQUFUQSxHQUVJRSxFQUFhLEdBQUtBLEdBQWNGLEVBQU0sRUFBSSxDQUMxQ0ksR0FBaUIsb0JBQ2pCQSxHQUFpQixrQkFFakIsS0FBSyxHQUFJN0wsR0FBSSxFQUFHQSxHQUFLLEVBQUdBLElBR2hCNkwsR0FEQTdMLEdBQUsyTCxFQUNZLDhCQUErQjNMLEVBQUcsT0FFbEMsZUFBZ0JBLEVBQUcsTUFLNUM2TCxJQUFpQixtQkFDakJBLEdBQWlCLGVBQWdCSixFQUFPLFFBUXBESSxHQUFpQiw0Q0FDakJBLEdBQWtCLFNBRWxCcFQsRUFBRSxvQkFBb0IwSSxLQUFLMEssT0FJdkJwVCxHQUFFLGVBQWU0SCxRQUVqQjVILEVBQUUsZUFBZWdPLFVBTzdCcUYsRUFBb0IsU0FBVTFRLEdBRTFCLEdBQUkyUSxHQUFVM1EsRUFBSzRRLFNBQ2ZDLEVBQWUscUNBQ2ZDLElBRUosSUFBMEJwTSxRQUF0QndKLEVBQWlCLE1BRWpCLElBQUssR0FBSXRKLEdBQUksRUFBR0EsR0FBS3NKLEVBQWlCLE1BQUVqSixPQUFPLEVBQUdMLElBQU0sQ0FFcEQsR0FBSW1NLEdBQVlyTCxXQUFXd0ksRUFBaUIsTUFBRXRKLEdBQUdPLFFBQVEsSUFBSSxJQUFJQSxRQUFRLElBQUksSUFFN0UyTCxHQUFpQkUsS0FBS0QsR0FhOUIsR0FBSUQsRUFBaUI3TCxPQUFTLENBRTFCLEdBQUlnTSxFQUVKLElBQXFCLEdBQWpCQyxjQUVBRCxFQUFhek0sS0FBSzJNLElBQUlDLE1BQU0sS0FBTU4sT0FJbEMsS0FBSyxHQUFJbE0sR0FBSSxFQUFHQSxHQUFLa00sRUFBaUI3TCxPQUFPLEVBQUdMLElBRTVDLEdBQUlrTSxFQUFpQmxNLElBQU1zTSxjQUFnQixDQUV2Q0QsRUFBYUgsRUFBaUJsTSxFQUU5QixRQVdoQnZILEVBQUVDLEtBQU1xVCxFQUFTLFdBRWIsR0FHSUksR0FIQU0sRUFBVTdULEtBQ1ZpRCxFQUFRNFEsRUFBUTVRLE1BQU0sR0FDdEI2USxFQUFZRCxFQUFRMVEsU0FBUyxFQXFCakMsSUFBSW1RLEVBQWlCN0wsT0FFakIsSUFBSyxHQUFJTCxHQUFJLEVBQUdBLEdBQUt5TSxFQUFRNVEsTUFBTXdFLE9BQU8sRUFBR0wsSUFJekMsR0FGQW1NLEVBQVlyTCxXQUFXMkwsRUFBUTVRLE1BQU1tRSxHQUFHTyxRQUFRLElBQUksSUFBSUEsUUFBUSxJQUFJLEtBRWhFNEwsR0FBYUUsRUFBYSxDQUUxQnhRLEVBQVE0USxFQUFRNVEsTUFBTW1FLEdBQ3RCME0sRUFBWUQsRUFBUTFRLFNBQVNpRSxFQUU3QixPQTRCWixHQXBCQWlNLEdBQWdCLDJDQUVRbk0sUUFBcEIyTSxFQUFRRSxVQUE2QyxJQUFwQkYsRUFBUUUsV0FFekNWLEdBQWdCLGdDQUFpQ1EsRUFBUUUsU0FBVSxXQUl2RVYsR0FBZ0IscUpBSXdCUSxFQUFRRyxXQUFZLG9FQUFxRUgsRUFBUUksUUFBUyw4TUFNbEVKLEVBQVFHLFdBQVksS0FBTUgsRUFBUUssTUFBTyxZQUVyR2hOLFFBQWhCMk0sRUFBUU0sS0FBb0IsQ0FFNUJkLEdBQWdCLG9CQUVoQixLQUFLLEdBQUlqTSxHQUFJLEVBQUdBLEdBQUt5TSxFQUFRTSxLQUFLQyxXQUFXLEVBQUdoTixJQUM1Q2lNLEdBQWUsYUFBYzdDLEVBQWUsb0RBR2hENkMsSUFBZSxZQUFhUSxFQUFRTSxLQUFLRSxXQUFZLDJCQUE0QlIsRUFBUU0sS0FBS0csYUFBYyw2REFjaEgsR0FSQWpCLEdBQWUsMElBUW9Cbk0sUUFBL0IyTSxFQUFRVSxRQUFRQyxhQUEyRCxJQUEvQlgsRUFBUVUsUUFBUUMsWUFBb0IsQ0FFaEZuQixHQUFlLDZGQUlmLEtBQUssR0FBSWpNLEdBQUksRUFBR0EsR0FBS3lNLEVBQVFVLFFBQVFDLFlBQVkvTSxPQUFPLEVBQUdMLElBQ3ZEaU0sR0FBZSxPQUFRUSxFQUFRVSxRQUFRQyxZQUFZcE4sR0FBSSxPQUczRGlNLElBQWUsa0RBVW5CLEdBSkFBLEdBQWUsNkZBSXNCbk0sUUFBakMyTSxFQUFRVSxRQUFRRSxlQUErRCxJQUFqQ1osRUFBUVUsUUFBUUUsY0FBc0IsQ0FFcEZwQixHQUFlLDBMQU1mLEtBQUssR0FBSWpNLEdBQUksRUFBR0EsR0FBS3lNLEVBQVFVLFFBQVFFLGNBQWNDLEtBQUtqTixPQUFPLEVBQUdMLElBQzlEaU0sR0FBZSxxQkFBdUIsSUFBSVEsRUFBUVUsUUFBUUUsY0FBY0MsS0FBS2pOLE9BQVMsTUFBT29NLEVBQVFVLFFBQVFFLGNBQWNDLEtBQUt0TixHQUFJLFFBRXhJaU0sSUFBZSx5SEFJZixLQUFLLEdBQUlqTSxHQUFJLEVBQUdBLEdBQUt5TSxFQUFRVSxRQUFRRSxjQUFjRixRQUFROU0sT0FBTyxFQUFHTCxJQUNqRWlNLEdBQWUscUJBQXVCLElBQUlRLEVBQVFVLFFBQVFFLGNBQWNDLEtBQUtqTixPQUFTLE1BQU9vTSxFQUFRVSxRQUFRRSxjQUFjRixRQUFRbk4sR0FBSSxRQUUzSWlNLElBQWUseUhBVWZBLEdBRmFuTSxRQUFiNE0sR0FBdUMsSUFBYkEsRUFFWCx1TUFJeUJBLEVBQVcsVUFBVzdRLEVBQU8sNkRBTXRELGtNQUlvQkEsRUFBTyw2REFNOUNvUSxHQUFlLFlBQWFRLEVBQVFHLFdBQVksa1JBZ0JwRFgsR0FBZ0IsU0FFaEJ4VCxFQUFFLG1CQUFtQjBJLEtBQUs4SyxHQUUxQlYsS0FHSnJCLEVBQWtCLFdBRWRsQyxFQUFTdUYsUUFDVHZGLEVBQVd2UCxFQUFFK1UsTUFDVEMsSUFBSzFGLEVBQ0wzTSxNQUNJc1MsT0FBUyx3QkFDVDFELE1BQU9oQixFQUFhcEksTUFDcEIrTSxZQUFhekUsRUFBYXRJLE1BQzFCZ04sWUFBYXpFLEVBQWF2SSxNQUMxQmdMLFlBQWEzQyxFQUFpQnJJLE1BQzlCaU4sV0FBWXpVLEVBQUtnQyxLQUFLLGVBQ3RCMFMscUJBQXNCakYsRUFBc0JrRixhQUVoREMsU0FBVSxPQUNWQyxLQUFNLE1BQ05DLFFBQVMsU0FBV0MsR0FFaEJyQyxFQUFtQnFDLEdBQ25CM0MsRUFBbUIyQyxJQUd2QkMsTUFBTyxTQUFVbkcsR0FDcUIsU0FBN0JBLEVBQWVvRyxZQUNoQi9TLFFBQVFDLElBQUksYUFNNUJ5UCxFQUFpQixTQUFTdlAsRUFBTXVPLEVBQU9zRSxFQUFXeEQsR0FFOUMsR0FBaUIsU0FBYndELEVBRUFoRixFQUFVN04sSUFBU3VPLE9BR2hCLElBQWlCLFVBQWJzRSxFQUVNLEdBQVR0RSxFQUVBVixFQUFVN04sSUFBU3VPLFNBSVpWLEdBQVU3TixPQU9yQixJQUFJNlMsRUFFRCxHQUFJaEYsRUFBVWlGLGVBQWU5UyxHQUV6QixHQUF1QixHQUFuQnFQLEVBRUF4QixFQUFVN04sSUFBU3VPLE9BSW5CLEtBQUssR0FBSWUsS0FBUXpCLEdBRVR5QixHQUFRdFAsR0FFUjZOLEVBQVV5QixHQUFNcUIsS0FBS3BDLE9BVWpDVixHQUFVN04sSUFBU3VPLE9BSW5CLENBRUosSUFBSyxHQUFJZSxLQUFRekIsR0FFYixHQUFJeUIsR0FBUXRQLEVBQU8sQ0FFZixHQUFJdUUsR0FBSXNKLEVBQVV5QixHQUFNeUQsUUFBUXhFLEVBRTdCaEssUUFFQ3NKLEVBQVV5QixHQUFNMEQsT0FBT3pPLEVBQUcsR0FRUixHQUExQnNKLEVBQVU3TixHQUFNNEUsY0FFVGlKLEdBQVU3TixHQVE1QixHQUFJaVQsR0FBWSxHQUNaQyxFQUFZLEdBQ1pDLEVBQVUsR0FDVkMsSUFFSixLQUFLLEdBQUlDLEtBQU94RixHQUFZLENBRXhCRSxJQUVBLElBQUl1RixHQUFPekYsRUFBV3dGLEVBRXRCdEYsR0FBSzRDLEtBQU0yQyxFQUVYLEtBQUssR0FBSS9PLEdBQUksRUFBR0EsR0FBS3dKLEVBQUtuSixPQUFPLEVBQUdMLElBRWhDMk8sRUFBWW5GLEVBQUt4SSxLQUFLLElBSTFCNE4sR0FBVUUsRUFBTSxJQUFNSCxFQUV0QkUsRUFBT3pDLEtBQUt3QyxHQUVaRixFQUFZRyxFQUFPN04sS0FBSyxLQUk1QmdJLEVBQWFwSSxJQUFLOE4sSUFHdEIxUyxFQUFRLFdBQ0puQyxJQUVJVCxFQUFLZ0IsU0FBUyxrQkFFZDZQLElBQ0FDLEtBVVpsTztDQzk2QlIsV0FFSXZELEVBQUUsV0FFRUEsRUFBRSxXQUFXQyxLQUFLLFdBRWQsR0FBSXNXLEdBQVF2VyxFQUFFRyxVQU10QixJQUFJb1csR0FBUyxTQUFVN1YsR0FHbkIsR0FBSUMsR0FBT0QsRUFDUDhWLEVBQVM3VixFQUFLRSxLQUFLLHNCQUNuQjBPLEVBQVcsR0FBSUMsZ0JBQ2ZGLEVBQVEzTyxFQUFLZ0MsS0FBSyxRQUNsQjhULEVBQWtCLEVBQ2xCQyxFQUFhLEVBQ2JDLEVBQWFILEVBQU9yTyxNQUNwQnlPLEVBQVVqVyxFQUFLRSxLQUFLLG1CQUlwQk8sRUFBYSxXQUVUb1YsRUFBT25WLElBQ0h3VixNQUFPLFNBQVNDLEdBRVosR0FBSTlXLEVBQUVnQixRQUFRRyxTQUFXLEtBRXJCLE9BQU8yVixFQUFFQyxTQUNMLElBQUssSUFFaUUsR0FBOURILEVBQVEvVixLQUFLLHFCQUFxQnlKLE9BQU8sV0FBVzFDLFFBQ3BEakgsRUFBS0UsS0FBSyxRQUFRNFIsUUFHdEIsTUFDSixLQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDRCxLQUNKLFNBRUksR0FBSWtFLEdBQWEzVyxFQUFFRyxNQUFNZ0ksS0FHckJ3TyxHQUFXL08sUUFBVWpILEVBQUtnQyxLQUFLLFdBRS9CcVUsRUFBY2hYLEVBQUVHLE1BQU93VyxFQUFXL08sUUFLYixJQUFqQjVILEVBQUVHLE1BQU1nSSxRQUNSeU8sRUFBUXJWLFlBQVksV0FDcEJrVixFQUFrQixLQVMxQ3hRLFFBQVMsU0FBUzZRLEdBT2QsR0FMQUYsRUFBUS9WLEtBQUssa0JBQWtCNkgsS0FBSyxJQUNwQ2tPLEVBQVEvVixLQUFLLGlCQUFpQjZILEtBQUssSUFFbkMrTixFQUFrQixFQUVkelcsRUFBRWdCLFFBQVFHLFNBQVcsS0FFckIsT0FBUTJWLEVBQUVDLFNBQ04sSUFBSyxJQU9ELE1BTGtFLElBQTlESCxFQUFRL1YsS0FBSyxxQkFBcUJ5SixPQUFPLFdBQVcxQyxPQUNwRDVHLE9BQU9pVyxTQUFTOVQsS0FBT3hDLEVBQUtnQyxLQUFLLFVBRWpDM0IsT0FBT2lXLFNBQVM5VCxLQUFPeVQsRUFBUS9WLEtBQUsscUJBQXFCeUosT0FBTyxXQUFXekosS0FBSyxLQUFLb0MsS0FBSyxTQUV2RixDQUdYLEtBQUssSUFHRCxNQUZBMlQsR0FBUTVJLFNBQ1J5SSxFQUFrQixHQUNYLENBR1gsS0FBSyxJQUNMLElBQUssSUFDREssRUFBRUksaUJBRUVSLEVBQWEsSUFDYlMsRUFBY0wsRUFBRUMsU0FFWk4sR0FBbUJDLElBQ25CRCxFQUFrQixRQWE5Q3pXLEVBQUUsUUFBUTZCLE1BQU8sV0FFYitVLEVBQVFyVixZQUFZLFdBRXBCa1YsRUFBa0IsSUFHdEJ6VyxFQUFFeUUsVUFBVXBELEdBQ1IsUUFDQSxPQUNBLFNBQVVxRCxHQUNOQSxFQUFRQSxHQUFTMUQsT0FBTzBELE1BRXBCQSxFQUFNQyxnQkFDTkQsRUFBTUMsa0JBRU5ELEVBQU1FLGNBQWUsSUFJakM1RSxFQUFFeUUsVUFBVXBELEdBQ1IsUUFDQSxvQkFDQSxXQUNJLEdBQUlJLEdBQVV6QixFQUFFRyxNQUNacU4sRUFBVS9MLEVBQVFaLEtBQUssS0FBS2tDLE1BRWhDeVQsR0FBT3JPLElBQUlxRixHQUNYb0osRUFBUXJWLFlBQVksV0FDcEJrVixFQUFrQixJQUcxQnpXLEVBQUV5RSxVQUFVcEQsR0FDUixVQUNBLG9CQUNBLFNBQVN5VixHQUNMLE9BQU9BLEVBQUVDLFNBQ0wsSUFBSyxJQUVEL1csRUFBRUcsTUFBTWlQLFFBQVEsYUFPcEMrSCxFQUFlLFNBQVNsUSxHQUVwQjJQLEVBQVEvVixLQUFLLHFCQUFxQlUsWUFBWSxVQUUxQ1osRUFBS21CLFVBQVVILFNBQVMsaUJBRWYsSUFBTHNGLEdBQVd3UCxFQUFrQkMsRUFFN0JELElBRWEsSUFBTHhQLEdBQVd3UCxFQUFrQixHQUVyQ0EsSUFHQUEsRUFBa0IsR0FFbEJHLEVBQVEvVixLQUFLLHFCQUFxQmdOLE9BQVU0SSxFQUFrQixJQUFLN1UsU0FBUyxVQUM1RTRVLEVBQU9yTyxJQUFLeU8sRUFBUS9WLEtBQUsscUJBQXFCZ04sT0FBVTRJLEVBQWtCLElBQUs1VixLQUFLLEtBQUtrQyxTQUl6RnlULEVBQU9yTyxJQUFLd08sS0FNUCxJQUFMMVAsR0FBV3dQLEVBQWtCQyxFQUU3QkQsSUFFYSxJQUFMeFAsR0FBV3dQLEVBQWtCLEdBRXJDQSxJQUdBQSxFQUFrQixHQUVsQkcsRUFBUS9WLEtBQUsscUJBQXFCZ04sR0FBSTRJLEVBQWtCLEdBQUk3VSxTQUFTLFVBQ3JFNFUsRUFBT3JPLElBQUt5TyxFQUFRL1YsS0FBSyxxQkFBcUJnTixHQUFJNEksRUFBa0IsR0FBSTVWLEtBQUssS0FBS2tDLFNBSWxGeVQsRUFBT3JPLElBQUt3TyxLQVF4QlMsRUFBVyxTQUFVelUsR0FFakIsR0FBSUEsR0FBT0EsRUFDUDBVLEVBQWExVSxFQUFLMFUsV0FDbEJDLEVBQThDLEdBQXJCRCxFQUFXelAsT0FDcEMyTCxFQUFXNVEsRUFBSzRRLFNBQ2hCZ0UsRUFBMEMsR0FBbkJoRSxFQUFTM0wsT0FDaEM0UCxLQUNBQyxLQUVBQyxHQUFPLENBRVgsSUFBSUgsRUFBdUIsQ0FFdkIsR0FBSS9ELEdBQWUsa0NBRW5CeFQsR0FBRUMsS0FBTXNULEVBQVUsV0FFZCxHQUFJUyxHQUFVN1QsSUFFZHFULElBQWdCLHdNQUkyRVEsRUFBUTlRLElBQUssMkpBSWxDOFEsRUFBUTFRLFNBQVUsVUFBVzBRLEVBQVE1USxNQUFPLG1HQUU5QzRRLEVBQVFoUixLQUFNLHFFQUUxQ2dSLEVBQVE3USxLQUFNLCtJQUtqRG1VLEdBRURFLEVBQXlCN0QsTUFBT0ssRUFBUXFELFdBQVdNLGFBQWMzRCxFQUFRcUQsV0FBV08sZ0JBQWlCNUQsRUFBUXFELFdBQVdRLGNBQWU3RCxFQUFRcUQsV0FBV1MscUJBTWxLdEUsR0FBZ0IsU0FFaEJvRCxFQUFRL1YsS0FBSyxPQUFPZ04sR0FBRyxHQUFHaE4sS0FBSyxpQkFBaUI2SCxLQUFLLG9EQUFzRDhLLEVBRTNHLElBQUl1RSxHQUFZLDRCQUVoQixJQUFJVCxFQUVBdFgsRUFBRUMsS0FBTW9YLEVBQVksV0FFaEIsR0FBSVEsR0FBZ0IxWCxLQUFLMFgsY0FDckJDLEVBQW1CM1gsS0FBSzJYLGlCQUN4QkUsRUFBb0IsRUFFeEIsSUFBcUIzUSxRQUFqQndRLEVBQTZCLENBRTdCLElBQUssR0FBSXRRLEdBQUksRUFBR0EsR0FBS3NRLEVBQWNqUSxPQUFPLEVBQUdMLElBRXpDeVEsR0FBcUIsMENBQTJDRixFQUFpQnZRLEdBQUksS0FBT3NRLEVBQWN0USxHQUFLLFdBR25IeVEsSUFBcUIsR0FJekJELEdBQWEsZ0JBQWlCNVgsS0FBSzhYLFlBQWEsS0FBTTlYLEtBQUs2QyxLQUFNLFlBQWFnVixRQUkvRSxDQUVILElBQU0sR0FBSXpRLEdBQUksRUFBR0EsR0FBS2lRLEVBQXlCNVAsT0FBTyxFQUFHTCxJQU9yRCxHQUxJbVEsSUFDQUQsRUFBc0I5RCxLQUFLNkQsRUFBeUJqUSxJQUNwRG1RLEdBQU8sR0FHUEQsRUFBc0JBLEVBQXNCN1AsT0FBTyxHQUFHLElBQU00UCxFQUF5QmpRLEdBQUcsR0FFeEZrUSxFQUFzQjlELEtBQUs2RCxFQUF5QmpRLFFBSXBELEtBQU0sR0FBSUksR0FBSSxFQUFHQSxHQUFLNlAsRUFBeUJqUSxHQUFHSyxPQUFPLEVBQUdELElBRXhELElBQU0sR0FBSXVRLEdBQUksRUFBR0EsR0FBS1YsRUFBeUJqUSxHQUFHLEdBQUdLLE9BQU8sRUFBR3NRLElBRXZEVCxFQUFzQkEsRUFBc0I3UCxPQUFPLEdBQUcsR0FBR21PLFFBQVN5QixFQUF5QmpRLEdBQUcsR0FBRzJRLFNBRWpHVCxFQUFzQkEsRUFBc0I3UCxPQUFPLEdBQUcsR0FBRytMLEtBQU02RCxFQUF5QmpRLEdBQUcsR0FBRzJRLEdBY2xILEtBQU0sR0FGRkMsR0FBUSxFQUVGNVEsRUFBSSxFQUFHQSxHQUFLa1EsRUFBc0I3UCxPQUFPLEVBQUdMLElBQU0sQ0FFeEQsSUFBTSxHQUFJSSxHQUFJLEVBQUdBLEdBQUs4UCxFQUFzQmxRLEdBQUdLLE9BQU8sRUFBR0QsSUFBTSxDQUkzRCxJQUFLLEdBRkRxUSxHQUFvQixHQUVmRSxFQUFJLEVBQUdBLEdBQUtULEVBQXNCbFEsR0FBRyxHQUFHSyxPQUFPLEVBQUdzUSxJQUV2REYsR0FBcUIsMENBQTRDUCxFQUFzQmxRLEdBQUcsR0FBRzJRLEdBQUssS0FBT1QsRUFBc0JsUSxHQUFHLEdBQUcyUSxHQUFLLFlBQzFJQyxHQUlKSCxJQUFxQixHQUl6QkQsR0FBYSxnQkFBa0JOLEVBQXNCbFEsR0FBRyxHQUFLLEtBQU9rUSxFQUFzQmxRLEdBQUcsR0FBSyxZQUFheVEsR0FNdkhELEdBQWEsUUFFYm5CLEVBQVEvVixLQUFLLGFBQWE2SCxLQUFLcVAsR0FFL0JuQixFQUFRL1YsS0FBSyxrQkFBa0JBLEtBQUssbUJBQW1CbU4sU0FFdkQwSSxFQUFhRSxFQUFRL1YsS0FBSyxrQkFBa0JBLEtBQUssTUFBTStHLE9BRXZEZ1AsRUFBUWhWLFNBQVMsZUFJakJnVixHQUFRclYsWUFBWSxZQUk1QnlWLEVBQWdCLFNBQVVvQixFQUFPblIsR0F5QjdCLE1BdkJBc0ksR0FBU3VGLFFBQ1R2RixFQUFXdlAsRUFBRStVLE1BQ1RDLElBQUsxRixFQUNMM00sTUFDSTRPLE1BQU82RyxFQUFNalEsTUFDYjhNLE9BQU8sZUFFWE0sU0FBVSxPQUNWQyxLQUFNLE1BQ05DLFFBQVMsU0FBVzRDLEdBRWUsR0FBM0JDLE9BQU9DLEtBQUtGLEdBQUt6USxRQUNqQndQLEVBQVVpQixJQUlsQjFDLE1BQU8sU0FBVW5HLEdBQ29CLFNBQTdCQSxFQUFlb0csWUFDZi9TLFFBQVFDLElBQUksYUFLakIsR0FFWFMsRUFBUSxXQUNKbkMsSUFPUm1DIiwiZmlsZSI6ImNhdGVnb3J5Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICB2YXIgZ2xvYmFsU2Nyb2xsRmxhZyA9IHRydWU7XHJcblxyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICQoJy5zaXRlX19tZW51JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgU3ViTWVudSggJCh0aGlzKSApO1xyXG4gICAgICAgICAgICBuZXcgTWVudSggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQoJy5ub3QtZm91bmQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBGdWxsSGVpZ2h0KCAkKHRoaXMpICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJCgnLmNvbmZpcm1hdGlvbicpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEZ1bGxIZWlnaHQoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkKCcjd3BzbC1zdG9yZXMnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICQodGhpcykucGVyZmVjdFNjcm9sbGJhcih7XHJcbiAgICAgICAgICAgICAgICB3aGVlbFByb3BhZ2F0aW9uOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQoJy5jaGVja291dCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IENoZWNrb3V0SGVpZ2h0KCAkKHRoaXMpICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJCgnLnByb2R1Y3RfX2l0ZW1zJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgQ2hhbmdlUHJpY2UoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgU3ViTWVudSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2l0ZW1zID0gX29iai5maW5kKCcuc2l0ZV9fbWVudS1pdGVtJyksXHJcbiAgICAgICAgICAgIF9hcnJvdyA9IF9vYmouZmluZCgnLnNpdGVfX21lbnUtaWNvbicpLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxyXG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbCxcclxuICAgICAgICAgICAgX3N0YXJ0V2luV2lkdGggPSBfd2luZG93LndpZHRoKCk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfc3RhcnRXaW5XaWR0aCA+IF93aW5kb3cud2lkdGgoKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RhcnRXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfd2luZG93LmZpbmQoJy5vcGVuZWQnKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnLnNpdGVfX21lbnUtaWNvbicsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggalF1ZXJ5KHdpbmRvdykud2lkdGgoKSA8IDEwMDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGpRdWVyeSh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50KCdsaScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX2Fycm93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0galF1ZXJ5KHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnRzKCdsaScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudSA9IHBhcmVudC5maW5kKCcuc2l0ZV9fbWVudS1zdWInKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuc2xpZGVVcCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5zbGlkZURvd24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfaXRlbXMub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoJ3VsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0uaGFzQ2xhc3MoJ3NpdGVfX21lbnUtaXRlbV9zdWInKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJNZW51ID0gY3VySXRlbS5maW5kKCcuc2l0ZV9fbWVudS1zdWInKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICggX3dpbmRvdy53aWR0aCgpIC0gKCBzdWJNZW51LmlubmVyV2lkdGgoKSArIGN1ckl0ZW0ub2Zmc2V0KCkubGVmdCApICkgPCAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICggKCBjdXJJdGVtLm9mZnNldCgpLmxlZnQgKyBjdXJJdGVtLmlubmVyV2lkdGgoKSApIC0gc3ViTWVudS5pbm5lcldpZHRoKCkgKSA8IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnNTAlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgtNTAlKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKC01MCUpJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51LmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGN1ckl0ZW0ucG9zaXRpb24oKS5sZWZ0IC0gc3ViTWVudS5pbm5lcldpZHRoKCkgKyBjdXJJdGVtLmlubmVyV2lkdGgoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjdXJJdGVtLnBvc2l0aW9uKCkubGVmdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICQoJ1tkYXRhLXByb2R1Y3RdJykub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fbG9hZGluZycpLmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBjdXJJdGVtLmRhdGEoJ3Byb2R1Y3QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmKCAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fbG9hZGluZycpLmhhc0NsYXNzKCd2aXNpYmxlJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3RpdGxlJykudGV4dChkYXRhLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3BpYyBpbWcnKS5hdHRyKCdzcmMnLCBkYXRhLnNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuYnRuJykuYXR0cignaHJlZicsIGRhdGEuaHJlZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2Ugc3BhbicpLnRleHQoZGF0YS5wcmljZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggZGF0YS5vblNhbGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3JlbWFyaycpLmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3JlbWFyaycpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkYXRhLm9sZFByaWNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZSBkZWwnKS50ZXh0KGRhdGEub2xkUHJpY2UgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2UgZGVsJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDE2MCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fbG9hZGluZycpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9vYmouZmluZCgndWwnKS5vbiggJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5vcGVuZWQnKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJ2xpJykub24oICdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIE1lbnUgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX21lbnUgPSBvYmosXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIF9hY3Rpb24gPSBmYWxzZSxcclxuICAgICAgICAgICAgX2FjdGlvblNjcm9sbCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfbGFzdFBvcyxcclxuICAgICAgICAgICAgX2hlYWRlciA9ICQoJy5zaXRlX19oZWFkZXInKSxcclxuICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudSA9ICQoJy5zaXRlX19oaWRkZW4taXRlbXMnKSxcclxuICAgICAgICAgICAgX2hlYWRlckhlaWdodCA9IF9oZWFkZXIuaW5uZXJIZWlnaHQoKSxcclxuICAgICAgICAgICAgX3Nob3dCdG4gPSAkKCcuc2l0ZV9faGVhZGVyLWJ0bicpLFxyXG4gICAgICAgICAgICBfY2xvc2VCdG4gPSAkKCcuc2l0ZV9faGlkZGVuLWNsb3NlJyksXHJcbiAgICAgICAgICAgIF9zZWFyY2ggPSAkKCcuc2VhcmNoJyksXHJcbiAgICAgICAgICAgIF9vcGVuU2VhcmNoID0gJCgnLnNlYXJjaC1idG4nKSxcclxuICAgICAgICAgICAgX2Nsb3NlU2VhcmNoID0gJCgnLnNlYXJjaF9fY2FuY2VsJyksXHJcbiAgICAgICAgICAgIF9nZXRGcmVlID0gJCgnLnNpdGVfX2hpZGRlbi1idG4nKSxcclxuICAgICAgICAgICAgX3NpdGUgPSAkKCcuc2l0ZScpLFxyXG4gICAgICAgICAgICBfZG9tID0gJCggJ2h0bWwnICksXHJcbiAgICAgICAgICAgIHNpdGVTY3JvbGxUb3AsXHJcbiAgICAgICAgICAgIF9jb250ZW50ID0gJCgnLnNpdGVfX2NvbnRlbnQnKSxcclxuICAgICAgICAgICAgX2xhc3RTY3JvbGxUb3AgPSAwO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICAgICAgICBcIi5zZWFyY2hcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiggZXZlbnQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICAgICAgICBcImJvZHlcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Nob3dCdG4ub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb3Blbk1lbnUoJCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX2Nsb3NlQnRuLm9uKHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIF9vcGVuU2VhcmNoLm9uKHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5TZWFyY2hCb3goJCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoLm9uKHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbDogZnVuY3Rpb24gKCBlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZml4ZWRIZWFkZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbiA9IF93aW5kb3cuc2Nyb2xsVG9wKCkgPj0gX2hlYWRlckhlaWdodDtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy5zY3JvbGxUb3AoKSA9PSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5yZW1vdmVDbGFzcygnc2l0ZV9faGVhZGVyX2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgRE9NTW91c2VTY3JvbGw6IGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQuZGV0YWlsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKGRlbHRhID4gMCkgPyAxIDogLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKGRpcmVjdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2V3aGVlbDogZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gKGRlbHRhID4gMCkgPyAtMSA6IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKGRpcmVjdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdG91Y2htb3ZlOiBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3MgPSBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3MgPiBfbGFzdFBvcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UG9zIDwgX2xhc3RQb3MpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbGFzdFBvcyA9IGN1cnJlbnRQb3M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAga2V5ZG93bjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM0IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM1IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM2IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpPj0xMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaXRlLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3NpdGUuaGVpZ2h0KCkgPiBfd2luZG93LmhlaWdodCgpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZG9tLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ292ZXJmbG93LXknOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NoZWNrU2Nyb2xsID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPiAwICYmICFfaGVhZGVyLmhhc0NsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJykgJiYgIV9zaG93QnRuLmhhc0NsYXNzKCdvcGVuZWQnKSAmJiBfYWN0aW9uICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLmFkZENsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPCAwICYmIF9oZWFkZXIuaGFzQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKSAmJiAhX3Nob3dCdG4uaGFzQ2xhc3MoJ29wZW5lZCcpICYmIF9hY3Rpb24gJiYgZ2xvYmFsU2Nyb2xsRmxhZykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLnJlbW92ZUNsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2ZpeGVkSGVhZGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfd2luZG93LnNjcm9sbFRvcCgpID4gX2hlYWRlckhlaWdodCArIDE1MCAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoJ2ZpeGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIucmVtb3ZlQ2xhc3MoJ2ZpeGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29wZW5NZW51ID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGVsZW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1ckl0ZW0uaGFzQ2xhc3MoJ29wZW5lZCcpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9oaWRkZW5CbG9ja01lbnUucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9oaWRkZW5CbG9ja01lbnUuYWRkQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzaXRlU2Nyb2xsVG9wID0gX3dpbmRvdy5zY3JvbGxUb3AoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfc2l0ZS5oZWlnaHQoKSA+IF93aW5kb3cuaGVpZ2h0KCkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICdzY3JvbGwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3NpdGUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDMwMCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb3BlblNlYXJjaEJveCA9IGZ1bmN0aW9uIChlbGVtKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSBlbGVtO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJJdGVtLmhhc0NsYXNzKCdvcGVuZWQnKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBfc2VhcmNoLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBfZ2V0RnJlZS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NlYXJjaC5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2dldEZyZWUuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jbG9zZU1lbnUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Nob3dCdG4ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICBfc2VhcmNoLmZpbmQoJ2lucHV0JykuZm9jdXNvdXQoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgX3NpdGUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcnXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfc2l0ZS5oZWlnaHQoKSA+IF93aW5kb3cuaGVpZ2h0KCkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF93aW5kb3cuc2Nyb2xsVG9wKCBzaXRlU2Nyb2xsVG9wICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMTApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vcGVuU2VhcmNoLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgIF9zZWFyY2gucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgX2dldEZyZWUucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfbWVudVswXS5vYmogPSBfc2VsZjtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9maXhlZEhlYWRlcigpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuICAgIHZhciBGdWxsSGVpZ2h0ID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxyXG4gICAgICAgICAgICBfZ2xvYmFsV2luV2lkdGggPSBfd2luZG93LndpZHRoKCk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggX2dsb2JhbFdpbldpZHRoICE9IF93aW5kb3cud2lkdGgoKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsV2luV2lkdGggPSBfd2luZG93LndpZHRoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldEhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiAnJ1xyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6IF93aW5kb3cuaGVpZ2h0KCkgLSAkKCcuc2l0ZV9faGVhZGVyJykuaW5uZXJIZWlnaHQoKSAtICQoJy5zaXRlX19mb290ZXInKS5pbm5lckhlaWdodCgpIC0gJCgnLmJyZWFkY3J1bWJzJykuaW5uZXJIZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuICAgIHZhciBDaGVja291dEhlaWdodCA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3RvdGFsT3JkZXIgPSBfb2JqLmZpbmQoJy50b3RhbC1vcmRlcicpO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG5cclxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogX3RvdGFsT3JkZXIuaW5uZXJIZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgQ2hhbmdlUHJpY2UgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIE51bWJlci5wcm90b3R5cGUuZm9ybWF0TW9uZXkgPSBmdW5jdGlvbihjLCBkLCB0KXtcclxuICAgICAgICAgICAgdmFyIG4gPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgYyA9IGlzTmFOKGMgPSBNYXRoLmFicyhjKSkgPyAyIDogYyxcclxuICAgICAgICAgICAgICAgIGQgPSBkID09IHVuZGVmaW5lZCA/IFwiLlwiIDogZCxcclxuICAgICAgICAgICAgICAgIHQgPSB0ID09IHVuZGVmaW5lZCA/IFwiLFwiIDogdCxcclxuICAgICAgICAgICAgICAgIHMgPSBuIDwgMCA/IFwiLVwiIDogXCJcIixcclxuICAgICAgICAgICAgICAgIGkgPSBTdHJpbmcocGFyc2VJbnQobiA9IE1hdGguYWJzKE51bWJlcihuKSB8fCAwKS50b0ZpeGVkKGMpKSksXHJcbiAgICAgICAgICAgICAgICBqID0gKGogPSBpLmxlbmd0aCkgPiAzID8gaiAlIDMgOiAwO1xyXG4gICAgICAgICAgICByZXR1cm4gcyArIChqID8gaS5zdWJzdHIoMCwgaikgKyB0IDogXCJcIikgKyBpLnN1YnN0cihqKS5yZXBsYWNlKC8oXFxkezN9KSg/PVxcZCkvZywgXCIkMVwiICsgdCkgKyAoYyA/IGQgKyBNYXRoLmFicyhuIC0gaSkudG9GaXhlZChjKS5zbGljZSgyKSA6IFwiXCIpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQoJy52YXJpYXRpb25zX2Zvcm0nKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgIHZhciB2YXJpYXRpb24gPSAkKCcudmFyaWF0aW9ucycpLmZpbmQoJ3NlbGVjdCcpLFxyXG4gICAgICAgICAgICAgICBjb3VudGVyID0gMDtcclxuXHJcblxyXG4gICAgICAgICAgIHZhcmlhdGlvbi5lYWNoKGZ1bmN0aW9uICgkdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgaWYoJCggdGhpcyApLnZhbCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICBjb3VudGVyKys7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9KTtcclxuICAgICAgICAgICBpZihjb3VudGVyID09PSB2YXJpYXRpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgIHZhciBwcmljZSA9ICQoJy5wcmljZT5zcGFuJykudGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgc3ltYm9sID0gJCgnLnByaWNlPnNwYW4+c3BhbicpLnRleHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgIHByaWNlID0gcGFyc2VGbG9hdCgocHJpY2Uuc2xpY2UoMSkuc3BsaXQoJywnKSkuam9pbignJykpO1xyXG5cclxuICAgICAgICAgICAgICAgJHVwc2VsbHMgPSAkKCcudmFyaWF0aW9uc19mb3JtPi53ZWJzdGVycy1zZWxlY3QnKS5maW5kKCdzZWxlY3QnKTtcclxuICAgICAgICAgICAgICAgJHVwc2VsbHMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ID0gJCggdGhpcyApLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIGlmKHNlbGVjdCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAkKCB0aGlzICkuZmluZCgnb3B0aW9uJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCQodGhpcykudmFsKCkgPT09IHNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UgKz0gJCh0aGlzKS5kYXRhKCdwcmljZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAkKCcucHJpY2UnKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgICAgICAgICAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2U+c3Ryb25nJykuaHRtbCgnPHNwYW4+JytzeW1ib2wrJzwvc3Bhbj4nK3ByaWNlLmZvcm1hdE1vbmV5KDIsICcuJywgJywnKSk7XHJcblxyXG4gICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn0gKSgpO1xyXG5cclxuIiwiKCBmdW5jdGlvbigpe1xyXG5cclxuICAgICQoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICQoICcucG9wdXAnICkuZWFjaChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgbmV3IFBvcHVwKCQodGhpcykpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgUG9wdXAgPSBmdW5jdGlvbiggb2JqICl7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX3BvcHVwUGFkZGluZyA9IDQwLFxyXG4gICAgICAgICAgICBfYnRuU2hvdyA9ICAkKCAnLnBvcHVwX19vcGVuJyApLFxyXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfYnRuQ2xvc2UgPSBfb2JqLmZpbmQoICcucG9wdXBfX2Nsb3NlLCAucG9wdXBfX2NhbmNlbCcgKSxcclxuICAgICAgICAgICAgX3dyYXAgPSBfb2JqLmZpbmQoICcucG9wdXBfX3dyYXAnICksXHJcbiAgICAgICAgICAgIF9jb250ZW50cyA9IF9vYmouZmluZCggJy5wb3B1cF9fY29udGVudCcgKSxcclxuICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lciA9ICQoICdodG1sJyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXHJcbiAgICAgICAgICAgIF90aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7fSwgMSApO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY2VudGVyV3JhcCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoIF93aW5kb3cuaGVpZ2h0KCkgLSAoIF9wb3B1cFBhZGRpbmcgKiAyICkgLSBfd3JhcC5oZWlnaHQoKSA+IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAuY3NzKCB7IHRvcDogKCAoIF93aW5kb3cuaGVpZ2h0KCkgLSAoIF9wb3B1cFBhZGRpbmcgKiAyICkgKSAtIF93cmFwLmhlaWdodCgpICkgLyAyIH0gKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAuY3NzKCB7IHRvcDogMCB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9nZXRTY3JvbGxXaWR0aCA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnKSxcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxCYXJXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ3BvcHVwX19zY3JvbGxiYXItbWVhc3VyZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggc2Nyb2xsRGl2ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzY3JvbGxCYXJXaWR0aDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2hpZGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfc2Nyb2xsQ29udGVpbmVyLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogMFxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAncG9wdXBfaGlkZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcyAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdhdXRvJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfaGlkZScgKTtcclxuICAgICAgICAgICAgICAgIH0sIDMwMCApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2VudGVyV3JhcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9idG5TaG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93KCAkKCB0aGlzICkuYXR0ciggJ2RhdGEtcG9wdXAnICkgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9jb250ZW50cy5maW5kKCc+ZGl2Jykub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oIGUgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfYnRuQ2xvc2Uub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3Nob3cgPSBmdW5jdGlvbiggY2xhc3NOYW1lICl7XHJcbiAgICAgICAgICAgICAgICBfc2V0UG9wdXBDb250ZW50KCBjbGFzc05hbWUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2Nyb2xsQ29udGVpbmVyLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2hpZGRlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBfZ2V0U2Nyb2xsV2lkdGgoKVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3BvcHVwX29wZW5lZCcgKTtcclxuICAgICAgICAgICAgICAgIF9jZW50ZXJXcmFwKCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0UG9wdXBDb250ZW50ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1ckNvbnRlbnQgPSBfY29udGVudHMuZmlsdGVyKCAnLnBvcHVwX18nICsgY2xhc3NOYW1lICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2NvbnRlbnRzLmNzcyggeyBkaXNwbGF5OiAnbm9uZScgfSApO1xyXG4gICAgICAgICAgICAgICAgY3VyQ29udGVudC5jc3MoIHsgZGlzcGxheTogJ2Jsb2NrJyB9ICk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcbn0gKSgpO1xyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbiggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgJCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5wcm9kdWN0X19zbGlkZXInICksIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IFByb2R1Y3RTbGlkZXIgKCAkKCB0aGlzICkgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcuZmVhdHVyZWQtcHJvZHVjdHMnICksIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEZlYXR1cmVkUHJvZHVjdHNTbGlkZXIgKCAkKCB0aGlzICkgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIFByb2R1Y3RTbGlkZXIgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9vYmogPSBvYmo7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX2luaXRTbGlkZXIoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXRTbGlkZXIgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJCgnLnNsaWRlci1mb3InKS5zbGljaygge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBhc05hdkZvcjogJy5zbGlkZXItbmF2J1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAkKCcuc2xpZGVyLW5hdicpLnNsaWNrKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA0LFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclJvdzogNCxcclxuICAgICAgICAgICAgICAgICAgICBhc05hdkZvcjogJy5zbGlkZXItZm9yJyxcclxuICAgICAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMzYwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDQxMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xyXG4gICAgfTtcclxuICAgIHZhciBGZWF0dXJlZFByb2R1Y3RzU2xpZGVyID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfc2xpZGVyLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxyXG4gICAgICAgICAgICBfZmxhZyxcclxuICAgICAgICAgICAgX3BhZ2luYXRpb24gPSBfb2JqLmZpbmQoJy5zd2lwZXItcGFnaW5hdGlvbicpLFxyXG4gICAgICAgICAgICBfcHJldiA9IF9vYmouZmluZCgnLnN3aXBlci1idXR0b24tcHJldicpLFxyXG4gICAgICAgICAgICBfbmV4dCA9IF9vYmouZmluZCgnLnN3aXBlci1idXR0b24tbmV4dCcpLFxyXG4gICAgICAgICAgICBfbG9vcCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDw9IDc2OCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZsYWcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgX2luaXRTbGlkZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPD0gNzY4ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZmxhZyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFfZmxhZyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3NsaWRlci5zbGljaygndW5zbGljaycpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXRTbGlkZXIgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2FkZFNvbWVQYXJhbXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2xpZGVyID0gJCgnLmZlYXR1cmVkLXByb2R1Y3RzX193cmFwcGVyJykuc2xpY2soIHtcclxuICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNSxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcclxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiA1MDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZBcnJvdzogX3ByZXYsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEFycm93OiBfbmV4dCxcclxuICAgICAgICAgICAgICAgICAgICBhcHBlbmREb3RzOiAgX3BhZ2luYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxNDQwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGRTb21lUGFyYW1zID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdHNfX3NsaWRlJykubGVuZ3RoID49IDQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTQyNSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RzX19zbGlkZScpLmxlbmd0aCA+PSA1ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3AgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKCFfbG9vcCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0c19fY29udHJvbHMnKS5jc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XHJcbiAgICB9O1xyXG5cclxufSApKCk7XHJcbiIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAkKCBmdW5jdGlvbigpe1xyXG4gICAgICAgICQoICdzZWxlY3QnICkuZWFjaCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgbmV3IFdlYnN0ZXJzU2VsZWN0KCB7XHJcbiAgICAgICAgICAgICAgICBvYmo6ICQoIHRoaXMgKSxcclxuICAgICAgICAgICAgICAgIG9wdGlvblR5cGU6IDEsXHJcbiAgICAgICAgICAgICAgICBzaG93VHlwZTogMlxyXG4gICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgV2Vic3RlcnNTZWxlY3QgPSBmdW5jdGlvbiggcGFyYW1zICl7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IHBhcmFtcy5vYmosXHJcbiAgICAgICAgICAgIF9vcHRpb25UeXBlID0gcGFyYW1zLm9wdGlvblR5cGUgfHwgMCxcclxuICAgICAgICAgICAgX3Nob3dUeXBlID0gcGFyYW1zLnNob3dUeXBlIHx8IDAsXHJcbiAgICAgICAgICAgIF92aXNpYmxlID0gcGFyYW1zLnZpc2libGUgfHwgNSxcclxuICAgICAgICAgICAgX2RldmljZSA9IC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApLFxyXG4gICAgICAgICAgICBfdGV4dCA9ICQoICc8c3BhbiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9faXRlbVwiPjwvc3Bhbj4nICksXHJcbiAgICAgICAgICAgIF93cmFwID0gJCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RcIj48L2Rpdj4nICksXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKSxcclxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcclxuICAgICAgICAgICAgX29wZW5lZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfcG9wdXAsIF9zY3JvbGw7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9hZGRXcmFwID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJUZXh0ID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai53cmFwKCBfd3JhcCApO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAgPSBfb2JqLnBhcmVudCgpO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYXBwZW5kKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9fYXJyb3dcIj48L2Rpdj4nICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmJlZm9yZSggX3RleHQgKTtcclxuICAgICAgICAgICAgICAgIF9vYmouZmluZCggJ29wdGlvbicgKS5lYWNoKCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCggdGhpcyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5hdHRyKCAnc2VsZWN0ZWQnICkgPT0gJ3NlbGVjdGVkJyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUZXh0ID0gY3VySXRlbS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBjdXJUZXh0ID09ICcnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9ICBfb2JqLmZpbmQoICdvcHRpb24nKS5lcSggMCApLnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90ZXh0LnRleHQoIGN1clRleHQgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2hpZGVQb3B1cCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfb3BlbmVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoICFfc2hvd1R5cGUgKXtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3Nob3dUeXBlID09IDEgKXtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc3RvcCggdHJ1ZSwgZmFsc2UgKS5zbGlkZVVwKCAzMDAsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAyICkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zdG9wKCB0cnVlLCBmYWxzZSApLmZhZGVPdXQoIDMwMCwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfd3JhcC5yZW1vdmVDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9vcGVuZWQnICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG5cclxuICAgICAgICAgICAgICAgIF9hZGRXcmFwKCk7XHJcbiAgICAgICAgICAgICAgICBfc2VsZWN0Vmlld1R5cGUoKTtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29iai5vbiggJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90ZXh0LnRleHQoICQoIHRoaXMgKS5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLnRleHQoKSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2hhbmdlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCggdGhpcykucHJldigpLnRleHQoICQoIHRoaXMgKS5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLnRleHQoKSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9vcHRpb25UeXBlID09IDEgJiYgIV9kZXZpY2UgKXtcclxuICAgICAgICAgICAgICAgICAgICBfd3JhcC5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbiggZSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Nob3dQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF9ib2R5Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ3Njcm9sbCc6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2VsZWN0Vmlld1R5cGUgPSBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCAhX29wdGlvblR5cGUgfHwgX2RldmljZSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9zZXRNb2JpbGVWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9vcHRpb25UeXBlID09IDEgKXtcclxuICAgICAgICAgICAgICAgICAgICBfc2V0Q3VzdG9tMSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0Q3VzdG9tMSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9jdXN0b20nICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zZXRNb2JpbGVWaWV3ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X21vYmlsZScgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3Nob3dQb3B1cCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0cyA9ICQoICdzZWxlY3QnICksXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdCA9ICQoICc8dWw+PC91bD4nKSxcclxuICAgICAgICAgICAgICAgICAgICBjdXJTY3JvbGwgPSBfd2luZG93LnNjcm9sbFRvcCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IF93cmFwLm9mZnNldCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VySW5kZXggPSBfb2JqLmZpbmQoICdvcHRpb246c2VsZWN0ZWQnICkuaW5kZXgoKSxcclxuICAgICAgICAgICAgICAgICAgICBpZCA9IE1hdGgucm91bmQoIE1hdGgucmFuZG9tKCkgKiAxMDAwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZWN0cy5lYWNoKCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzICE9PSBfb2JqWyAwIF0gJiYgdGhpcy5vYmouY2hlY2tPcGVuZWQoKSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iai5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF9vcGVuZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cCA9ICQoICc8ZGl2IGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0X19wb3B1cFwiIGlkPVwid2Vic3RlcnMtc2VsZWN0X19wb3B1cCcgKyBpZCArICdcIj48L2Rpdj4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai5maW5kKCAnb3B0aW9uJyApLmVhY2goIGZ1bmN0aW9uKCBpICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKCB0aGlzICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGN1ckluZGV4ICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kKCAnPGxpIGNsYXNzPVwiYWN0aXZlXCI+JyArIGN1ckl0ZW0udGV4dCgpICsgJzwvbGk+JyApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kKCAnPGxpPicgKyBjdXJJdGVtLnRleHQoKSArICc8L2xpPicgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cC5hcHBlbmQoIGxpc3QgKTtcclxuICAgICAgICAgICAgICAgIF9ib2R5LmFwcGVuZCggX3BvcHVwICk7XHJcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9vcGVuZWQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBfd3JhcC5vdXRlcldpZHRoKCksXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogb2Zmc2V0LmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBvZmZzZXQudG9wICsgX3dyYXAub3V0ZXJIZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IF9wb3B1cC5vdXRlckhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgaWYoIG1heEhlaWdodCA+IF9wb3B1cC5maW5kKCAnbGknICkuZXEoIDAgKS5vdXRlckhlaWdodCgpICogX3Zpc2libGUgKXtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuaGVpZ2h0KCBfcG9wdXAuZmluZCggJ2xpJyApLmVxKCAwICkub3V0ZXJIZWlnaHQoKSAqIF92aXNpYmxlICk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Njcm9sbCA9IF9wb3B1cC5wZXJmZWN0U2Nyb2xsYmFyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9zaG93VHlwZSA9PSAxICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnNsaWRlRG93biggMzAwICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAyICkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC4xXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5hbmltYXRlKCB7IG9wYWNpdHk6IDEgfSwgMzAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXAuZmluZCggJ2xpJyApLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oIGUgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJCggdGhpcyApLmluZGV4KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai52YWwoIF9vYmouZmluZCggJ29wdGlvbicgKS5lcSggaW5kZXggKS5hdHRyKCAndmFsdWUnICkgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX29iai50cmlnZ2VyKCAnY2hhbmdlJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcbiAgICAgICAgX3NlbGYuY2hlY2tPcGVuZWQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gX29wZW5lZDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9zZWxmLmNsb3NlID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICBfY29uc3RydWN0b3IoKTtcclxuXHJcbiAgICB9O1xyXG5cclxufSApKCk7IiwiKCBmdW5jdGlvbigpe1xyXG5cclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkKCcuY2F0ZWdvcnknKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBGaWx0ZXJzKCAkKHRoaXMpICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIEZpbHRlcnMgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9wYXRoID0gJCgnYm9keScpLmRhdGEoJ2FjdGlvbicpLFxyXG4gICAgICAgICAgICBfcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxyXG4gICAgICAgICAgICBfYnRuID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtaXRlbSBzcGFuJyksXHJcbiAgICAgICAgICAgIF9idG4yID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtdGl0bGUnKSxcclxuICAgICAgICAgICAgX2ZpbHRlcnMgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVycy1pdGVtcycpLFxyXG4gICAgICAgICAgICBfZm9ybSA9IF9maWx0ZXJzLmZpbmQoJ2Zvcm0nKSxcclxuICAgICAgICAgICAgX2Nsb3NlRmlsdGVycyA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJlZC1jbG9zZScpLFxyXG4gICAgICAgICAgICBfZmlsdGVySXRlbSA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJzLWxpc3QnKSxcclxuICAgICAgICAgICAgX2ZpbHRlcmVkID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcmVkJyksXHJcbiAgICAgICAgICAgIF9maWx0ZXJlZExpc3QgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQtbGlzdCcpLFxyXG4gICAgICAgICAgICBfY291bnRGaWx0ZXJlZCA9IDAsXHJcbiAgICAgICAgICAgIF90aXRsZSA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJzLXRpdGxlJyksXHJcbiAgICAgICAgICAgIF90aXRsZUlubmVyID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtdGl0bGUtaW5uZXInKSxcclxuICAgICAgICAgICAgX2NsZWFyRmlsdGVycyA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJlZCAuYnRuLCAuY2F0ZWdvcnlfX2ZpbHRlcnMtY2xlYXInKSxcclxuICAgICAgICAgICAgX2NsZWFyU2luZ2xlID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcmVkLXJlbW92ZScpLFxyXG4gICAgICAgICAgICBfYWRkaXRpb25hbFBhcmFtZXRlcnMgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmluZC1wYXJhbWV0ZXJzJyksXHJcbiAgICAgICAgICAgIF9nbG9iYWxDaGVja0ZsYWcgPSBmYWxzZSxcclxuICAgICAgICAgICAgX2xvYWRpbmcgPSAkKCc8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPjwvZGl2PicpLFxyXG4gICAgICAgICAgICBfaW5wdXRIaWRkZW4gPSBfb2JqLmZpbmQoJ2lucHV0W3R5cGU9aGlkZGVuXS52YWx1ZS1jaGVjaycpLFxyXG4gICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlID0gX29iai5maW5kKCdpbnB1dFt0eXBlPWhpZGRlbl0uY3VycmVudC1wYWdlJyksXHJcbiAgICAgICAgICAgIF9zb3J0aW5nUGFnZSA9IF9vYmouZmluZCgnI2l0ZW1zLXBhZ2UnKSxcclxuICAgICAgICAgICAgX3NvcnRpbmdEYXRlID0gX29iai5maW5kKCcjc29ydGluZy1kYXRlJyksXHJcbiAgICAgICAgICAgIF9kYXRhUmF0ZVBhdGggPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fd3JhcCcpLmRhdGEoJ3JhdGUtcGF0aCcpLFxyXG4gICAgICAgICAgICBfYXBwbHkgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVycy1hcHBseScpLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxyXG4gICAgICAgICAgICBfb2JqVmFsdWUgPSB7fSxcclxuICAgICAgICAgICAgX3RpbWVvdXQgPSBudWxsLFxyXG4gICAgICAgICAgICBfYXJyID0gW10sXHJcbiAgICAgICAgICAgIF9jaGVja05hbWUgPSAnJyxcclxuICAgICAgICAgICAgX2NoZWNrUHJpY2UgPSAnJyxcclxuICAgICAgICAgICAgX2NsZWFyRmxhZ1NlbGVjdCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfY2xlYXJGbGFnUmFkaW8gPSBmYWxzZSxcclxuICAgICAgICAgICAgX3ByaWNlQ2F0ZWdvcnkgPSBfb2JqLmZpbmQoJ2lucHV0W25hbWU9X3ByaWNlXScpO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG5cclxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9idG4uZWFjaCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEZpbHRlcnMgPSBjdXJJdGVtLm5leHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcGFyZW50Lmhhc0NsYXNzKCdvcGVuZWQnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEZpbHRlcnMuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogbmV4dEZpbHRlcnMuZmluZCgnPmRpdicpLmlubmVySGVpZ2h0KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19jb250ZW50JykuY3NzKCB7ICd6LWluZGV4JzogJycgfSApXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24oKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfYnRuLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0RmlsdGVycyA9IGN1ckl0ZW0ubmV4dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHBhcmVudC5oYXNDbGFzcygnb3BlbmVkJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFkZENsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogbmV4dEZpbHRlcnMuZmluZCgnPmRpdicpLmlubmVySGVpZ2h0KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0RmlsdGVycy5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMTAgKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfYnRuMi5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VGaWx0ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2NsZWFyRmlsdGVycy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbCgnMScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xlYXJGaWx0ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIucGFnaW5hdGlvbiBhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQoY3VySXRlbS50ZXh0KCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0uaGFzQ2xhc3MoJ3BhZ2luYXRpb25fX3ByZXYnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcGFyc2VJbnQoIF9pbnB1dEhpZGRlblBhZ2UudmFsKCkgKSAhPSAxICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbCggX2lucHV0SGlkZGVuUGFnZS52YWwoKSAtIDEgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIGN1ckl0ZW0uaGFzQ2xhc3MoJ3BhZ2luYXRpb25fX25leHQnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggISggY3VySXRlbS5wcmV2KCkuaGFzQ2xhc3MoJ2FjdGl2ZScpICkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlblBhZ2UudmFsKCBwYXJzZUludCggX2lucHV0SGlkZGVuUGFnZS52YWwoKSApICsgMSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggdmFsdWUgIT0gcGFyc2VJbnQoIF9pbnB1dEhpZGRlblBhZ2UudmFsKCkgKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIuY2F0ZWdvcnlfX2ZpbHRlcmVkLXJlbW92ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUlkID0gcGFyZW50LmRhdGEoJ2lkJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhTmFtZSA9IHBhcmVudC5kYXRhKCduYW1lJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbCgnMScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xlYXJTaW5nbGVGaWx0ZXIoIGRhdGFJZCwgZGF0YU5hbWUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgX2Nsb3NlRmlsdGVycy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VGaWx0ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2FwcGx5Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUZpbHRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfZmlsdGVySXRlbS5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGN1ckl0ZW0ubmV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxUZXh0ID0gbGFiZWwuY2xvbmUoKS5jaGlsZHJlbigpLnJlbW92ZSgpLmVuZCgpLnRleHQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBjdXJJdGVtLmF0dHIoJ25hbWUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gY3VySXRlbS5kYXRhKCdpZCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlOYW1lID0gY3VySXRlbS5wYXJlbnRzKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtaXRlbScpLmZpbmQoJ3NwYW4nKVswXS5pbm5lclRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudEdyb3VwQ2hlY2sgPSBfZmlsdGVySXRlbS5maW5kKCdpbnB1dFtuYW1lPScrIG5hbWUgKyddOmNoZWNrZWQnKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsQ2hlY2tGbGFnID0gY3VySXRlbS5wcm9wKCdjaGVja2VkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUZpbHRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY291bnRHcm91cENoZWNrKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF93cml0ZUluSGlkZGVuKCBuYW1lLCBpZCwgX2dsb2JhbENoZWNrRmxhZywgY291bnRHcm91cENoZWNrICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlblBhZ2UudmFsKCcxJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRpbmdGaWx0ZXJlZEJ5KCBsYWJlbFRleHQsIGlkLCBuYW1lLCBjYXRlZ29yeU5hbWUgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9zb3J0aW5nUGFnZS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoJzEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9zb3J0aW5nRGF0ZS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUGFnZS52YWwoJzEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9hZGRpdGlvbmFsUGFyYW1ldGVycy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgc3VibWl0OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICBfYWRkaXRpb25hbFBhcmFtZXRlcnMuZmluZCgnc2VsZWN0JykuZWFjaCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gY3VySXRlbS5hdHRyKCduYW1lJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGN1ckl0ZW0udmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfd3JpdGVJbkhpZGRlbiggbmFtZSwgaWQsICdzZWxlY3QnLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfY2xlYXJHcm91cEZpbHRlcnMobmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICBfYWRkaXRpb25hbFBhcmFtZXRlcnMuZmluZCgnaW5wdXRbdHlwZT1yYWRpb106Y2hlY2tlZCcpLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGN1ckl0ZW0uYXR0cignbmFtZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBjdXJJdGVtLmRhdGEoJ2lkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfd3JpdGVJbkhpZGRlbiggbmFtZSwgaWQsICdyYWRpbycsICcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jbGVhckdyb3VwRmlsdGVycyhuYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbCgnMScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZGluZ0ZpbHRlcmVkQnkgPSBmdW5jdGlvbiggaXRlbVRleHQsIGl0ZW1JZCwgaXRlbU5hbWUsIGNhdGVnb3J5TmFtZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX2dsb2JhbENoZWNrRmxhZyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlcmVkTGlzdC5hcHBlbmQoJzxsaSBkYXRhLW5hbWU9JysgaXRlbU5hbWUgKycgZGF0YS1pZD1cIicrIGl0ZW1JZCArJ1wiPicrIGNhdGVnb3J5TmFtZSArJzogJysgaXRlbVRleHQgKycgPGEgaHJlZj1cIiNcIiBjbGFzcz1cImNhdGVnb3J5X19maWx0ZXJlZC1yZW1vdmVcIj48L2E+PC9saT4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVyZWRMaXN0LmZpbmQoJ2xpW2RhdGEtaWQ9XCInICsgaXRlbUlkICsgJ1wiXScpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF9jb3VudEZpbHRlcmVkID0gX2ZpbHRlcmVkTGlzdC5maW5kKCdsaScpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX2NvdW50RmlsdGVyZWQgPiAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVyZWQucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aXRsZS5maW5kKCdzcGFuJykuaHRtbCgnKCcrIF9jb3VudEZpbHRlcmVkICsnKScpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aXRsZUlubmVyLmZpbmQoJ3NwYW4nKS5odG1sKCcoJysgX2NvdW50RmlsdGVyZWQgKycpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RpdGxlLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jbGVhckZpbHRlcnMucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9maWx0ZXJlZC5hZGRDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RpdGxlLmZpbmQoJ3NwYW4nKS5odG1sKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGl0bGVJbm5lci5maW5kKCdzcGFuJykuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RpdGxlLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jbGVhckZpbHRlcnMuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGRMb2FkaW5nID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2xvYWRpbmcgPSAkKCc8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPjwvZGl2PicpO1xyXG5cclxuICAgICAgICAgICAgICAgICQoJy5jYXRlZ29yeV9fY29udGVudCcpLmFwcGVuZChfbG9hZGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2xvYWRpbmcuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6ICQoJy5jYXRlZ29yeV9fd3JhcCcpLnBvc2l0aW9uKCkudG9wIC0gMjBcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xvc2VMb2FkaW5nID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF90aW1lb3V0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RpbWVvdXQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfdGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5sb2FkaW5nJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgfSwgMzAwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcubG9hZGluZycpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSwgNjIwICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xlYXJGaWx0ZXIgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfZmlsdGVyZWQuYWRkQ2xhc3MoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgX3RpdGxlLmZpbmQoJ3NwYW4nKS5odG1sKCcnKTtcclxuICAgICAgICAgICAgICAgIF90aXRsZUlubmVyLmZpbmQoJ3NwYW4nKS5odG1sKCcnKTtcclxuICAgICAgICAgICAgICAgIF90aXRsZS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgIF9maWx0ZXJlZExpc3QuZmluZCgnbGknKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIF9maWx0ZXJJdGVtLmZpbmQoJ2lucHV0W3R5cGU9Y2hlY2tib3hdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlbi52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgICAgIF9hZGRMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jbGVhclNpbmdsZUZpbHRlciA9IGZ1bmN0aW9uKCBpdGVtSWQsIGl0ZW1OYW1lICkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9maWx0ZXJJdGVtLmZpbmQoJ2lucHV0W2RhdGEtaWQ9XCInKyBpdGVtSWQgKydcIl0nKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgX2dsb2JhbENoZWNrRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgX2FkZGluZ0ZpbHRlcmVkQnkoICcnLCBpdGVtSWQsICcnLCAnJyApO1xyXG4gICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgIF93cml0ZUluSGlkZGVuKCBpdGVtTmFtZSwgaXRlbUlkLCBfZ2xvYmFsQ2hlY2tGbGFnLCAnJyApO1xyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xlYXJHcm91cEZpbHRlcnMgPSBmdW5jdGlvbiggaXRlbU5hbWUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2ZpbHRlckl0ZW0uZmluZCgnaW5wdXRbbmFtZT1cIicrIGl0ZW1OYW1lICsnXCJdJykuZWFjaCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUlkID0gY3VySXRlbS5kYXRhKCdpZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVySXRlbS5maW5kKCdpbnB1dFtkYXRhLWlkPVwiJysgaXRlbUlkICsnXCJdJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICBfZ2xvYmFsQ2hlY2tGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgX2FkZGluZ0ZpbHRlcmVkQnkoICcnLCBpdGVtSWQsICcnLCAnJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9jbG9zZUZpbHRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfYnRuMi5oYXNDbGFzcygnb3BlbmVkJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9idG4yLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVycy5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX2NvbnRlbnQnKS5jc3MoIHsgJ3otaW5kZXgnOiAnJyB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2J0bjIuYWRkQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9maWx0ZXJzLmFkZENsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoICBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX2NvbnRlbnQnKS5jc3MoIHsgJ3otaW5kZXgnOiAxMDAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY3JlYXRlUGFnaW5hdGlvbiA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwYWdlcyA9IHBhcnNlSW50KGRhdGEuc2V0dGluZ3MucGFnZXNBbGwpLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVBhZ2UgPSBwYXJzZUludChkYXRhLnNldHRpbmdzLmN1cnJlbnRQYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW5QYWdlLnZhbChhY3RpdmVQYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggcGFnZXMgIT0gMSAmJiAgcGFnZXMgIT0gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2luYXRpb25XcmFwID0gJzxkaXYgY2xhc3M9XCJwYWdpbmF0aW9uXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cInBhZ2luYXRpb25fX3ByZXZcIj48L2E+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHBhZ2VzIDw9IDcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMTsgaSA8PSBwYWdlczsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGFjdGl2ZVBhZ2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFjdGl2ZVwiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBhY3RpdmVQYWdlIDw9IDMgfHwgYWN0aXZlUGFnZSA+IHBhZ2VzLTMgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDE7IGkgPD0gMzsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBhY3RpdmVQYWdlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYWN0aXZlXCI+JysgaSArJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+JysgaSArJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPHNwYW4+Li4uPC9zcGFuPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IHBhZ2VzLTI7IGkgPD0gcGFnZXM7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gYWN0aXZlUGFnZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFjdGl2ZVwiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggYWN0aXZlUGFnZSA+IDMgJiYgYWN0aXZlUGFnZSA8PSBwYWdlcy0zICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+MTwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPHNwYW4+Li4uPC9zcGFuPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIChhY3RpdmVQYWdlLTEgPiAzKSAmJiAoYWN0aXZlUGFnZSsxIDw9IHBhZ2VzLTMpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gYWN0aXZlUGFnZS0xOyBpIDw9IGFjdGl2ZVBhZ2UrMTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gYWN0aXZlUGFnZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhY3RpdmVcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBhY3RpdmVQYWdlLTEgPD0gMyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IGFjdGl2ZVBhZ2U7IGkgPD0gYWN0aXZlUGFnZSsyOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBhY3RpdmVQYWdlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cImFjdGl2ZVwiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+JysgaSArJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIGFjdGl2ZVBhZ2UrMSA+PSBwYWdlcy0zICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gYWN0aXZlUGFnZS0yOyBpIDw9IGFjdGl2ZVBhZ2U7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBpID09IGFjdGl2ZVBhZ2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYWN0aXZlXCI+JysgaSArJzwvYT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8c3Bhbj4uLi48L3NwYW4+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+JysgcGFnZXMgKyc8L2E+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHBhZ2VzID09IDggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGFjdGl2ZVBhZ2UgPiAzICYmIGFjdGl2ZVBhZ2UgPD0gcGFnZXMtMyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPjE8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8c3Bhbj4uLi48L3NwYW4+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDQ7IGkgPD0gNTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gYWN0aXZlUGFnZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJhY3RpdmVcIj4nKyBpICsnPC9hPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSc8YSBocmVmPVwiI1wiPicrIGkgKyc8L2E+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxzcGFuPi4uLjwvc3Bhbj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25XcmFwICs9JzxhIGhyZWY9XCIjXCI+JysgcGFnZXMgKyc8L2E+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbldyYXAgKz0nPGEgaHJlZj1cIiNcIiBjbGFzcz1cInBhZ2luYXRpb25fX25leHRcIj48L2E+JztcclxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uV3JhcCArPSAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnBhZ2luYXRpb24td3JhcCcpLmh0bWwocGFnaW5hdGlvbldyYXApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCAkKCcucGFnaW5hdGlvbicpLmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5wYWdpbmF0aW9uJykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfcGFzdGVOZXdQcm9kdWN0cyA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0gZGF0YS5wcm9kdWN0cyxcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgPSAnPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5XCI+JyxcclxuICAgICAgICAgICAgICAgICAgICBuZXdBcnJQcmljZVJhbmdlID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9vYmpWYWx1ZVsncHJpY2UnXSAhPSB1bmRlZmluZWQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IF9vYmpWYWx1ZVsncHJpY2UnXS5sZW5ndGgtMTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByaWNlSXRlbSA9IHBhcnNlRmxvYXQoX29ialZhbHVlWydwcmljZSddW2ldLnJlcGxhY2UoJyQnLCcnKS5yZXBsYWNlKCcsJywnJykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QXJyUHJpY2VSYW5nZS5wdXNoKHByaWNlSXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pZiggX3ByaWNlQ2F0ZWdvcnkubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vICAgIHZhciBjaGVja2VkUHJpY2VSYW5nZSA9IF9wcmljZUNhdGVnb3J5LmZpbHRlcignOmNoZWNrZWQnKSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICBzdGFydGluZ1ByaWNlID0gcGFyc2VJbnQoY2hlY2tlZFByaWNlUmFuZ2UuYXR0cignZGF0YS1pZCcpLnNwbGl0KCctJylbMF0pO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBuZXdBcnJQcmljZVJhbmdlLmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaWNlUmFuZ2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzdGFydGluZ1ByaWNlID09IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZVJhbmdlID0gTWF0aC5taW4uYXBwbHkobnVsbCwgbmV3QXJyUHJpY2VSYW5nZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBuZXdBcnJQcmljZVJhbmdlLmxlbmd0aC0xOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIG5ld0FyclByaWNlUmFuZ2VbaV0gPj0gc3RhcnRpbmdQcmljZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VSYW5nZSA9IG5ld0FyclByaWNlUmFuZ2VbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJC5lYWNoKCBuZXdEYXRhLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9IHByb2R1Y3QucHJpY2VbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbGVQcmljZSA9IHByb2R1Y3Qub2xkUHJpY2VbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlSXRlbTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiggX3ByaWNlQ2F0ZWdvcnkubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gcHJvZHVjdC5wcmljZS5sZW5ndGgtMTsgaSsrICkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIHByaWNlSXRlbSA9IHBhcnNlRmxvYXQocHJvZHVjdC5wcmljZVtpXS5yZXBsYWNlKCckJywnJykucmVwbGFjZSgnLCcsJycpKTtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICBpZiggcHJpY2VJdGVtID49IHN0YXJ0aW5nUHJpY2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIHByaWNlID0gcHJvZHVjdC5wcmljZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIHNhbGVQcmljZSA9IHByb2R1Y3Qub2xkUHJpY2VbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBuZXdBcnJQcmljZVJhbmdlLmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHByb2R1Y3QucHJpY2UubGVuZ3RoLTE7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZUl0ZW0gPSBwYXJzZUZsb2F0KHByb2R1Y3QucHJpY2VbaV0ucmVwbGFjZSgnJCcsJycpLnJlcGxhY2UoJywnLCcnKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHByaWNlSXRlbSA+PSBwcmljZVJhbmdlICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9IHByb2R1Y3QucHJpY2VbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FsZVByaWNlID0gcHJvZHVjdC5vbGRQcmljZVtpXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19pdGVtXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3QuZmVhdHVyZWQgIT0gdW5kZWZpbmVkICYmIHByb2R1Y3QuZmVhdHVyZWQgIT0gXCJcIiApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPHNwYW4gY2xhc3M9XCJzaXRlX19mZWF0dXJlZFwiPicrIHByb2R1Y3QuZmVhdHVyZWQgKyc8L3NwYW4+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9faGVhZFwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJysgcHJvZHVjdC51cmxEZXRhaWxzICsnXCIgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fcGljXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJysgcHJvZHVjdC5waWN0dXJlICsnKVwiPjwvYT5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fdGl0bGVcIj48YSBocmVmPVwiJysgcHJvZHVjdC51cmxEZXRhaWxzICsnXCI+JysgcHJvZHVjdC50aXRsZSArJzwvYT48L2gyPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0LnJhdGUgIT0gdW5kZWZpbmVkICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8ZGl2IGNsYXNzPVwicmF0ZVwiPic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LnJhdGUuc3RhcnNDb3VudC0xOyBpKysgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGltZyBzcmM9XCInKyBfZGF0YVJhdGVQYXRoICsnaW1nL3N0YXIucG5nXCIgd2lkdGg9XCI2MFwiIGhlaWdodD1cIjUwXCIgYWx0PVwiXCI+Jm5ic3A7J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGEgaHJlZj1cIicrIHByb2R1Y3QucmF0ZS51cmxSZXZpZXdzICsnXCIgY2xhc3M9XCJyYXRlX19yZXZpZXdzXCI+JysgcHJvZHVjdC5yYXRlLnJldmlld3NDb3VudCArJzwvYT5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fY29udGVudFwiPic7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3QuY29udGVudC5kZXNjcmlwdGlvbiAhPSB1bmRlZmluZWQgJiYgcHJvZHVjdC5jb250ZW50LmRlc2NyaXB0aW9uICE9IFwiXCIgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGRpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2Rlc2NyaXB0aW9uXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDw9IHByb2R1Y3QuY29udGVudC5kZXNjcmlwdGlvbi5sZW5ndGgtMTsgaSsrICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxsaT4nKyBwcm9kdWN0LmNvbnRlbnQuZGVzY3JpcHRpb25baV0gKyc8L2xpPidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzwvdWw+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGRpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9faXRlbXNcIj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvZHVjdC5jb250ZW50LnNwZWNpZmljYXRpb24gIT0gdW5kZWZpbmVkICYmIHByb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uICE9IFwiXCIgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGRpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fc3BlY2lmaWNhdGlvblwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19zcGVjaWZpY2F0aW9uLWhlYWRcIj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gcHJvZHVjdC5jb250ZW50LnNwZWNpZmljYXRpb24uaGVhZC5sZW5ndGgtMTsgaSsrICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXYgc3R5bGU9XCJ3aWR0aDonKyAoMTAwL3Byb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uLmhlYWQubGVuZ3RoKSArJyVcIj4nKyBwcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5oZWFkW2ldICsnPC9kaXY+J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fc3BlY2lmaWNhdGlvbi1jb250ZW50XCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDw9IHByb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uLmNvbnRlbnQubGVuZ3RoLTE7IGkrKyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8ZGl2IHN0eWxlPVwid2lkdGg6JysgKDEwMC9wcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5oZWFkLmxlbmd0aCkgKyclXCI+JysgcHJvZHVjdC5jb250ZW50LnNwZWNpZmljYXRpb24uY29udGVudFtpXSArJzwvZGl2PidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHNhbGVQcmljZSAhPSB1bmRlZmluZWQgJiYgc2FsZVByaWNlICE9IFwiXCIgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19mb290ZXJcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19wcmljZVwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlbD4nKyBzYWxlUHJpY2UgKyc8L2RlbD4gJysgcHJpY2UgKydcXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2Zvb3RlclwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX3ByaWNlXCI+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKyBwcmljZSArJ1xcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8YSBocmVmPVwiJysgcHJvZHVjdC51cmxEZXRhaWxzICsnXCIgY2xhc3M9XCJidG4gYnRuXzNcIj5zZWUgZGV0YWlsczwvYT5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgICAgICAkKCcuY2F0ZWdvcnlfX3dyYXAnKS5odG1sKHByb2R1Y3RzV3JhcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2Nsb3NlTG9hZGluZygpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3JlcXVlc3RDb250ZW50ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogX3BhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gOiAnZ2V0X2ZpbHRlcmVkX3Byb2R1Y3RzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF9pbnB1dEhpZGRlbi52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVNvcnRpbmc6IF9zb3J0aW5nUGFnZS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVNvcnRpbmc6IF9zb3J0aW5nRGF0ZS52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IF9pbnB1dEhpZGRlblBhZ2UudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkQ2F0ZWdvcnk6IF9vYmouZGF0YSgnaWQtY2F0ZWdvcnknKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFBhcmFtZXRlcnM6IF9hZGRpdGlvbmFsUGFyYW1ldGVycy5zZXJpYWxpemUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICggbSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wYXN0ZU5ld1Byb2R1Y3RzKCBtICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jcmVhdGVQYWdpbmF0aW9uKCBtICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF93cml0ZUluSGlkZGVuID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGNoZWNrRmxhZywgY291bnRHcm91cENoZWNrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIGNoZWNrRmxhZyA9PSAncmFkaW8nICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbbmFtZV0gPSBbdmFsdWVdO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIGNoZWNrRmxhZyA9PSAnc2VsZWN0JyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHZhbHVlICE9IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbbmFtZV0gPSBbdmFsdWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9vYmpWYWx1ZVtuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggY2hlY2tGbGFnICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICBpZiggX29ialZhbHVlLmhhc093blByb3BlcnR5KG5hbWUpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGNvdW50R3JvdXBDaGVjayA9PSAxICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmpWYWx1ZVtuYW1lXSA9IFt2YWx1ZV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gX29ialZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcm9wID09IG5hbWUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbcHJvcF0ucHVzaCh2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbbmFtZV0gPSBbdmFsdWVdXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBfb2JqVmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcm9wID09IG5hbWUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBfb2JqVmFsdWVbcHJvcF0uaW5kZXhPZih2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaSAhPSAtMSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqVmFsdWVbcHJvcF0uc3BsaWNlKGksIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICBpZiggX29ialZhbHVlW25hbWVdLmxlbmd0aCA9PSAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF9vYmpWYWx1ZVtuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzdHJGaW5pc2ggPSAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJWYWx1ZXMgPSAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJGdWxsID0gJycsXHJcbiAgICAgICAgICAgICAgICAgICAgYXJyQWxsID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKCB2YXIga2V5IGluIF9vYmpWYWx1ZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2FyciA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IF9vYmpWYWx1ZVsga2V5IF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9hcnIucHVzaCggaXRlbSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBfYXJyLmxlbmd0aC0xOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0clZhbHVlcyA9IF9hcnIuam9pbignLCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN0ckZ1bGwgPSBrZXkgKyAnPScgKyBzdHJWYWx1ZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFyckFsbC5wdXNoKHN0ckZ1bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdHJGaW5pc2ggPSBhcnJBbGwuam9pbignJicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW4udmFsKCBzdHJGaW5pc2ggKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfb2JqLmhhc0NsYXNzKCdjYXRlZ29yeV9zdWInKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2FkZExvYWRpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG59ICkoKTsiLCIoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICQoJy5zZWFyY2gnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBTZWFyY2goICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgU2VhcmNoID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfaW5wdXQgPSBfb2JqLmZpbmQoJ2lucHV0W3R5cGU9c2VhcmNoXScpLFxyXG4gICAgICAgICAgICBfcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxyXG4gICAgICAgICAgICBfcGF0aCA9IF9vYmouZGF0YSgncGF0aCcpLFxyXG4gICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwLFxyXG4gICAgICAgICAgICBjb3VudEl0ZW1zID0gMCxcclxuICAgICAgICAgICAgdmFsdWVJbnB1dCA9IF9pbnB1dC52YWwoKSxcclxuICAgICAgICAgICAgX3Jlc3VsdCA9IF9vYmouZmluZCgnLnNlYXJjaF9fcmVzdWx0Jyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9pbnB1dC5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleXVwOiBmdW5jdGlvbihJKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggJCh3aW5kb3cpLndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goSS5rZXlDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZmlsdGVyKCcuYWN0aXZlJykubGVuZ3RoID09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJ2Zvcm0nKS5zdWJtaXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVJbnB1dCA9ICQodGhpcykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggdmFsdWVJbnB1dC5sZW5ndGggPj0gX29iai5kYXRhKCdzeW1ib2xzJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FqYXhSZXF1ZXN0KCAkKHRoaXMpLCB2YWx1ZUlucHV0Lmxlbmd0aCk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggJCh0aGlzKS52YWwoKSA9PSAnJyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWRvd246IGZ1bmN0aW9uKEkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQnKS5odG1sKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcudG9wLXByb2R1Y3RzJykuaHRtbCgnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQod2luZG93KS53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKCBJLmtleUNvZGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZmlsdGVyKCcuYWN0aXZlJykubGVuZ3RoID09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IF9vYmouZGF0YSgnYWN0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5maWx0ZXIoJy5hY3RpdmUnKS5maW5kKCdhJykuYXR0cignaHJlZicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggY291bnRJdGVtcyA+IDAgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9rZXlBY3RpdmF0ZSggSS5rZXlDb2RlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHN1Z2dlc3RTZWxlY3RlZCA9PSBjb3VudEl0ZW1zKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5jbGljayggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJib2R5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oIGV2ZW50ICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICAgICAgICBcIi5zZWFyY2hfX2ZvdW5kIGxpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clRleHQgPSBjdXJJdGVtLmZpbmQoJ2EnKS50ZXh0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKGN1clRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwia2V5ZG93blwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLnNlYXJjaF9fZm91bmQgbGlcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihJKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKEkua2V5Q29kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9rZXlBY3RpdmF0ZSA9IGZ1bmN0aW9uKG4pIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfb2JqLnBhcmVudHMoKS5oYXNDbGFzcygnc2l0ZV9fZm9vdGVyJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBuID09IDM4ICYmIHN1Z2dlc3RTZWxlY3RlZCA8IGNvdW50SXRlbXMgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbiA9PSA0MCAmJiBzdWdnZXN0U2VsZWN0ZWQgPiAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggc3VnZ2VzdFNlbGVjdGVkID4gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5lcSggLTEgLSAoc3VnZ2VzdFNlbGVjdGVkIC0gMSkgKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dC52YWwoIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5lcSggLTEgLSAoc3VnZ2VzdFNlbGVjdGVkIC0gMSkgKS5maW5kKCdhJykudGV4dCgpICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCB2YWx1ZUlucHV0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggbiA9PSA0MCAmJiBzdWdnZXN0U2VsZWN0ZWQgPCBjb3VudEl0ZW1zICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG4gPT0gMzggJiYgc3VnZ2VzdFNlbGVjdGVkID4gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZXEoIHN1Z2dlc3RTZWxlY3RlZCAtIDEgKS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dC52YWwoIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5lcSggc3VnZ2VzdFNlbGVjdGVkIC0gMSApLmZpbmQoJ2EnKS50ZXh0KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dC52YWwoIHZhbHVlSW5wdXQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWRkRGF0YSA9IGZ1bmN0aW9uKCBkYXRhICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzID0gZGF0YS5jYXRlZ29yaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXNBdmFpbGFiaWxpdHkgPSBjYXRlZ29yaWVzLmxlbmd0aCAhPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzID0gZGF0YS5wcm9kdWN0cyxcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0F2YWlsYWJpbGl0eSA9IHByb2R1Y3RzLmxlbmd0aCAhPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FyciA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzQ2F0ZWdvcmllc0FyciA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybFByb2R1Y3RzQ2F0ZWdvcmllc0FyciA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0c0F2YWlsYWJpbGl0eSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2R1Y3RzV3JhcCA9ICc8ZGl2IGNsYXNzPVwidG9wLXByb2R1Y3RzX193cmFwXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCBwcm9kdWN0cywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzxkaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1wcm9kdWN0c19faXRlbVwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9wLXByb2R1Y3RzX19waWNcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybCgnKyBwcm9kdWN0LnNyYyArJylcIj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidG9wLXByb2R1Y3RzX19wcmljZVwiPjxkZWw+JysgcHJvZHVjdC5vbGRQcmljZSArJzwvZGVsPiAnKyBwcm9kdWN0LnByaWNlICsnPC9zcGFuPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX2l0ZW0tdGl0bGVcIj4nKyBwcm9kdWN0Lm5hbWUgKyc8L2gzPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJysgcHJvZHVjdC5ocmVmICsnXCIgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX2J0blwiPnZpZXc8L2E+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggIWNhdGVnb3JpZXNBdmFpbGFiaWxpdHkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyLnB1c2goIFtwcm9kdWN0LmNhdGVnb3JpZXMubWFpbkNhdGVnb3J5LCBwcm9kdWN0LmNhdGVnb3JpZXMudXJsTWFpbkNhdGVnb3J5LCBwcm9kdWN0LmNhdGVnb3JpZXMuc3ViY2F0ZWdvcmllcywgcHJvZHVjdC5jYXRlZ29yaWVzLnVybFN1YmNhdGVnb3JpZXNdICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJ2RpdicpLmVxKDEpLmZpbmQoJy50b3AtcHJvZHVjdHMnKS5odG1sKCc8aDIgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX3RpdGxlXCI+VG9wIFByb2R1Y3RzPC9oMj4nICsgcHJvZHVjdHNXcmFwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdFN0ciA9ICc8dWwgY2xhc3M9XCJzZWFyY2hfX2ZvdW5kXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGNhdGVnb3JpZXNBdmFpbGFiaWxpdHkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goIGNhdGVnb3JpZXMsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJjYXRlZ29yaWVzID0gdGhpcy5zdWJjYXRlZ29yaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybFN1YmNhdGVnb3JpZXMgPSB0aGlzLnVybFN1YmNhdGVnb3JpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggc3ViY2F0ZWdvcmllcyAhPSB1bmRlZmluZWQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDw9IHN1YmNhdGVnb3JpZXMubGVuZ3RoLTE7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwICs9ICc8bGkgY2xhc3M9XCJzZWFyY2hfX2ZvdW5kLXN1YlwiPjxhIGhyZWY9XCInKyB1cmxTdWJjYXRlZ29yaWVzW2ldICsnXCI+JyArIHN1YmNhdGVnb3JpZXNbaV0gKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwICs9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gJzxsaT48YSBocmVmPVwiJysgdGhpcy51cmxDYXRlZ29yeSArJ1wiPicrIHRoaXMubmFtZSArJzwvYT48L2xpPicrIHN1YmNhdGVnb3JpZXNXcmFwICsnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8PSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIubGVuZ3RoLTE7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggZmxhZyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5wdXNoKGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xXVswXSAhPSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMF0gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5wdXNoKGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDw9IGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXS5sZW5ndGgtMTsgaisrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIHogPSAwOyB6IDw9IGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXS5sZW5ndGgtMTsgeisrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xXVsyXS5pbmRleE9mKCBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl1bel0pID09IC0xICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xXVsyXS5wdXNoKCBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl1bel0gKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDw9IHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXS5sZW5ndGgtMTsgaisrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViY2F0ZWdvcmllc1dyYXAgPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgeiA9IDA7IHogPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdLmxlbmd0aC0xOyB6KysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCArPSAnPGxpIGNsYXNzPVwic2VhcmNoX19mb3VuZC1zdWJcIj48YSBocmVmPVwiJyArIHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVszXVt6XSArICdcIj4nICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdW3pdICsgJzwvYT48L2xpPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ICsrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwICs9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gJzxsaT48YSBocmVmPVwiJyArIHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsxXSArICdcIj4nICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzBdICsgJzwvYT48L2xpPicrIHN1YmNhdGVnb3JpZXNXcmFwICsnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gJzwvdWw+JztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCdkaXY6Zmlyc3QnKS5odG1sKHJlc3VsdFN0cik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQnKS5maW5kKCdsaTpub3QoOmx0KDExKSknKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY291bnRJdGVtcyA9IF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQnKS5maW5kKCdsaScpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5hZGRDbGFzcygndmlzaWJsZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hamF4UmVxdWVzdCA9ICBmdW5jdGlvbiggaW5wdXQsIG4gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0ID0gJC5hamF4KCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBfcGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpbnB1dC52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOidtYWluX3NlYXJjaCdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoIG1zZyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBPYmplY3Qua2V5cyhtc2cpLmxlbmd0aCAhPSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FkZERhdGEoIG1zZyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWE1MSHR0cFJlcXVlc3Quc3RhdHVzVGV4dCAhPSBcImFib3J0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3JcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyJdfQ==
