!function(){$(function(){$(".site__menu").each(function(){new e($(this)),new n($(this))})});var e=function(e){var n=e,i=n.find(".site__menu-item"),t=n.find(".site__menu-icon"),d=$(window),s=null,o=d.width(),a=function(){d.on({resize:function(){o>d.width()&&(o=d.width(),d.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),t.on({click:function(){var e=jQuery(this),n=e.parents("li"),i=n.find(".site__menu-sub");return d.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),i.slideUp()):(n.addClass("opened"),i.slideDown())),!1}}),i.on({mouseenter:function(){if(d.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");d.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(d.width()>=1024){$(".featured-product__loading").addClass("visible"),s&&(clearTimeout(s),s=null);var e=$(this),i=e.data("product");s=setTimeout(function(){n.find(".featured-product").find(".featured-product__title").text(i.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",i.src),n.find(".featured-product").find(".btn").attr("href",i.href),n.find(".featured-product").find(".featured-product__price span").text(i.price),i.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),i.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(i.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),s=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){d.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){d.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){d.width()>=1024&&$(this).removeClass("opened")})},r=function(){a()};r()},n=function(e){var n,i=this,t=e,d=$(window),s=!1,o=$(".site__header"),a=$(".site__hidden-items"),r=o.innerHeight(),c=$(".site__header-btn"),u=$(".site__hidden-close"),l=$(".search"),f=$(".search-btn"),h=$(".search__cancel"),p=$(".site__hidden-btn"),_=function(){c.on({click:function(){C($(this))}}),u.on({click:function(){return b(),!1}}),f.on({click:function(){return w($(this)),!1}}),h.on({click:function(){return k(),!1}}),d.on({scroll:function(){m(),s=d.scrollTop()>=r},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;v(i)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;v(i)}},touchmove:function(e){var i=e.originalEvent.touches[0].clientY;i>n?v(-1):i<n&&v(1),n=i},keydown:function(e){switch(e.which){case 32:v(1);break;case 33:v(-1);break;case 34:v(1);break;case 35:v(1);break;case 36:v(-1);break;case 38:v(-1);break;case 40:v(1);break;default:return}}})},v=function(e){e>0&&!o.hasClass("site__header_hidden")&&!c.hasClass("opened")&&s&&o.addClass("site__header_hidden"),e<0&&o.hasClass("site__header_hidden")&&!c.hasClass("opened")&&s&&o.removeClass("site__header_hidden")},m=function(){d.scrollTop()>r+150?o.addClass("fixed"):o.removeClass("fixed")},C=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),a.removeClass("opened")):(n.addClass("opened"),a.addClass("opened"))},w=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),l.removeClass("active"),p.removeClass("hidden")):(n.addClass("opened"),l.addClass("active"),p.addClass("hidden"))},b=function(){c.removeClass("opened"),a.removeClass("opened")},k=function(){f.removeClass("opened"),l.removeClass("active"),p.removeClass("hidden")},g=function(){t[0].obj=i,_()};g()}}();
"use strict";!function(){$(function(){$.each($(".product__slider"),function(){new e($(this))}),$.each($(".featured-products"),function(){new i($(this))})});var e=function(e){var i,n,t=this,o=e,s=function(){o[0].obj=t,r()},r=function(){i=new Swiper(o.find(".gallery-top"),{slidesPerView:"1",loop:!0,loopedSlides:o.find(".gallery-top .swiper-slide").length,centeredSlides:!1,spaceBetween:30}),n=new Swiper(o.find(".gallery-thumbs"),{centeredSlides:!1,loop:!0,loopedSlides:o.find(".gallery-thumbs .swiper-slide").length,slidesPerView:"4",touchRatio:.2,slideToClickedSlide:!0,breakpoints:{415:{slidesPerView:"3"},1440:{slidesPerView:"3"}}}),i.params.control=n,n.params.control=i};s()},i=function(e){var i,n,t=this,o=e,s=$(window),r=function(){o[0].obj=t,l()},l=function(){s.on({load:function(){s.width()<=768?n=!0:(n=!0,n&&(a(),n=!1))},resize:function(){s.width()<=768?n||(d(),n=!0):n&&(a(),n=!1)}})},d=function(){i.destroy(!0,!0)},a=function(){i=new Swiper(o.find(".swiper-container"),{pagination:o.find(".swiper-pagination"),slidesPerView:5,paginationClickable:!0,speed:600,autoplay:5e3,autoplayDisableOnInteraction:!1,nextButton:o.find(".swiper-button-next"),prevButton:o.find(".swiper-button-prev"),breakpoints:{1440:{slidesPerView:4}}})};r()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,i,n=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),p=$('<span class="websters-select__item"></span>'),d=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(d),d=o.parent(),d.append('<div class="websters-select__arrow"></div>'),o.before(p),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),p.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),d.removeClass("websters-select_opened")},b=function(){o[0].obj=n,h(),g(),w()},w=function(){o.on("change",function(){p.text($(this).find("option:selected").text())}),1!=s||l||(d.on({click:function(e){e.stopPropagation(),u?v():m()}}),r.on({click:function(){u&&v()}}))},g=function(){!s||l?y():1==s&&_()},_=function(){d.addClass("websters-select_custom")},y=function(){d.addClass("websters-select_mobile")},m=function(){var e=$("select"),n=$("<ul></ul>"),s=(r.scrollTop(),d.offset()),l=0,p=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==p?n.append('<li class="active">'+t.text()+"</li>"):n.append("<li>"+t.text()+"</li>")}),t.append(n),f.append(t),d.addClass("websters-select_opened"),t.css({width:d.outerWidth(),left:s.left,top:s.top+d.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),i=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};n.checkOpened=function(){return u},n.close=function(){v()},b()}}();
!function(){$(function(){$(".category").each(function(){new e($(this))})});var e=function(e){var t=e,i=$("body").data("action"),n=new XMLHttpRequest,s=t.find(".category__filters-item span"),a=t.find(".category__filters-title"),d=t.find(".category__filters-items"),c=d.find("form"),o=t.find(".category__filtered-close"),r=t.find(".category__filters-list"),l=t.find(".category__filtered"),f=t.find(".category__filtered-list"),u=0,v=t.find(".category__filters-title"),p=t.find(".category__filters-title-inner"),_=t.find(".category__filtered .btn, .category__filters-clear"),h=!1,g=$('<div class="loading"></div>'),m=$(window),y=function(){m.on({resize:function(){s.each(function(){var e=$(this),t=e.parent(),i=e.next();t.hasClass("opened")&&i.css({"min-height":i.find(">div").innerHeight()})})}}),s.on({click:function(){var e=$(this),t=e.parent(),i=e.next();t.hasClass("opened")?(t.removeClass("opened"),i.css({"min-height":0,height:0})):(t.addClass("opened"),i.css({"min-height":i.find(">div").innerHeight()}),setTimeout(function(){i.css({height:"auto"})},310))}}),a.on({click:function(){w()}}),_.on({click:function(){return k(),!1}}),o.on({click:function(){return w(),!1}}),r.find("input[type=checkbox]").on({change:function(){var e=$(this),t=e.attr("name"),i=e.next(),n=i.text();h=e.prop("checked"),b(),w(),T(n,t,!1)}})},b=function(){g=$('<div class="loading"></div>'),$(".category__inner").append(g)},C=function(){setTimeout(function(){g.addClass("hidden")},300),setTimeout(function(){g.remove()},620)},k=function(){l.addClass("hidden"),v.find("span").html(""),p.find("span").html(""),v.removeClass("selected"),f.find("li").remove(),r.find("input[type=checkbox]").prop("checked",!1),b(),T(null,null,!0)},w=function(){a.hasClass("opened")?(a.removeClass("opened"),d.removeClass("opened"),$(".site__content").attr("style","")):(a.addClass("opened"),d.addClass("opened"),$(".site__content").css({"z-index":100}))},x=function(e,t){h?f.append('<li data-name="'+t+'">'+e+' <a href="#" class="category__filtered-remove"></a></li>'):f.find("li[data-name="+t+"]").remove(),u=f.find("li").length,u>0?(l.removeClass("hidden"),v.find("span").html("("+u+")"),p.find("span").html("("+u+")"),v.addClass("selected"),_.removeClass("hidden")):(l.addClass("hidden"),v.find("span").html(""),p.find("span").html(""),v.removeClass("selected"),_.addClass("hidden"))},R=function(e){var t=e.products,i='<div class="products-subcategory">';$.each(t,function(){var e=this;if(i+='<div class="products-subcategory__item">',void 0!=e.featured&&(i+='<span class="site__featured">'+e.featured+"</span>"),i+='<div class="products-subcategory__head">                                            <div>                                                <div class="products-subcategory__pic" style="background-image: url('+e.picture+')"></div>                                            </div>                                            <div>                                                <h2 class="products-subcategory__title">'+e.title+"</h2>",void 0!=e.rate){i+='<div class="rate">';for(var t=0;t<=e.rate.starsCount-1;t++)i+='<img src="img/star.png" width="60" height="50" alt="">&nbsp;';i+='<a href="'+e.rate.urlReviews+'" class="rate__reviews">'+e.rate.reviewsCount+"</a>                                                </div>"}if(i+='</div>                                        </div>                                        <div class="products-subcategory__content">',void 0!=e.content.description){i+='<div>                                        <ul class="products-subcategory__description">';for(var t=0;t<=e.content.description.length-1;t++)i+="<li>"+e.content.description[t]+"</li>";i+="</ul>                                    </div>"}i+='<div>                                            <div class="products-subcategory__items">                                                <div>                                                    <div class="products-subcategory__specification">                                                        <div class="products-subcategory__specification-head">';for(var t=0;t<=e.content.specification.head.length-1;t++)i+="<div>"+e.content.specification.head[t]+"</div>";i+='</div>                                                        <div class="products-subcategory__specification-content">';for(var t=0;t<=e.content.specification.content.length-1;t++)i+="<div>"+e.content.specification.content[t]+"</div>";i+='</div>                                                    </div>                                                </div>                                                <div class="products-subcategory__footer">                                                    <div class="products-subcategory__price">                                                        <del>'+e.oldPrice+"</del> "+e.price+'                                                    </div>                                                    <a href="'+e.urlDetails+'" class="btn btn_3">see details</a>                                                </div>                                            </div>                                        </div>                                    </div>                                    </div>'}),i+="</div>",$(".category__wrap").html(i)},T=function(e,t,s){n.abort(),n=$.ajax({url:i,data:{value:c.serialize()},dataType:"json",type:"get",success:function(i){s||x(e,t),R(i),C()},error:function(e){"abort"!=e.statusText&&alert("ERROR!!!")}})},z=function(){y()};z()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var t=e,i=t.find("input[type=search]"),a=new XMLHttpRequest,s=t.data("path"),n=0,o=0,r=i.val(),c=t.find(".search__result"),l=function(){i.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==$(".search__found li").filter(".active").length&&t.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var i=$(this).val();i.length>0?u($(this),i.length):""==$(this).val()&&(c.removeClass("visible"),n=0)}},keydown:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:return 0==$(".search__found li").filter(".active").length?window.location.href=t.data("action"):window.location.href=$(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),n=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),n==o&&(n=0))}}}),$("html").click(function(){c.removeClass("visible"),n=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),t=e.find("a").text();i.val(t),c.removeClass("visible"),n=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){$(".search__found li").removeClass("active"),40==e&&n<o?n++:38==e&&n>0&&n--,n>0?($(".search__found li").eq(n-1).addClass("active"),i.val($(".search__found li").eq(n-1).find("a").text())):i.val(r)},f=function(e){var e=e,t=e.categories,i=0!=t.length,a=e.products,s=[],n=[],r=!0,l='<div class="top-products__wrap">';$.each(a,function(){var e=this;l+='<div>                                            <div class="top-products__item">                                                <div class="top-products__pic">                                                    <img src="'+e.src+'" width="414" height="414" alt="'+e.alt+'">                                                </div>                                                <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                <h3 class="top-products__item-title">'+e.name+'</h3>                                                <a href="'+e.href+'" class="top-products__btn">view</a>                                            </div>                                        </div>',i||s.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),l+="</div>",c.find("div").eq(1).find(".top-products").html(l);var d='<ul class="search__found">';if(i)$.each(t,function(){var e=this.subcategories,t=this.urlSubcategories,i="";if(void 0!=e){for(var a=0;a<=e.length-1;a++)i+='<li class="search__found-sub"><a href="'+t[a]+'">'+e[a]+"</a></li>";i+=""}d+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+i});else{for(var f=0;f<=s.length-1;f++)if(r&&(n.push(s[f]),r=!1),n[n.length-1][0]!=s[f][0])n.push(s[f]);else for(var u=0;u<=s[f].length-1;u++)for(var h=0;h<=s[f][2].length-1;h++)n[n.length-1][2].indexOf(s[f][2][h])==-1&&n[n.length-1][2].push(s[f][2][h]);console.log(n);for(var v=0,f=0;f<=n.length-1;f++){for(var u=0;u<=n[f].length-1;u++){for(var _="",h=0;h<=n[f][2].length-1;h++)_+='<li class="search__found-sub"><a href="'+n[f][3][h]+'">'+n[f][2][h]+"</a></li>",v++;_+=""}d+='<li><a href="'+n[f][1]+'">'+n[f][0]+"</a></li>"+_}}d+="</ul>",c.find("div:first").html(d),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")},u=function(e,t){return a.abort(),a=$.ajax({url:s,data:{value:e.val()},dataType:"json",type:"get",success:function(e){f(e)},error:function(e){"abort"!=e.statusText&&alert("Error")}}),!1},h=function(){l()};h()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnByb2R1Y3Qtc2xpZGVyLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyIsImpxdWVyeS5maWx0ZXJzLmpzIiwianF1ZXJ5LnNlYXJjaC5qcyJdLCJuYW1lcyI6WyIkIiwiZWFjaCIsIlN1Yk1lbnUiLCJ0aGlzIiwiTWVudSIsIm9iaiIsIl9vYmoiLCJfaXRlbXMiLCJmaW5kIiwiX2Fycm93IiwiX3dpbmRvdyIsIndpbmRvdyIsInRpbWVvdXQiLCJfc3RhcnRXaW5XaWR0aCIsIndpZHRoIiwiX2FkZEV2ZW50cyIsIm9uIiwicmVzaXplIiwicmVtb3ZlQ2xhc3MiLCJqUXVlcnkiLCJjdXJJdGVtIiwicGFyZW50IiwiaGFzQ2xhc3MiLCJhZGRDbGFzcyIsImNsaWNrIiwicGFyZW50cyIsInN1Yk1lbnUiLCJzbGlkZVVwIiwic2xpZGVEb3duIiwibW91c2VlbnRlciIsImlubmVyV2lkdGgiLCJvZmZzZXQiLCJsZWZ0IiwiY3NzIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJwb3NpdGlvbiIsImNsZWFyVGltZW91dCIsImRhdGEiLCJzZXRUaW1lb3V0IiwidGV4dCIsIm5hbWUiLCJhdHRyIiwic3JjIiwiaHJlZiIsInByaWNlIiwib25TYWxlIiwib2xkUHJpY2UiLCJfaW5pdCIsIl9sYXN0UG9zIiwiX3NlbGYiLCJfbWVudSIsIl9hY3Rpb24iLCJfaGVhZGVyIiwiX2hpZGRlbkJsb2NrTWVudSIsIl9oZWFkZXJIZWlnaHQiLCJpbm5lckhlaWdodCIsIl9zaG93QnRuIiwiX2Nsb3NlQnRuIiwiX3NlYXJjaCIsIl9vcGVuU2VhcmNoIiwiX2Nsb3NlU2VhcmNoIiwiX2dldEZyZWUiLCJfb3Blbk1lbnUiLCJfY2xvc2VNZW51IiwiX29wZW5TZWFyY2hCb3giLCJfY2xvc2VTZWFyY2hCb3giLCJzY3JvbGwiLCJfZml4ZWRIZWFkZXIiLCJzY3JvbGxUb3AiLCJET01Nb3VzZVNjcm9sbCIsImUiLCJkZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJkZXRhaWwiLCJkaXJlY3Rpb24iLCJfY2hlY2tTY3JvbGwiLCJtb3VzZXdoZWVsIiwid2hlZWxEZWx0YSIsInRvdWNobW92ZSIsImN1cnJlbnRQb3MiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImtleWRvd24iLCJ3aGljaCIsImVsZW0iLCJQcm9kdWN0U2xpZGVyIiwiRmVhdHVyZWRQcm9kdWN0c1NsaWRlciIsIl9zbGlkZXIiLCJfZ2FsbGVyeVRodW1icyIsIl9jb25zdHJ1Y3RvciIsIl9pbml0U2xpZGVyIiwiU3dpcGVyIiwic2xpZGVzUGVyVmlldyIsImxvb3AiLCJsb29wZWRTbGlkZXMiLCJsZW5ndGgiLCJjZW50ZXJlZFNsaWRlcyIsInNwYWNlQmV0d2VlbiIsInRvdWNoUmF0aW8iLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwiYnJlYWtwb2ludHMiLCI0MTUiLCIxNDQwIiwicGFyYW1zIiwiY29udHJvbCIsIl9mbGFnIiwibG9hZCIsIl9kZXN0cm95IiwiZGVzdHJveSIsInBhZ2luYXRpb24iLCJwYWdpbmF0aW9uQ2xpY2thYmxlIiwic3BlZWQiLCJhdXRvcGxheSIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJuZXh0QnV0dG9uIiwicHJldkJ1dHRvbiIsIldlYnN0ZXJzU2VsZWN0Iiwib3B0aW9uVHlwZSIsInNob3dUeXBlIiwiX3BvcHVwIiwiX3Njcm9sbCIsIl9vcHRpb25UeXBlIiwiX3Nob3dUeXBlIiwiX3Zpc2libGUiLCJ2aXNpYmxlIiwiX2RldmljZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfdGV4dCIsIl93cmFwIiwiX2JvZHkiLCJfb3BlbmVkIiwiX2FkZFdyYXAiLCJjdXJUZXh0Iiwib3BhY2l0eSIsIndyYXAiLCJhcHBlbmQiLCJiZWZvcmUiLCJlcSIsIl9oaWRlUG9wdXAiLCJzdG9wIiwicmVtb3ZlIiwiZmFkZU91dCIsImRpc3BsYXkiLCJfc2VsZWN0Vmlld1R5cGUiLCJfb25FdmVudHMiLCJzdG9wUHJvcGFnYXRpb24iLCJfc2hvd1BvcHVwIiwiX3NldE1vYmlsZVZpZXciLCJfc2V0Q3VzdG9tMSIsInNlbGVjdHMiLCJsaXN0IiwibWF4SGVpZ2h0IiwiY3VySW5kZXgiLCJpbmRleCIsImlkIiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwiY2hlY2tPcGVuZWQiLCJjbG9zZSIsImkiLCJvdXRlcldpZHRoIiwidG9wIiwib3V0ZXJIZWlnaHQiLCJoZWlnaHQiLCJwZXJmZWN0U2Nyb2xsYmFyIiwiYW5pbWF0ZSIsInZhbCIsInRyaWdnZXIiLCJGaWx0ZXJzIiwiX3BhdGgiLCJfcmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiX2J0biIsIl9idG4yIiwiX2ZpbHRlcnMiLCJfZm9ybSIsIl9jbG9zZUZpbHRlcnMiLCJfZmlsdGVySXRlbSIsIl9maWx0ZXJlZCIsIl9maWx0ZXJlZExpc3QiLCJfY291bnRGaWx0ZXJlZCIsIl90aXRsZSIsIl90aXRsZUlubmVyIiwiX2NsZWFyRmlsdGVycyIsIl9nbG9iYWxDaGVja0ZsYWciLCJfbG9hZGluZyIsIm5leHRGaWx0ZXJzIiwibmV4dCIsIm1pbi1oZWlnaHQiLCJfY2xvc2VGaWx0ZXIiLCJfY2xlYXJGaWx0ZXIiLCJjaGFuZ2UiLCJjdXJJdGVtTmFtZSIsImxhYmVsIiwibGFiZWxUZXh0IiwicHJvcCIsIl9hZGRMb2FkaW5nIiwiX3JlcXVlc3RDb250ZW50IiwiX2Nsb3NlTG9hZGluZyIsImh0bWwiLCJ6LWluZGV4IiwiX2FkZGluZ0ZpbHRlcmVkQnkiLCJpdGVtVGV4dCIsIml0ZW1OYW1lIiwiX3Bhc3RlTmV3UHJvZHVjdHMiLCJuZXdEYXRhIiwicHJvZHVjdHMiLCJwcm9kdWN0c1dyYXAiLCJwcm9kdWN0IiwidW5kZWZpbmVkIiwiZmVhdHVyZWQiLCJwaWN0dXJlIiwidGl0bGUiLCJyYXRlIiwic3RhcnNDb3VudCIsInVybFJldmlld3MiLCJyZXZpZXdzQ291bnQiLCJjb250ZW50IiwiZGVzY3JpcHRpb24iLCJzcGVjaWZpY2F0aW9uIiwiaGVhZCIsInVybERldGFpbHMiLCJjbGVhciIsImFib3J0IiwiYWpheCIsInVybCIsInZhbHVlIiwic2VyaWFsaXplIiwiZGF0YVR5cGUiLCJ0eXBlIiwic3VjY2VzcyIsIm0iLCJlcnJvciIsInN0YXR1c1RleHQiLCJhbGVydCIsIlNlYXJjaCIsIl9pbnB1dCIsInN1Z2dlc3RTZWxlY3RlZCIsImNvdW50SXRlbXMiLCJ2YWx1ZUlucHV0IiwiX3Jlc3VsdCIsImtleXVwIiwiSSIsImtleUNvZGUiLCJmaWx0ZXIiLCJzdWJtaXQiLCJfYWpheFJlcXVlc3QiLCJsb2NhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiX2tleUFjdGl2YXRlIiwiZG9jdW1lbnQiLCJldmVudCIsImNhbmNlbEJ1YmJsZSIsIm4iLCJfYWRkRGF0YSIsImNhdGVnb3JpZXMiLCJjYXRlZ29yaWVzQXZhaWxhYmlsaXR5IiwiYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyIiwicHJvZHVjdHNDYXRlZ29yaWVzQXJyIiwiZmxhZyIsImFsdCIsInB1c2giLCJtYWluQ2F0ZWdvcnkiLCJ1cmxNYWluQ2F0ZWdvcnkiLCJzdWJjYXRlZ29yaWVzIiwidXJsU3ViY2F0ZWdvcmllcyIsInJlc3VsdFN0ciIsInN1YmNhdGVnb3JpZXNXcmFwIiwidXJsQ2F0ZWdvcnkiLCJqIiwieiIsImluZGV4T2YiLCJjb25zb2xlIiwibG9nIiwiY291bnQiLCJpbnB1dCIsIm1zZyJdLCJtYXBwaW5ncyI6IkNBQUEsV0FFSUEsRUFBRSxXQUVFQSxFQUFFLGVBQWVDLEtBQUssV0FFbEIsR0FBSUMsR0FBU0YsRUFBRUcsT0FDZixHQUFJQyxHQUFNSixFQUFFRyxVQU1wQixJQUFJRCxHQUFVLFNBQVVHLEdBR3BCLEdBQUlDLEdBQU9ELEVBQ1BFLEVBQVNELEVBQUtFLEtBQUssb0JBQ25CQyxFQUFTSCxFQUFLRSxLQUFLLG9CQUNuQkUsRUFBVVYsRUFBRVcsUUFDWkMsRUFBVSxLQUNWQyxFQUFpQkgsRUFBUUksUUFJekJDLEVBQWEsV0FFVEwsRUFBUU0sSUFDSkMsT0FBUSxXQUVBSixFQUFpQkgsRUFBUUksVUFF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RUFBVXNCLElBR2Q1QyxNQUFPLFNBQVU3RCxHQUNvQixTQUE3QkEsRUFBZThELFlBQ2ZDLE1BQU0sYUFLWCxHQUVYOUwsRUFBUSxXQUNKakMsSUFPUmlDIiwiZmlsZSI6ImNhdGVnb3J5Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiggZnVuY3Rpb24oKXtcblxuICAgICQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQoJy5zaXRlX19tZW51JykuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIG5ldyBTdWJNZW51KCAkKHRoaXMpICk7XG4gICAgICAgICAgICBuZXcgTWVudSggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBTdWJNZW51ID0gZnVuY3Rpb24gKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2l0ZW1zID0gX29iai5maW5kKCcuc2l0ZV9fbWVudS1pdGVtJyksXG4gICAgICAgICAgICBfYXJyb3cgPSBfb2JqLmZpbmQoJy5zaXRlX19tZW51LWljb24nKSxcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbCxcbiAgICAgICAgICAgIF9zdGFydFdpbldpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG5cbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3N0YXJ0V2luV2lkdGggPiBfd2luZG93LndpZHRoKCkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RhcnRXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF93aW5kb3cuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsICcuc2l0ZV9fbWVudS1pY29uJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGpRdWVyeSh3aW5kb3cpLndpZHRoKCkgPCAxMDAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGpRdWVyeSh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgnbGknKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX2Fycm93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0galF1ZXJ5KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50cygnbGknKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51ID0gcGFyZW50LmZpbmQoJy5zaXRlX19tZW51LXN1YicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTAyNCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmVudC5oYXNDbGFzcygnb3BlbmVkJykgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5zbGlkZVVwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuc2xpZGVEb3duKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfaXRlbXMub24oIHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoJ3VsJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5oYXNDbGFzcygnc2l0ZV9fbWVudS1pdGVtX3N1YicpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoJ29wZW5lZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJNZW51ID0gY3VySXRlbS5maW5kKCcuc2l0ZV9fbWVudS1zdWInKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggKCBfd2luZG93LndpZHRoKCkgLSAoIHN1Yk1lbnUuaW5uZXJXaWR0aCgpICsgY3VySXRlbS5vZmZzZXQoKS5sZWZ0ICkgKSA8IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAoICggY3VySXRlbS5vZmZzZXQoKS5sZWZ0ICsgY3VySXRlbS5pbm5lcldpZHRoKCkgKSAtIHN1Yk1lbnUuaW5uZXJXaWR0aCgpICkgPCAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKC01MCUpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKC01MCUpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGN1ckl0ZW0ucG9zaXRpb24oKS5sZWZ0IC0gc3ViTWVudS5pbm5lcldpZHRoKCkgKyBjdXJJdGVtLmlubmVyV2lkdGgoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51LmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGN1ckl0ZW0ucG9zaXRpb24oKS5sZWZ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAkKCdbZGF0YS1wcm9kdWN0XScpLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fbG9hZGluZycpLmFkZENsYXNzKCd2aXNpYmxlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGN1ckl0ZW0uZGF0YSgncHJvZHVjdCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiggJCgnLmZlYXR1cmVkLXByb2R1Y3RfX2xvYWRpbmcnKS5oYXNDbGFzcygndmlzaWJsZScpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X190aXRsZScpLnRleHQoZGF0YS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcGljIGltZycpLmF0dHIoJ3NyYycsIGRhdGEuc3JjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuYnRuJykuYXR0cignaHJlZicsIGRhdGEuaHJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3ByaWNlIHNwYW4nKS50ZXh0KGRhdGEucHJpY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggZGF0YS5vblNhbGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19yZW1hcmsnKS5hZGRDbGFzcygndmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3JlbWFyaycpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkYXRhLm9sZFByaWNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2UgZGVsJykudGV4dChkYXRhLm9sZFByaWNlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2UgZGVsJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDE2MCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmZlYXR1cmVkLXByb2R1Y3RfX2xvYWRpbmcnKS5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9vYmoub24oICdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgX29iai5maW5kKCd1bCcpLm9uKCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5vcGVuZWQnKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9vYmouZmluZCgnbGknKS5vbiggJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX21lbnUgPSBvYmosXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2FjdGlvbiA9IGZhbHNlLFxuICAgICAgICAgICAgX2xhc3RQb3MsXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxuICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudSA9ICQoJy5zaXRlX19oaWRkZW4taXRlbXMnKSxcbiAgICAgICAgICAgIF9oZWFkZXJIZWlnaHQgPSBfaGVhZGVyLmlubmVySGVpZ2h0KCksXG4gICAgICAgICAgICBfc2hvd0J0biA9ICQoJy5zaXRlX19oZWFkZXItYnRuJyksXG4gICAgICAgICAgICBfY2xvc2VCdG4gPSAkKCcuc2l0ZV9faGlkZGVuLWNsb3NlJyksXG4gICAgICAgICAgICBfc2VhcmNoID0gJCgnLnNlYXJjaCcpLFxuICAgICAgICAgICAgX29wZW5TZWFyY2ggPSAkKCcuc2VhcmNoLWJ0bicpLFxuICAgICAgICAgICAgX2Nsb3NlU2VhcmNoID0gJCgnLnNlYXJjaF9fY2FuY2VsJyksXG4gICAgICAgICAgICBfZ2V0RnJlZSA9ICQoJy5zaXRlX19oaWRkZW4tYnRuJyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfc2hvd0J0bi5vbih7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSgkKHRoaXMpKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX2Nsb3NlQnRuLm9uKHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTWVudSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9vcGVuU2VhcmNoLm9uKHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX29wZW5TZWFyY2hCb3goJCh0aGlzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoLm9uKHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9maXhlZEhlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2FjdGlvbiA9IF93aW5kb3cuc2Nyb2xsVG9wKCkgPj0gX2hlYWRlckhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBET01Nb3VzZVNjcm9sbDogZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LmRldGFpbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IChkZWx0YSA+IDApID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKGRpcmVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtb3VzZXdoZWVsOiBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBlLm9yaWdpbmFsRXZlbnQud2hlZWxEZWx0YTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbHRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IChkZWx0YSA+IDApID8gLTEgOiAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKGRpcmVjdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9zID0gZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3MgPiBfbGFzdFBvcykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKC0xKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPCBfbGFzdFBvcykge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sYXN0UG9zID0gY3VycmVudFBvcztcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzQgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzYgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2NoZWNrU2Nyb2xsID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA+IDAgJiYgIV9oZWFkZXIuaGFzQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKSAmJiAhX3Nob3dCdG4uaGFzQ2xhc3MoJ29wZW5lZCcpICYmIF9hY3Rpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLmFkZENsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uIDwgMCAmJiBfaGVhZGVyLmhhc0NsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJykgJiYgIV9zaG93QnRuLmhhc0NsYXNzKCdvcGVuZWQnKSAmJiBfYWN0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5yZW1vdmVDbGFzcygnc2l0ZV9faGVhZGVyX2hpZGRlbicpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2ZpeGVkSGVhZGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKF93aW5kb3cuc2Nyb2xsVG9wKCkgPiBfaGVhZGVySGVpZ2h0ICsgMTUwICApIHtcblxuICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLmFkZENsYXNzKCdmaXhlZCcpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIucmVtb3ZlQ2xhc3MoJ2ZpeGVkJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbiAoZWxlbSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSBlbGVtO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1ckl0ZW0uaGFzQ2xhc3MoJ29wZW5lZCcpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIF9oaWRkZW5CbG9ja01lbnUucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudS5hZGRDbGFzcygnb3BlbmVkJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3BlblNlYXJjaEJveCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGVsZW07XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VySXRlbS5oYXNDbGFzcygnb3BlbmVkJykpIHtcblxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgX3NlYXJjaC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIF9nZXRGcmVlLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIF9zZWFyY2guYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICBfZ2V0RnJlZS5hZGRDbGFzcygnaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xvc2VNZW51ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3Nob3dCdG4ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgIF9oaWRkZW5CbG9ja01lbnUucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Nsb3NlU2VhcmNoQm94ID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX29wZW5TZWFyY2gucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgIF9zZWFyY2gucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgIF9nZXRGcmVlLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9tZW51WzBdLm9iaiA9IF9zZWxmO1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59ICkoKTsiLCJcInVzZSBzdHJpY3RcIjtcbiggZnVuY3Rpb24oKSB7XG5cbiAgICAkKCBmdW5jdGlvbigpIHtcblxuICAgICAgICAkLmVhY2goICQoICcucHJvZHVjdF9fc2xpZGVyJyApLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgbmV3IFByb2R1Y3RTbGlkZXIgKCAkKCB0aGlzICkgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJC5lYWNoKCAkKCAnLmZlYXR1cmVkLXByb2R1Y3RzJyApLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgbmV3IEZlYXR1cmVkUHJvZHVjdHNTbGlkZXIgKCAkKCB0aGlzICkgKTtcblxuICAgICAgICB9ICk7XG4gICAgfSk7XG5cbiAgICB2YXIgUHJvZHVjdFNsaWRlciA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcbiAgICAgICAgICAgIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfc2xpZGVyLFxuICAgICAgICAgICAgX2dhbGxlcnlUaHVtYnM7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfaW5pdFNsaWRlcigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0U2xpZGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3NsaWRlciA9IG5ldyBTd2lwZXIoIF9vYmouZmluZCgnLmdhbGxlcnktdG9wJykgLCB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICcxJyxcbiAgICAgICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbG9vcGVkU2xpZGVzOiBfb2JqLmZpbmQoJy5nYWxsZXJ5LXRvcCAuc3dpcGVyLXNsaWRlJykubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAvL2F1dG9wbGF5OiA0MDAwLFxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMzBcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfZ2FsbGVyeVRodW1icyA9IG5ldyBTd2lwZXIoIF9vYmouZmluZCgnLmdhbGxlcnktdGh1bWJzJyksIHtcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAvL2F1dG9wbGF5OiA0MDAwLFxuICAgICAgICAgICAgICAgICAgICBsb29wZWRTbGlkZXM6IF9vYmouZmluZCgnLmdhbGxlcnktdGh1bWJzIC5zd2lwZXItc2xpZGUnKS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICc0JyxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hSYXRpbzogMC4yLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgNDE1OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJzMnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgMTQ0MDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICczJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfc2xpZGVyLnBhcmFtcy5jb250cm9sID0gX2dhbGxlcnlUaHVtYnM7XG4gICAgICAgICAgICAgICAgX2dhbGxlcnlUaHVtYnMucGFyYW1zLmNvbnRyb2wgPSBfc2xpZGVyO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBfY29uc3RydWN0b3IoKTtcbiAgICB9O1xuICAgIHZhciBGZWF0dXJlZFByb2R1Y3RzU2xpZGVyID0gZnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9zbGlkZXIsXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxuICAgICAgICAgICAgX2ZsYWc7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgLy9faW5pdFNsaWRlcigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8PSA3NjggKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX2ZsYWcgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbGFnID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPD0gNzY4ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9fZmxhZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFfZmxhZyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2ZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vX2ZsYWcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9mbGFnICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5pdFNsaWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9zbGlkZXIuZGVzdHJveSh0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0U2xpZGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgX3NsaWRlciA9IG5ldyBTd2lwZXIoIF9vYmouZmluZCggJy5zd2lwZXItY29udGFpbmVyJyApLCB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IF9vYmouZmluZCgnLnN3aXBlci1wYWdpbmF0aW9uJyksXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDUsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25DbGlja2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNwZWVkOiA2MDAsXG4gICAgICAgICAgICAgICAgICAgIC8vbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IDUwMDAsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLW5leHQnKSxcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX29iai5maW5kKCcuc3dpcGVyLWJ1dHRvbi1wcmV2JyksXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAxNDQwOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogNFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBfY29uc3RydWN0b3IoKTtcbiAgICB9O1xuXG59ICkoKTtcbiIsIiggZnVuY3Rpb24oKXtcblxuICAgICQoIGZ1bmN0aW9uKCl7XG4gICAgICAgICQoICdzZWxlY3QnICkuZWFjaCggZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIG5ldyBXZWJzdGVyc1NlbGVjdCgge1xuICAgICAgICAgICAgICAgIG9iajogJCggdGhpcyApLFxuICAgICAgICAgICAgICAgIG9wdGlvblR5cGU6IDEsXG4gICAgICAgICAgICAgICAgc2hvd1R5cGU6IDJcbiAgICAgICAgICAgIH0gKTtcbiAgICAgICAgfSApO1xuICAgIH0gKTtcblxuICAgIHZhciBXZWJzdGVyc1NlbGVjdCA9IGZ1bmN0aW9uKCBwYXJhbXMgKXtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxuICAgICAgICAgICAgX29iaiA9IHBhcmFtcy5vYmosXG4gICAgICAgICAgICBfb3B0aW9uVHlwZSA9IHBhcmFtcy5vcHRpb25UeXBlIHx8IDAsXG4gICAgICAgICAgICBfc2hvd1R5cGUgPSBwYXJhbXMuc2hvd1R5cGUgfHwgMCxcbiAgICAgICAgICAgIF92aXNpYmxlID0gcGFyYW1zLnZpc2libGUgfHwgNSxcbiAgICAgICAgICAgIF9kZXZpY2UgPSAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQgKSxcbiAgICAgICAgICAgIF90ZXh0ID0gJCggJzxzcGFuIGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0X19pdGVtXCI+PC9zcGFuPicgKSxcbiAgICAgICAgICAgIF93cmFwID0gJCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RcIj48L2Rpdj4nICksXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXG4gICAgICAgICAgICBfYm9keSA9ICQoICdib2R5JyApLFxuICAgICAgICAgICAgX29wZW5lZCA9IGZhbHNlLFxuICAgICAgICAgICAgX3BvcHVwLCBfc2Nyb2xsO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfYWRkV3JhcCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdmFyIGN1clRleHQgPSAnJztcblxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLndyYXAoIF93cmFwICk7XG4gICAgICAgICAgICAgICAgX3dyYXAgPSBfb2JqLnBhcmVudCgpO1xuICAgICAgICAgICAgICAgIF93cmFwLmFwcGVuZCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX2Fycm93XCI+PC9kaXY+JyApO1xuICAgICAgICAgICAgICAgIF9vYmouYmVmb3JlKCBfdGV4dCApO1xuICAgICAgICAgICAgICAgIF9vYmouZmluZCggJ29wdGlvbicgKS5lYWNoKCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5hdHRyKCAnc2VsZWN0ZWQnICkgPT0gJ3NlbGVjdGVkJyApe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9IGN1ckl0ZW0udGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgaWYoIGN1clRleHQgPT0gJycgKXtcbiAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9ICBfb2JqLmZpbmQoICdvcHRpb24nKS5lcSggMCApLnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RleHQudGV4dCggY3VyVGV4dCApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9oaWRlUG9wdXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9vcGVuZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGlmKCAhX3Nob3dUeXBlICl7XG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMSApe1xuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc3RvcCggdHJ1ZSwgZmFsc2UgKS5zbGlkZVVwKCAzMDAsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAyICkge1xuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc3RvcCggdHJ1ZSwgZmFsc2UgKS5mYWRlT3V0KCAzMDAsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfd3JhcC5yZW1vdmVDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9vcGVuZWQnICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcblxuICAgICAgICAgICAgICAgIF9hZGRXcmFwKCk7XG4gICAgICAgICAgICAgICAgX3NlbGVjdFZpZXdUeXBlKCk7XG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCAnY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF90ZXh0LnRleHQoICQoIHRoaXMgKS5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLnRleHQoKSApO1xuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIGlmKCBfb3B0aW9uVHlwZSA9PSAxICYmICFfZGV2aWNlICl7XG4gICAgICAgICAgICAgICAgICAgIF93cmFwLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbiggZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Nob3dQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zZWxlY3RWaWV3VHlwZSA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICBpZiggIV9vcHRpb25UeXBlIHx8IF9kZXZpY2UgKXtcbiAgICAgICAgICAgICAgICAgICAgX3NldE1vYmlsZVZpZXcoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9vcHRpb25UeXBlID09IDEgKXtcbiAgICAgICAgICAgICAgICAgICAgX3NldEN1c3RvbTEoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3NldEN1c3RvbTEgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X2N1c3RvbScgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc2V0TW9iaWxlVmlldyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3RfbW9iaWxlJyApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9zaG93UG9wdXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RzID0gJCggJ3NlbGVjdCcgKSxcbiAgICAgICAgICAgICAgICAgICAgbGlzdCA9ICQoICc8dWw+PC91bD4nKSxcbiAgICAgICAgICAgICAgICAgICAgY3VyU2Nyb2xsID0gX3dpbmRvdy5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gX3dyYXAub2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGN1ckluZGV4ID0gX29iai5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLmluZGV4KCksXG4gICAgICAgICAgICAgICAgICAgIGlkID0gTWF0aC5yb3VuZCggTWF0aC5yYW5kb20oKSAqIDEwMDAgKTtcblxuICAgICAgICAgICAgICAgIHNlbGVjdHMuZWFjaCggZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXMgIT09IF9vYmpbIDAgXSAmJiB0aGlzLm9iai5jaGVja09wZW5lZCgpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iai5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfb3BlbmVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIF9wb3B1cCA9ICQoICc8ZGl2IGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0X19wb3B1cFwiIGlkPVwid2Vic3RlcnMtc2VsZWN0X19wb3B1cCcgKyBpZCArICdcIj48L2Rpdj4nICk7XG5cbiAgICAgICAgICAgICAgICBfb2JqLmZpbmQoICdvcHRpb24nICkuZWFjaCggZnVuY3Rpb24oIGkgKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKCB0aGlzICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gY3VySW5kZXggKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kKCAnPGxpIGNsYXNzPVwiYWN0aXZlXCI+JyArIGN1ckl0ZW0udGV4dCgpICsgJzwvbGk+JyApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmQoICc8bGk+JyArIGN1ckl0ZW0udGV4dCgpICsgJzwvbGk+JyApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBfcG9wdXAuYXBwZW5kKCBsaXN0ICk7XG4gICAgICAgICAgICAgICAgX2JvZHkuYXBwZW5kKCBfcG9wdXAgKTtcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9vcGVuZWQnICk7XG5cbiAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBfd3JhcC5vdXRlcldpZHRoKCksXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IG9mZnNldC50b3AgKyBfd3JhcC5vdXRlckhlaWdodCgpXG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gX3BvcHVwLm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgaWYoIG1heEhlaWdodCA+IF9wb3B1cC5maW5kKCAnbGknICkuZXEoIDAgKS5vdXRlckhlaWdodCgpICogX3Zpc2libGUgKXtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmhlaWdodCggX3BvcHVwLmZpbmQoICdsaScgKS5lcSggMCApLm91dGVySGVpZ2h0KCkgKiBfdmlzaWJsZSApO1xuICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsID0gX3BvcHVwLnBlcmZlY3RTY3JvbGxiYXIoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiggX3Nob3dUeXBlID09IDEgKXtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnNsaWRlRG93biggMzAwICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMiApIHtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmFuaW1hdGUoIHsgb3BhY2l0eTogMSB9LCAzMDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9wb3B1cC5maW5kKCAnbGknICkub24oIHtcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oIGUgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICQoIHRoaXMgKS5pbmRleCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnZhbCggX29iai5maW5kKCAnb3B0aW9uJyApLmVxKCBpbmRleCApLmF0dHIoICd2YWx1ZScgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX29iai50cmlnZ2VyKCAnY2hhbmdlJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG4gICAgICAgIF9zZWxmLmNoZWNrT3BlbmVkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiBfb3BlbmVkO1xuICAgICAgICB9O1xuICAgICAgICBfc2VsZi5jbG9zZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgX2hpZGVQb3B1cCgpO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XG5cbiAgICB9O1xuXG59ICkoKTsiLCIoIGZ1bmN0aW9uKCl7XG5cbiAgICAkKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAkKCcuY2F0ZWdvcnknKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IEZpbHRlcnMoICQodGhpcykgKTtcblxuICAgICAgICB9ICk7XG5cbiAgICB9ICk7XG5cbiAgICB2YXIgRmlsdGVycyA9IGZ1bmN0aW9uIChvYmopIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9wYXRoID0gJCgnYm9keScpLmRhdGEoJ2FjdGlvbicpLFxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgICAgIF9idG4gPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVycy1pdGVtIHNwYW4nKSxcbiAgICAgICAgICAgIF9idG4yID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtdGl0bGUnKSxcbiAgICAgICAgICAgIF9maWx0ZXJzID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtaXRlbXMnKSxcbiAgICAgICAgICAgIF9mb3JtID0gX2ZpbHRlcnMuZmluZCgnZm9ybScpLFxuICAgICAgICAgICAgX2Nsb3NlRmlsdGVycyA9IF9vYmouZmluZCgnLmNhdGVnb3J5X19maWx0ZXJlZC1jbG9zZScpLFxuICAgICAgICAgICAgX2ZpbHRlckl0ZW0gPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVycy1saXN0JyksXG4gICAgICAgICAgICBfZmlsdGVyZWQgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQnKSxcbiAgICAgICAgICAgIF9maWx0ZXJlZExpc3QgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQtbGlzdCcpLFxuICAgICAgICAgICAgX2NvdW50RmlsdGVyZWQgPSAwLFxuICAgICAgICAgICAgX3RpdGxlID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtdGl0bGUnKSxcbiAgICAgICAgICAgIF90aXRsZUlubmVyID0gX29iai5maW5kKCcuY2F0ZWdvcnlfX2ZpbHRlcnMtdGl0bGUtaW5uZXInKSxcbiAgICAgICAgICAgIF9jbGVhckZpbHRlcnMgPSBfb2JqLmZpbmQoJy5jYXRlZ29yeV9fZmlsdGVyZWQgLmJ0biwgLmNhdGVnb3J5X19maWx0ZXJzLWNsZWFyJyksXG4gICAgICAgICAgICBfZ2xvYmFsQ2hlY2tGbGFnID0gZmFsc2UsXG4gICAgICAgICAgICBfbG9hZGluZyA9ICQoJzxkaXYgY2xhc3M9XCJsb2FkaW5nXCI+PC9kaXY+JyksXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG5cbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9idG4uZWFjaCggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzID0gY3VySXRlbS5uZXh0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggcGFyZW50Lmhhc0NsYXNzKCdvcGVuZWQnKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0RmlsdGVycy5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaW4taGVpZ2h0JzogbmV4dEZpbHRlcnMuZmluZCgnPmRpdicpLmlubmVySGVpZ2h0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYnRuLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzID0gY3VySXRlbS5uZXh0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0RmlsdGVycy5jc3MoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pbi1oZWlnaHQnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYWRkQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWluLWhlaWdodCc6IG5leHRGaWx0ZXJzLmZpbmQoJz5kaXYnKS5pbm5lckhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRGaWx0ZXJzLmNzcygge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMTAgKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfYnRuMi5vbigge1xuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VGaWx0ZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgIF9jbGVhckZpbHRlcnMub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2NsZWFyRmlsdGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfY2xvc2VGaWx0ZXJzLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9jbG9zZUZpbHRlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICBfZmlsdGVySXRlbS5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VySXRlbU5hbWUgPSBjdXJJdGVtLmF0dHIoJ25hbWUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGN1ckl0ZW0ubmV4dCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsVGV4dCA9IGxhYmVsLnRleHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgX2dsb2JhbENoZWNrRmxhZyA9IGN1ckl0ZW0ucHJvcCgnY2hlY2tlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlRmlsdGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdENvbnRlbnQoIGxhYmVsVGV4dCwgY3VySXRlbU5hbWUsIGZhbHNlICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hZGRMb2FkaW5nID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBfbG9hZGluZyA9ICQoJzxkaXYgY2xhc3M9XCJsb2FkaW5nXCI+PC9kaXY+Jyk7XG5cbiAgICAgICAgICAgICAgICAkKCcuY2F0ZWdvcnlfX2lubmVyJykuYXBwZW5kKF9sb2FkaW5nKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jbG9zZUxvYWRpbmcgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfbG9hZGluZy5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgfSwgMzAwICk7XG5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvYWRpbmcucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSwgNjIwICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfY2xlYXJGaWx0ZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIF9maWx0ZXJlZC5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgX3RpdGxlLmZpbmQoJ3NwYW4nKS5odG1sKCcnKTtcbiAgICAgICAgICAgICAgICBfdGl0bGVJbm5lci5maW5kKCdzcGFuJykuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgX3RpdGxlLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIF9maWx0ZXJlZExpc3QuZmluZCgnbGknKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBfZmlsdGVySXRlbS5maW5kKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpLnByb3AoJ2NoZWNrZWQnLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBfYWRkTG9hZGluZygpO1xuICAgICAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCggbnVsbCwgbnVsbCwgdHJ1ZSApO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2Nsb3NlRmlsdGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggX2J0bjIuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9idG4yLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlcnMucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fY29udGVudCcpLmF0dHIoICdzdHlsZScsICcnICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIF9idG4yLmFkZENsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlcnMuYWRkQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fY29udGVudCcpLmNzcyggeyAnei1pbmRleCc6IDEwMCB9IClcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfYWRkaW5nRmlsdGVyZWRCeSA9IGZ1bmN0aW9uKCBpdGVtVGV4dCwgaXRlbU5hbWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggX2dsb2JhbENoZWNrRmxhZyApIHtcblxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVyZWRMaXN0LmFwcGVuZCgnPGxpIGRhdGEtbmFtZT1cIicrIGl0ZW1OYW1lICsnXCI+JysgaXRlbVRleHQgKycgPGEgaHJlZj1cIiNcIiBjbGFzcz1cImNhdGVnb3J5X19maWx0ZXJlZC1yZW1vdmVcIj48L2E+PC9saT4nKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2ZpbHRlcmVkTGlzdC5maW5kKCdsaVtkYXRhLW5hbWU9JyArIGl0ZW1OYW1lICsgJ10nKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfY291bnRGaWx0ZXJlZCA9IF9maWx0ZXJlZExpc3QuZmluZCgnbGknKS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiggX2NvdW50RmlsdGVyZWQgPiAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF9maWx0ZXJlZC5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aXRsZS5maW5kKCdzcGFuJykuaHRtbCgnKCcrIF9jb3VudEZpbHRlcmVkICsnKScpO1xuICAgICAgICAgICAgICAgICAgICBfdGl0bGVJbm5lci5maW5kKCdzcGFuJykuaHRtbCgnKCcrIF9jb3VudEZpbHRlcmVkICsnKScpO1xuICAgICAgICAgICAgICAgICAgICBfdGl0bGUuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIF9jbGVhckZpbHRlcnMucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBfZmlsdGVyZWQuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICBfdGl0bGUuZmluZCgnc3BhbicpLmh0bWwoJycpO1xuICAgICAgICAgICAgICAgICAgICBfdGl0bGVJbm5lci5maW5kKCdzcGFuJykuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aXRsZS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgX2NsZWFyRmlsdGVycy5hZGRDbGFzcygnaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfcGFzdGVOZXdQcm9kdWN0cyA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXG4gICAgICAgICAgICAgICAgdmFyIG5ld0RhdGEgPSBkYXRhLnByb2R1Y3RzO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb2R1Y3RzV3JhcCA9ICc8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlcIj4nO1xuXG4gICAgICAgICAgICAgICAgJC5lYWNoKCBuZXdEYXRhLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2l0ZW1cIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0LmZlYXR1cmVkICE9IHVuZGVmaW5lZCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9ICc8c3BhbiBjbGFzcz1cInNpdGVfX2ZlYXR1cmVkXCI+JysgcHJvZHVjdC5mZWF0dXJlZCArJzwvc3Bhbj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9faGVhZFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fcGljXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJysgcHJvZHVjdC5waWN0dXJlICsnKVwiPjwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X190aXRsZVwiPicrIHByb2R1Y3QudGl0bGUgKyc8L2gyPic7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3QucmF0ZSAhPSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPGRpdiBjbGFzcz1cInJhdGVcIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LnJhdGUuc3RhcnNDb3VudC0xOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxpbWcgc3JjPVwiaW1nL3N0YXIucG5nXCIgd2lkdGg9XCI2MFwiIGhlaWdodD1cIjUwXCIgYWx0PVwiXCI+Jm5ic3A7J1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGEgaHJlZj1cIicrIHByb2R1Y3QucmF0ZS51cmxSZXZpZXdzICsnXCIgY2xhc3M9XCJyYXRlX19yZXZpZXdzXCI+JysgcHJvZHVjdC5yYXRlLnJldmlld3NDb3VudCArJzwvYT5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2NvbnRlbnRcIj4nO1xuXG5cblxuICAgICAgICAgICAgICAgICAgICBpZiggcHJvZHVjdC5jb250ZW50LmRlc2NyaXB0aW9uICE9IHVuZGVmaW5lZCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fZGVzY3JpcHRpb25cIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LmNvbnRlbnQuZGVzY3JpcHRpb24ubGVuZ3RoLTE7IGkrKyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGxpPicrIHByb2R1Y3QuY29udGVudC5kZXNjcmlwdGlvbltpXSArJzwvbGk+J1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPC91bD5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzxkaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19pdGVtc1wiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19zcGVjaWZpY2F0aW9uXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19zcGVjaWZpY2F0aW9uLWhlYWRcIj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDw9IHByb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uLmhlYWQubGVuZ3RoLTE7IGkrKyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSc8ZGl2PicrIHByb2R1Y3QuY29udGVudC5zcGVjaWZpY2F0aW9uLmhlYWRbaV0gKyc8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9kdWN0cy1zdWJjYXRlZ29yeV9fc3BlY2lmaWNhdGlvbi1jb250ZW50XCI+JztcblxuICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5jb250ZW50Lmxlbmd0aC0xOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0nPGRpdj4nKyBwcm9kdWN0LmNvbnRlbnQuc3BlY2lmaWNhdGlvbi5jb250ZW50W2ldICsnPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNXcmFwICs9JzwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtc3ViY2F0ZWdvcnlfX2Zvb3RlclwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2R1Y3RzLXN1YmNhdGVnb3J5X19wcmljZVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZWw+JysgcHJvZHVjdC5vbGRQcmljZSArJzwvZGVsPiAnKyBwcm9kdWN0LnByaWNlICsnXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCInKyBwcm9kdWN0LnVybERldGFpbHMgKydcIiBjbGFzcz1cImJ0biBidG5fM1wiPnNlZSBkZXRhaWxzPC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcblxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPC9kaXY+JztcblxuICAgICAgICAgICAgICAgICQoJy5jYXRlZ29yeV9fd3JhcCcpLmh0bWwocHJvZHVjdHNXcmFwKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9yZXF1ZXN0Q29udGVudCA9IGZ1bmN0aW9uICggaXRlbVRleHQsIGl0ZW1OYW1lLCBjbGVhciApIHtcblxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgICAgICAgICAgX3JlcXVlc3QgPSAkLmFqYXgoIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBfcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF9mb3JtLnNlcmlhbGl6ZSgpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICggbSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFjbGVhciApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGRpbmdGaWx0ZXJlZEJ5KCBpdGVtVGV4dCwgaXRlbU5hbWUgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfcGFzdGVOZXdQcm9kdWN0cyggbSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2Nsb3NlTG9hZGluZygpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggWE1MSHR0cFJlcXVlc3Quc3RhdHVzVGV4dCAhPSBcImFib3J0XCIgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFUlJPUiEhIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xuXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcblxuICAgICAgICBfaW5pdCgpO1xuICAgIH07XG5cbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcblxuICAgICQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICQoJy5zZWFyY2gnKS5lYWNoKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgbmV3IFNlYXJjaCggJCh0aGlzKSApO1xuXG4gICAgICAgIH0gKTtcblxuICAgIH0gKTtcblxuICAgIHZhciBTZWFyY2ggPSBmdW5jdGlvbiAob2JqKSB7XG5cbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXG4gICAgICAgICAgICBfaW5wdXQgPSBfb2JqLmZpbmQoJ2lucHV0W3R5cGU9c2VhcmNoXScpLFxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgICAgIF9wYXRoID0gX29iai5kYXRhKCdwYXRoJyksXG4gICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwLFxuICAgICAgICAgICAgY291bnRJdGVtcyA9IDAsXG4gICAgICAgICAgICB2YWx1ZUlucHV0ID0gX2lucHV0LnZhbCgpLFxuICAgICAgICAgICAgX3Jlc3VsdCA9IF9vYmouZmluZCgnLnNlYXJjaF9fcmVzdWx0Jyk7XG5cbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcblxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIF9pbnB1dC5vbigge1xuICAgICAgICAgICAgICAgICAgICBrZXl1cDogZnVuY3Rpb24oSSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggJCh3aW5kb3cpLndpZHRoKCkgPj0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChJLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZmlsdGVyKCcuYWN0aXZlJykubGVuZ3RoID09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCdmb3JtJykuc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUlucHV0ID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB2YWx1ZUlucHV0Lmxlbmd0aCA+IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWpheFJlcXVlc3QoICQodGhpcyksIHZhbHVlSW5wdXQubGVuZ3RoKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQodGhpcykudmFsKCkgPT0gJycgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGtleWRvd246IGZ1bmN0aW9uKEkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQod2luZG93KS53aWR0aCgpID49IDEwMjQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goIEkua2V5Q29kZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZmlsdGVyKCcuYWN0aXZlJykubGVuZ3RoID09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBfb2JqLmRhdGEoJ2FjdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZmlsdGVyKCcuYWN0aXZlJykuZmluZCgnYScpLmF0dHIoJ2hyZWYnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGNvdW50SXRlbXMgPiAwICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2tleUFjdGl2YXRlKCBJLmtleUNvZGUgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzdWdnZXN0U2VsZWN0ZWQgPT0gY291bnRJdGVtcyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICQoJ2h0bWwnKS5jbGljayggZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XG5cbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICAgICAgXCJib2R5XCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBldmVudCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgICAgICAgICAgXCIuc2VhcmNoX19mb3VuZCBsaVwiLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUZXh0ID0gY3VySXRlbS5maW5kKCdhJykudGV4dCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKGN1clRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXG4gICAgICAgICAgICAgICAgICAgIFwia2V5ZG93blwiLFxuICAgICAgICAgICAgICAgICAgICBcIi5zZWFyY2hfX2ZvdW5kIGxpXCIsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKEkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKEkua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfa2V5QWN0aXZhdGUgPSBmdW5jdGlvbihuKSB7XG5cbiAgICAgICAgICAgICAgICAkKCcuc2VhcmNoX19mb3VuZCBsaScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIGlmKCBuID09IDQwICYmIHN1Z2dlc3RTZWxlY3RlZCA8IGNvdW50SXRlbXMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkKys7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuID09IDM4ICYmIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkLS07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLnNlYXJjaF9fZm91bmQgbGknKS5lcSggc3VnZ2VzdFNlbGVjdGVkIC0gMSApLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbCggJCgnLnNlYXJjaF9fZm91bmQgbGknKS5lcSggc3VnZ2VzdFNlbGVjdGVkIC0gMSApLmZpbmQoJ2EnKS50ZXh0KCkgKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbCggdmFsdWVJbnB1dCApO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9hZGREYXRhID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXMgPSBkYXRhLmNhdGVnb3JpZXMsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXNBdmFpbGFiaWxpdHkgPSBjYXRlZ29yaWVzLmxlbmd0aCAhPSAwLFxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0cyA9IGRhdGEucHJvZHVjdHMsXG4gICAgICAgICAgICAgICAgICAgIGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FyciA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0NhdGVnb3JpZXNBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgdXJsUHJvZHVjdHNDYXRlZ29yaWVzQXJyID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb2R1Y3RzV3JhcCA9ICc8ZGl2IGNsYXNzPVwidG9wLXByb2R1Y3RzX193cmFwXCI+JztcblxuICAgICAgICAgICAgICAgICQuZWFjaCggcHJvZHVjdHMsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0ID0gdGhpcztcblxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzxkaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1wcm9kdWN0c19faXRlbVwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9wLXByb2R1Y3RzX19waWNcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJysgcHJvZHVjdC5zcmMgKydcIiB3aWR0aD1cIjQxNFwiIGhlaWdodD1cIjQxNFwiIGFsdD1cIicrIHByb2R1Y3QuYWx0ICsnXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRvcC1wcm9kdWN0c19fcHJpY2VcIj48ZGVsPicrIHByb2R1Y3Qub2xkUHJpY2UgKyc8L2RlbD4gJysgcHJvZHVjdC5wcmljZSArJzwvc3Bhbj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidG9wLXByb2R1Y3RzX19pdGVtLXRpdGxlXCI+JysgcHJvZHVjdC5uYW1lICsnPC9oMz5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIicrIHByb2R1Y3QuaHJlZiArJ1wiIGNsYXNzPVwidG9wLXByb2R1Y3RzX19idG5cIj52aWV3PC9hPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgaWYoICFjYXRlZ29yaWVzQXZhaWxhYmlsaXR5ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIucHVzaCggW3Byb2R1Y3QuY2F0ZWdvcmllcy5tYWluQ2F0ZWdvcnksIHByb2R1Y3QuY2F0ZWdvcmllcy51cmxNYWluQ2F0ZWdvcnksIHByb2R1Y3QuY2F0ZWdvcmllcy5zdWJjYXRlZ29yaWVzLCBwcm9kdWN0LmNhdGVnb3JpZXMudXJsU3ViY2F0ZWdvcmllc10gKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJ2RpdicpLmVxKDEpLmZpbmQoJy50b3AtcHJvZHVjdHMnKS5odG1sKHByb2R1Y3RzV3JhcCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0U3RyID0gJzx1bCBjbGFzcz1cInNlYXJjaF9fZm91bmRcIj4nO1xuXG4gICAgICAgICAgICAgICAgaWYoIGNhdGVnb3JpZXNBdmFpbGFiaWxpdHkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCBjYXRlZ29yaWVzLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YmNhdGVnb3JpZXMgPSB0aGlzLnN1YmNhdGVnb3JpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsU3ViY2F0ZWdvcmllcyA9IHRoaXMudXJsU3ViY2F0ZWdvcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggc3ViY2F0ZWdvcmllcyAhPSB1bmRlZmluZWQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBzdWJjYXRlZ29yaWVzLmxlbmd0aC0xOyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJzxsaSBjbGFzcz1cInNlYXJjaF9fZm91bmQtc3ViXCI+PGEgaHJlZj1cIicrIHVybFN1YmNhdGVnb3JpZXNbaV0gKydcIj4nICsgc3ViY2F0ZWdvcmllc1tpXSArICc8L2E+PC9saT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwICs9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0ciArPSAnPGxpPjxhIGhyZWY9XCInKyB0aGlzLnVybENhdGVnb3J5ICsnXCI+JysgdGhpcy5uYW1lICsnPC9hPjwvbGk+Jysgc3ViY2F0ZWdvcmllc1dyYXAgKycnO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDw9IGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMTsgaSsrICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggZmxhZyApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5wdXNoKGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggcHJvZHVjdHNDYXRlZ29yaWVzQXJyW3Byb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMV1bMF0gIT0gYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzBdICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyLnB1c2goYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMDsgaiA8PSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0ubGVuZ3RoLTE7IGorKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgeiA9IDA7IHogPD0gYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdLmxlbmd0aC0xOyB6KysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xXVsyXS5pbmRleE9mKCBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl1bel0pID09IC0xICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW3Byb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMV1bMl0ucHVzaCggYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdW3pdIClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9kdWN0c0NhdGVnb3JpZXNBcnIpXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xOyBpKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMDsgaiA8PSBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0ubGVuZ3RoLTE7IGorKyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJjYXRlZ29yaWVzV3JhcCA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgeiA9IDA7IHogPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdLmxlbmd0aC0xOyB6KysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJzxsaSBjbGFzcz1cInNlYXJjaF9fZm91bmQtc3ViXCI+PGEgaHJlZj1cIicgKyBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bM11bel0gKyAnXCI+JyArIHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXVt6XSArICc8L2E+PC9saT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwICs9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0ciArPSAnPGxpPjxhIGhyZWY9XCInICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzFdICsgJ1wiPicgKyBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMF0gKyAnPC9hPjwvbGk+Jysgc3ViY2F0ZWdvcmllc1dyYXAgKycnO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJlc3VsdFN0ciArPSAnPC91bD4nO1xuXG4gICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCdkaXY6Zmlyc3QnKS5odG1sKHJlc3VsdFN0cik7XG5cbiAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kJykuZmluZCgnbGk6bm90KDpsdCgxMSkpJykucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICBjb3VudEl0ZW1zID0gX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCcpLmZpbmQoJ2xpJykubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgX3Jlc3VsdC5hZGRDbGFzcygndmlzaWJsZScpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FqYXhSZXF1ZXN0ID0gIGZ1bmN0aW9uKCBpbnB1dCwgbiApIHtcblxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgICAgICAgICAgX3JlcXVlc3QgPSAkLmFqYXgoIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBfcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlucHV0LnZhbCgpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICggbXNnICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWRkRGF0YSggbXNnICk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxufSApKCk7Il19
