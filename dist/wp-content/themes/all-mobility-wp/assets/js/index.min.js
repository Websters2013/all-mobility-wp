!function(){var e=!0;$(function(){$(".site__menu").each(function(){new n($(this)),new t($(this))}),$(".not-found").each(function(){new i($(this))}),$(".confirmation").each(function(){new i($(this))}),$("#wpsl-stores").each(function(){$(this).perfectScrollbar({wheelPropagation:!0})}),$(".checkout").each(function(){new s($(this))}),$(".product__items").each(function(){new o($(this))})});var n=function(e){var n=e,t=n.find(".site__menu-item"),i=n.find(".site__menu-icon"),s=$(window),o=null,a=s.width(),d=function(){s.on({resize:function(){a>s.width()&&(a=s.width(),s.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),i.on({click:function(){var e=jQuery(this),n=e.parents("li"),t=n.find(".site__menu-sub");return s.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),t.slideUp()):(n.addClass("opened"),t.slideDown())),!1}}),t.on({mouseenter:function(){if(s.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");s.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(s.width()>=1024){$(".featured-product__loading").addClass("visible"),o&&(clearTimeout(o),o=null);var e=$(this),t=e.data("product");o=setTimeout(function(){console.log(t),n.find(".featured-product").find(".featured-product__title").text(t.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",t.src),n.find(".featured-product").find(".btn").attr("href",t.href),n.find(".featured-product").find(".featured-product__price span").text(t.price),t.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),t.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(t.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),o=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){s.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){s.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){s.width()>=1024&&$(this).removeClass("opened")})},r=function(){d()};r()},t=function(n){var t,i,s=this,o=n,a=$(window),d=!1,r=$(".site__header"),c=$(".site__hidden-items"),u=r.innerHeight(),f=$(".site__header-btn"),l=$(".site__hidden-close"),h=$(".search"),p=$(".search-btn"),_=$(".search__cancel"),v=$(".site__hidden-btn"),m=$(".site"),w=$("html"),C=($(".site__content"),function(){$(document).on("click",".search",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click","body",function(){x()}),f.on({click:function(){k($(this))}}),l.on({click:function(){return T(),!1}}),p.on({click:function(){return y($(this)),!1}}),_.on({click:function(){return x(),!1}}),a.on({scroll:function(e){g(),d=a.scrollTop()>=u,0==a.scrollTop()&&r.removeClass("site__header_hidden")},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var t=n>0?1:-1;b(t)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var t=n>0?-1:1;b(t)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>t?b(-1):n<t&&b(1),t=n},keydown:function(e){switch(e.which){case 32:b(1);break;case 33:b(-1);break;case 34:b(1);break;case 35:b(1);break;case 36:b(-1);break;case 38:b(-1);break;case 40:b(1);break;default:return}},resize:function(){a.width()>=1024&&(m.css({height:""}),setTimeout(function(){m.height()>a.height()&&w.css({"overflow-y":""})},10))}})}),b=function(n){n>0&&!r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&d&&r.addClass("site__header_hidden"),n<0&&r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&d&&e&&r.removeClass("site__header_hidden")},g=function(){a.scrollTop()>u+150?r.addClass("fixed"):r.removeClass("fixed")},k=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),c.removeClass("opened")):(n.addClass("opened"),c.addClass("opened")),i=a.scrollTop(),setTimeout(function(){m.height()>a.height()&&w.css({"overflow-y":"scroll"}),setTimeout(function(){m.css({height:"100%"})},10)},300)},y=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),h.removeClass("active"),v.removeClass("hidden")):(n.addClass("opened"),h.addClass("active"),v.addClass("hidden"))},T=function(){f.removeClass("opened"),c.removeClass("opened"),h.find("input").focusout(),m.css({height:""}),setTimeout(function(){m.height()>a.height()&&w.css({"overflow-y":""}),a.scrollTop(i)},10)},x=function(){p.removeClass("opened"),h.removeClass("active"),v.removeClass("hidden")},H=function(){o[0].obj=s,C(),g()};H()},i=function(e){var n=e,t=$(window),i=t.width(),s=function(){t.on({resize:function(){i!=t.width()&&(i=t.width(),o())}})},o=function(){n.css({minHeight:""}),n.css({minHeight:t.height()-$(".site__header").innerHeight()-$(".site__footer").innerHeight()-$(".breadcrumbs").innerHeight()})},a=function(){s(),o()};a()},s=function(e){var n=e,t=n.find(".total-order"),i=function(){},s=function(){n.css({minHeight:t.innerHeight()})},o=function(){i(),s()};o()},o=function(e){Number.prototype.formatMoney=function(e,n,t){var i=this,e=isNaN(e=Math.abs(e))?2:e,n=void 0==n?".":n,t=void 0==t?",":t,s=i<0?"-":"",o=String(parseInt(i=Math.abs(Number(i)||0).toFixed(e))),a=(a=o.length)>3?a%3:0;return s+(a?o.substr(0,a)+t:"")+o.substr(a).replace(/(\d{3})(?=\d)/g,"$1"+t)+(e?n+Math.abs(i-o).toFixed(e).slice(2):"")},$(".variations_form").on("change",function(){var e=$(".variations").find("select"),n=0;if(e.each(function(e){$(this).val()&&n++}),n===e.length){var t=$(".price").text(),i=$(".price>span>span").text();t=parseFloat(t.slice(1)),$upsells=$(".variations_form>.websters-select").find("select"),$upsells.each(function(){var e=$(this).val();e>0&&$(this).find("option").each(function(){$(this).val()===e&&(t+=$(this).data("price"))})}),$(".price").css("display","none"),$(".featured-product__price>strong").html("<span>"+i+"</span>"+t.formatMoney(2,".",","))}})}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return v($(this).attr("data-popup")),!1}}),u.find(">div").on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},v=function(o){m(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
!function(){$(function(){$(".main-slider").each(function(){new i($(this))})});var i=function(i){var n=i,e=$(window),t=n.find(".main-slider__items"),s=n.find(".swiper-pagination"),d=n.find(".main-slider__constrols .swiper-button-prev"),o=n.find(".main-slider__constrols .swiper-button-next"),r=e.width(),a=function(){t.on("init",function(i){t.find(".slick-current").find(".main-slider__content").addClass("visible")}),t.on("afterChange",function(i,n){$(n.$slides).find(".main-slider__content").removeClass("visible"),$(n.$slides).filter(".slick-current").find(".main-slider__content").addClass("visible")}),e.on({resize:function(){r<e.width()&&(r=e.width()-1,n.find(".main-slider__item").css({minHeight:""}),n.find(".main-slider__item").css({minHeight:t.height()}))}})},l=function(){t.slick({dots:!0,autoplay:!0,autoplaySpeed:5e3,prevArrow:d,nextArrow:o,appendDots:s}),n.find(".main-slider__item").css({minHeight:t.height()})},c=function(){a(),l()};c()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var t=e,i=t.find("input[type=search]"),a=new XMLHttpRequest,s=t.data("path"),n=0,o=0,r=i.val(),c=t.find(".search__result"),l=function(){i.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==c.find(".search__found li").filter(".active").length&&t.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var i=$(this).val();i.length>=t.data("symbols")?u($(this),i.length):""==$(this).val()&&(c.removeClass("visible"),n=0)}},keydown:function(e){if(c.find(".search__found").html(""),c.find(".top-products").html(""),n=0,$(window).width()>=1024)switch(e.keyCode){case 13:return 0==c.find(".search__found li").filter(".active").length?window.location.href=t.data("action"):window.location.href=c.find(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),n=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),n==o&&(n=0))}}}),$("html").click(function(){c.removeClass("visible"),n=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),t=e.find("a").text();i.val(t),c.removeClass("visible"),n=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){c.find(".search__found li").removeClass("active"),t.parents().hasClass("site__footer")?(38==e&&n<o?n++:40==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(-1-(n-1)).addClass("active"),i.val(c.find(".search__found li").eq(-1-(n-1)).find("a").text())):i.val(r)):(40==e&&n<o?n++:38==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(n-1).addClass("active"),i.val(c.find(".search__found li").eq(n-1).find("a").text())):i.val(r))},f=function(e){var e=e,t=e.categories,i=0!=t.length,a=e.products,s=0!=a.length,n=[],r=[],l=!0;if(s){var d='<div class="top-products__wrap">';$.each(a,function(){var e=this;d+='<div>                                                <div class="top-products__item">                                                    <div class="top-products__pic" style="background-image: url('+e.src+')">                                                    </div>                                                    <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                    <h3 class="top-products__item-title">'+e.name+'</h3>                                                    <a href="'+e.href+'" class="top-products__btn">view</a>                                                </div>                                            </div>',i||n.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),d+="</div>",c.find("div").eq(1).find(".top-products").html('<h2 class="top-products__title">Top Products</h2>'+d);var f='<ul class="search__found">';if(i)$.each(t,function(){var e=this.subcategories,t=this.urlSubcategories,i="";if(void 0!=e){for(var a=0;a<=e.length-1;a++)i+='<li class="search__found-sub"><a href="'+t[a]+'">'+e[a]+"</a></li>";i+=""}f+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+i});else{for(var u=0;u<=n.length-1;u++)if(l&&(r.push(n[u]),l=!1),r[r.length-1][0]!=n[u][0])r.push(n[u]);else for(var h=0;h<=n[u].length-1;h++)for(var v=0;v<=n[u][2].length-1;v++)r[r.length-1][2].indexOf(n[u][2][v])==-1&&r[r.length-1][2].push(n[u][2][v]);for(var _=0,u=0;u<=r.length-1;u++){for(var h=0;h<=r[u].length-1;h++){for(var p="",v=0;v<=r[u][2].length-1;v++)p+='<li class="search__found-sub"><a href="'+r[u][3][v]+'">'+r[u][2][v]+"</a></li>",_++;p+=""}f+='<li><a href="'+r[u][1]+'">'+r[u][0]+"</a></li>"+p}}f+="</ul>",c.find("div:first").html(f),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")}else c.removeClass("visible")},u=function(e,t){return a.abort(),a=$.ajax({url:s,data:{value:e.val(),action:"main_search"},dataType:"json",type:"get",success:function(e){0!=Object.keys(e).length&&f(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}}),!1},h=function(){l()};h()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
