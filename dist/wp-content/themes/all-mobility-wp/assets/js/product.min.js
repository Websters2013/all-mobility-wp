!function(){var e=!0;$(function(){$(".site__menu").each(function(){new n($(this)),new i($(this))}),$(".not-found").each(function(){new t($(this))}),$(".confirmation").each(function(){new t($(this))}),$("#wpsl-stores").each(function(){$(this).perfectScrollbar({wheelPropagation:!0})}),$(".checkout").each(function(){new o($(this))})});var n=function(e){var n=e,i=n.find(".site__menu-item"),t=n.find(".site__menu-icon"),o=$(window),s=null,d=o.width(),a=function(){o.on({resize:function(){d>o.width()&&(d=o.width(),o.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),t.on({click:function(){var e=jQuery(this),n=e.parents("li"),i=n.find(".site__menu-sub");return o.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),i.slideUp()):(n.addClass("opened"),i.slideDown())),!1}}),i.on({mouseenter:function(){if(o.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");o.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(o.width()>=1024){$(".featured-product__loading").addClass("visible"),s&&(clearTimeout(s),s=null);var e=$(this),i=e.data("product");s=setTimeout(function(){n.find(".featured-product").find(".featured-product__title").text(i.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",i.src),n.find(".featured-product").find(".btn").attr("href",i.href),n.find(".featured-product").find(".featured-product__price span").text(i.price),i.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),i.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(i.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),s=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){o.width()>=1024&&$(this).removeClass("opened")})},r=function(){a()};r()},i=function(n){var i,t,o=this,s=n,d=$(window),a=!1,r=$(".site__header"),c=$(".site__hidden-items"),u=r.innerHeight(),f=$(".site__header-btn"),l=$(".site__hidden-close"),h=$(".search"),p=$(".search-btn"),_=$(".search__cancel"),m=$(".site__hidden-btn"),v=$(".site"),C=$("html"),w=($(".site__content"),function(){$(document).on("click",".search",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click","body",function(){H()}),f.on({click:function(){k($(this))}}),l.on({click:function(){return y(),!1}}),p.on({click:function(){return T($(this)),!1}}),_.on({click:function(){return H(),!1}}),d.on({scroll:function(e){g(),a=d.scrollTop()>=u,0==d.scrollTop()&&r.removeClass("site__header_hidden")},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var i=n>0?1:-1;b(i)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var i=n>0?-1:1;b(i)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>i?b(-1):n<i&&b(1),i=n},keydown:function(e){switch(e.which){case 32:b(1);break;case 33:b(-1);break;case 34:b(1);break;case 35:b(1);break;case 36:b(-1);break;case 38:b(-1);break;case 40:b(1);break;default:return}},resize:function(){d.width()>=1024&&(v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""})},10))}})}),b=function(n){n>0&&!r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&r.addClass("site__header_hidden"),n<0&&r.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&e&&r.removeClass("site__header_hidden")},g=function(){d.scrollTop()>u+150?r.addClass("fixed"):r.removeClass("fixed")},k=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),c.removeClass("opened")):(n.addClass("opened"),c.addClass("opened")),t=d.scrollTop(),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":"scroll"}),setTimeout(function(){v.css({height:"100%"})},10)},300)},T=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")):(n.addClass("opened"),h.addClass("active"),m.addClass("hidden"))},y=function(){f.removeClass("opened"),c.removeClass("opened"),h.find("input").focusout(),v.css({height:""}),setTimeout(function(){v.height()>d.height()&&C.css({"overflow-y":""}),d.scrollTop(t)},10)},H=function(){p.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")},x=function(){s[0].obj=o,w(),g()};x()},t=function(e){var n=e,i=$(window),t=i.width(),o=function(){i.on({resize:function(){t!=i.width()&&(t=i.width(),s())}})},s=function(){n.css({minHeight:""}),n.css({minHeight:i.height()-$(".site__header").innerHeight()-$(".site__footer").innerHeight()-$(".breadcrumbs").innerHeight()})},d=function(){o(),s()};d()},o=function(e){var n=e,i=n.find(".total-order"),t=function(){},o=function(){n.css({minHeight:i.innerHeight()})},s=function(){t(),o()};s()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return v($(this).attr("data-popup")),!1}}),u.find(">div").on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},v=function(o){m(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
"use strict";!function(){$(function(){$.each($(".product__slider"),function(){new e($(this))}),$.each($(".featured-products"),function(){new i($(this))})});var e=function(e){var i,s,n=this,t=e,d=$(window),l=!1,o=0,r=function(){t[0].obj=n,c()},c=function(){a(),i=new Swiper(t.find(".gallery-top"),{slidesPerView:"1",loop:l,loopedSlides:o,centeredSlides:!1,spaceBetween:30,onSlideChangeEnd:function(e){if(l)$(".swiper-slide .product__slider-thumbs").css({"border-color":"transparent"}),$(".swiper-slide-active .product__slider-thumbs").css({"border-color":"rgba(244, 121, 32, 0.5)"});else{var i=e.activeIndex;$(s.slides).removeClass("is-selected"),$(s.slides).eq(i).addClass("is-selected"),s.slideTo(i,500,!1)}}}),s=new Swiper(t.find(".gallery-thumbs"),{centeredSlides:!1,slidesPerView:"4",touchRatio:.2,loop:l,loopedSlides:o,slideToClickedSlide:!0,breakpoints:{1440:{slidesPerView:"3"}},onInit:function(e){l||$(e.slides).eq(e.activeIndex).addClass("is-selected")},onClick:function(e,s){if(!l){var n=e.clickedIndex;e.activeIndex=n,e.updateClasses(),$(e.slides).removeClass("is-selected"),$(e.clickedSlide).addClass("is-selected"),i.slideTo(n,500,!1)}}}),i.params.control=s,s.params.control=i,l&&$(".swiper-slide-active .product__slider-thumbs").css({"border-color":"rgba(244, 121, 32, 0.5)"})},a=function(){d.width()<1440?t.find(".gallery-thumbs .swiper-slide").length>=3&&(l=!0,o=t.find(".gallery-thumbs .swiper-slide").length):t.find(".gallery-thumbs .swiper-slide").length>=4&&(l=!0,o=t.find(".gallery-thumbs .swiper-slide").length)};r()},i=function(e){var i,s,n=this,t=e,d=$(window),l=!1,o=function(){t[0].obj=n,r(),d.width()<=768?s=!1:(s=!0,a())},r=function(){d.on({resize:function(){d.width()<=768?s&&(s=!1,c()):s||(s=!0,a())}})},c=function(){i.destroy(!0,!0)},a=function(){p(),i=new Swiper(t.find(".swiper-container"),{pagination:t.find(".swiper-pagination"),slidesPerView:5,paginationClickable:!0,speed:600,loop:l,autoplay:5e3,autoplayDisableOnInteraction:!1,nextButton:t.find(".swiper-button-next"),prevButton:t.find(".swiper-button-prev"),breakpoints:{1440:{slidesPerView:4}}})},p=function(){d.width()>=1024?t.find(".swiper-slide").length>=4&&(l=!0):d.width()>=1425&&t.find(".swiper-slide").length>=5&&(l=!0),l||t.find(".featured-products__controls").css({display:"none"})};o()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,d=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),l=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(l),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),l.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){l.text($(this).find("option:selected").text())}),$(document).on("change","select",function(){$(this).prev().text($(this).find("option:selected").text())}),1!=s||d||p.on({click:function(e){e.stopPropagation(),u?v():y()}}),f.on({click:function(){u&&v()}})},g=function(){!s||d?x():1==s&&_()},_=function(){p.addClass("websters-select_custom")},x=function(){p.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset(),0),d=o.find("option:selected").index(),l=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+l+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),p.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:-2,top:p.outerHeight()-4}),s=t.outerHeight(),s>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var t=e,a=t.find("input[type=search]"),i=new XMLHttpRequest,s=t.data("path"),n=0,o=0,r=a.val(),c=t.find(".search__result"),l=function(){a.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==c.find(".search__found li").filter(".active").length&&t.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var a=$(this).val();a.length>=t.data("symbols")?u($(this),a.length):""==$(this).val()&&(c.removeClass("visible"),n=0)}},keydown:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:return 0==c.find(".search__found li").filter(".active").length?window.location.href=t.data("action"):window.location.href=c.find(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),n=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),n==o&&(n=0))}}}),$("html").click(function(){c.removeClass("visible"),n=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),t=e.find("a").text();a.val(t),c.removeClass("visible"),n=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){c.find(".search__found li").removeClass("active"),t.parents().hasClass("site__footer")?(38==e&&n<o?n++:40==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(-1-(n-1)).addClass("active"),a.val(c.find(".search__found li").eq(-1-(n-1)).find("a").text())):a.val(r)):(40==e&&n<o?n++:38==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(n-1).addClass("active"),a.val(c.find(".search__found li").eq(n-1).find("a").text())):a.val(r))},f=function(e){var e=e,t=e.categories,a=0!=t.length,i=e.products,s=[],n=[],r=!0,l='<div class="top-products__wrap">';$.each(i,function(){var e=this;l+='<div>                                            <div class="top-products__item">                                                <div class="top-products__pic" style="background-image: url('+e.src+')">                                                </div>                                                <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                <h3 class="top-products__item-title">'+e.name+'</h3>                                                <a href="'+e.href+'" class="top-products__btn">view</a>                                            </div>                                        </div>',a||s.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),l+="</div>",c.find("div").eq(1).find(".top-products").html('<h2 class="top-products__title">Top Products</h2>'+l);var d='<ul class="search__found">';if(a)$.each(t,function(){var e=this.subcategories,t=this.urlSubcategories,a="";if(void 0!=e){for(var i=0;i<=e.length-1;i++)a+='<li class="search__found-sub"><a href="'+t[i]+'">'+e[i]+"</a></li>";a+=""}d+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+a});else{for(var f=0;f<=s.length-1;f++)if(r&&(n.push(s[f]),r=!1),n[n.length-1][0]!=s[f][0])n.push(s[f]);else for(var u=0;u<=s[f].length-1;u++)for(var h=0;h<=s[f][2].length-1;h++)n[n.length-1][2].indexOf(s[f][2][h])==-1&&n[n.length-1][2].push(s[f][2][h]);for(var v=0,f=0;f<=n.length-1;f++){for(var u=0;u<=n[f].length-1;u++){for(var _="",h=0;h<=n[f][2].length-1;h++)_+='<li class="search__found-sub"><a href="'+n[f][3][h]+'">'+n[f][2][h]+"</a></li>",v++;_+=""}d+='<li><a href="'+n[f][1]+'">'+n[f][0]+"</a></li>"+_}}d+="</ul>",c.find("div:first").html(d),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")},u=function(e,t){return i.abort(),i=$.ajax({url:s,data:{value:e.val(),action:"main_search"},dataType:"json",type:"get",success:function(e){0!=Object.keys(e).length&&f(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}}),!1},h=function(){l()};h()}}();
!function(){$(function(){$(".validator").each(function(){new t($(this))})});var t=function(t){var n=this,i=t,a=i.find("[required]"),e=i.find('button[type="submit"]'),o=$(".add-review__rate"),s=function(){u(),i[0].obj=n},c=function(){a.each(function(){var t=$(this);""===t.val()&&(t.addClass("not-touched"),f(t))})},u=function(){a.on({focus:function(){$(this).removeClass("not-touched")},keyup:function(){f($(this))},keypress:function(){var t=$(this).attr("type");"tel"===t&&(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault())}}),o.on({click:function(){var t=$(this).find("input");t.removeClass("not-touched"),f(t)}}),e.on({click:function(){return c(),!a.hasClass("not-touched")&&!a.hasClass("not-valid")||(i.find(".not-touched:first").focus(),i.find(".not-valid:first").focus(),!1)}})},r=function(t){t.addClass("not-valid"),t.removeClass("valid")},d=function(t){t.removeClass("not-valid"),t.addClass("valid")},v=function(t){var n=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return n.test(t)},f=function(t){var n=t.attr("type"),i=t.attr("name");return("email"!==n&&"text"!==n||""!==t.val())&&("email"!==n||v(t.val()))?"hidden"===n&&"stars"===i&&""===t.val()?(r(t),!1):void d(t):(r(t),!1)};n.checkValid=function(){var t=!0;return a.each(function(){$(this).removeClass("not-touched"),$(this).hasClass("not-valid")&&(t=!1)}),t},s()}}();
!function(){$(function(){$(".add-review__rate").each(function(){new n($(this))})});var n=function(n){var t=n,e=document.getElementById("#el"),i=t.find("input[type=hidden]"),o=function(){var n=e,t=0,o=5,c=function(n){i.val(n),console.log(i.val())};rating(n,t,o,c)},c=function(){o()};c()}}();
!function(){var n=!0;window.onload=function(){$(".go_review").each(function(){new e($(this))})};var e=function(e){var i=($(window),$(".reviews")),o=$("html, body"),t=$(".site__header"),r=function(){var e=t.innerHeight();o.stop(!0,!1),o.animate({scrollTop:i.offset().top-30},{duration:500,progress:function(){n=!1,t.addClass("site__header_hidden"),e=t.innerHeight()},complete:function(){setTimeout(function(){n=!1},200),setTimeout(function(){n=!0},500)}})},a=function(){r()};a()}}();
!function(){window.onload=function(){$(".product_adding").each(function(){new t($(this))})};var t=function(t){var e=($(window),$(".cart")),i=$(".site__header"),o=function(t){i.removeClass("site__header_hidden");var o=$(".gallery-top .swiper-slide:first").data("image"),s=t||window.event;s.pageX,s.pageY;$("body").append('<div class="site__product hidden" style="background-image:url('+o+')"></div>'),$(".site__product").css({top:$(".gallery-top").offset().top,left:$(".gallery-top").offset().left,width:$(".gallery-top").width(),height:$(".gallery-top").height()}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:e.offset().top+e.innerHeight()/2-$(".site__product").height()/2,left:e.offset().left+e.innerWidth()/2-$(".site__product").width()/2})},500),setTimeout(function(){$(".site__product").removeClass("visible"),$(".site__product").css({"-webkit-transform":"scale(0.3)",transform:"scale(0.3)"})},1e3),setTimeout(function(){$(".site__product").remove()},1300)},s=function(){o()};s()}}();
"use strict";!function(){$(function(){$.each($(".product__add"),function(){new t($(this))})});var t=function(t){var a=this,n=t,i=new XMLHttpRequest,u={},e=[],o=n.find("input[type=hidden][name=upsals]"),r=n.find(".products__upsals-choice"),s=$(".product__upsals-price"),c=function(){r.on({change:function(){var t=$(this),a=t[0].getAttribute("name"),n=t[0].value;l(a,n),d()}})},d=function(){i.abort(),i=$.ajax({url:$("body").attr("data-action"),data:{action:"upsals",value:o.val(),flag:"upsals",id:n.parents(".product").data("id")},dataType:"json",type:"get",success:function(t){s.find("span").html(t.totalPrice),s.addClass("visible")},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},f=function(){for(var t=0;t<=r.length-1;t++){var a=r[t],n=a.getAttribute("name"),i=a[0].value;l(n,i)}},l=function(t,a){u[t]=[a];var n="",i="",r="",s=[];for(var c in u){e=[];var d=u[c];e.push(d);for(var f=0;f<=e.length-1;f++)i=e.join(",");r=c+"="+i,s.push(r),n=s.join("&")}o.val(n)},p=function(){n[0].obj=a,c(),f()};p()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnBvcHVwLmpzIiwianF1ZXJ5LnByb2R1Y3Qtc2xpZGVyLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyIsImpxdWVyeS5zZWFyY2guanMiLCJqcXVlcnkuZm9ybS52YWxpZGF0b3IuanMiLCJqcXVlcnkucmF0ZS5qcyIsImpxdWVyeS5yZXZpZXctZ28uanMiLCJqcXVlcnkuYW5pbWF0aW9uLWFkZC5qcyIsImpxdWVyeS5wcm9kdWN0LWFqYXguanMiXSwibmFtZXMiOlsiZ2xvYmFsU2Nyb2xsRmxhZyIsIiQiLCJlYWNoIiwiU3ViTWVudSIsInRoaXMiLCJNZW51IiwiRnVsbEhlaWdodCIsInBlcmZlY3RTY3JvbGxiYXIiLCJ3aGVlbFByb3BhZ2F0aW9uIiwiQ2hlY2tvdXRIZWlnaHQiLCJvYmoiLCJfb2JqIiwiX2l0ZW1zIiwiZmluZCIsIl9hcnJvdyIsIl93aW5kb3ciLCJ3aW5kb3ciLCJ0aW1lb3V0IiwiX3N0YXJ0V2luV2lkdGgiLCJ3aWR0aCIsIl9hZGRFdmVudHMiLCJvbiIsInJlc2l6ZSIsInJlbW92ZUNsYXNzIiwialF1ZXJ5IiwiY3VySXRlbSIsInBhcmVudCIsImhhc0NsYXNzIiwiYWRkQ2xhc3MiLCJjbGljayIsInBhcmVudHMiLCJzdWJNZW51Iiwic2xpZGVVcCIsInNsaWRlRG93biIsIm1vdXNlZW50ZXIiLCJpbm5lcldpZHRoIiwib2Zmc2V0IiwibGVmdCIsImNzcyIsIi13ZWJraXQtdHJhbnNmb3JtIiwidHJhbnNmb3JtIiwicG9zaXRpb24iLCJjbGVhclRpbWVvdXQiLCJkYXRhIiwic2V0VGltZW91dCIsInRleHQiLCJuYW1lIiwiYXR0ciIsInNyYyIsImhyZWYiLCJwcmljZSIsIm9uU2FsZSIsIm9sZFByaWNlIiwiX2luaXQiLCJfbGFzdFBvcyIsInNpdGVTY3JvbGxUb3AiLCJfc2VsZiIsIl9tZW51IiwiX2FjdGlvbiIsIl9oZWFkZXIiLCJfaGlkZGVuQmxvY2tNZW51IiwiX2hlYWRlckhlaWdodCIsImlubmVySGVpZ2h0IiwiX3Nob3dCdG4iLCJfY2xvc2VCdG4iLCJfc2VhcmNoIiwiX29wZW5TZWFyY2giLCJfY2xvc2VTZWFyY2giLCJfZ2V0RnJlZSIsIl9zaXRlIiwiX2RvbSIsImRvY3VtZW50IiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJfY2xvc2VTZWFyY2hCb3giLCJfb3Blbk1lbnUiLCJfY2xvc2VNZW51IiwiX29wZW5TZWFyY2hCb3giLCJzY3JvbGwiLCJlIiwiX2ZpeGVkSGVhZGVyIiwic2Nyb2xsVG9wIiwiRE9NTW91c2VTY3JvbGwiLCJkZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJkZXRhaWwiLCJkaXJlY3Rpb24iLCJfY2hlY2tTY3JvbGwiLCJtb3VzZXdoZWVsIiwid2hlZWxEZWx0YSIsInRvdWNobW92ZSIsImN1cnJlbnRQb3MiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImtleWRvd24iLCJ3aGljaCIsImhlaWdodCIsIm92ZXJmbG93LXkiLCJlbGVtIiwiZm9jdXNvdXQiLCJfZ2xvYmFsV2luV2lkdGgiLCJfc2V0SGVpZ2h0IiwibWluSGVpZ2h0IiwiX3RvdGFsT3JkZXIiLCJQb3B1cCIsIl9wb3B1cFBhZGRpbmciLCJfYnRuU2hvdyIsIl9idG5DbG9zZSIsIl93cmFwIiwiX2NvbnRlbnRzIiwiX3Njcm9sbENvbnRlaW5lciIsIl90aW1lciIsIl9jZW50ZXJXcmFwIiwidG9wIiwiX2dldFNjcm9sbFdpZHRoIiwic2Nyb2xsQmFyV2lkdGgiLCJzY3JvbGxEaXYiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYm9keSIsImFwcGVuZENoaWxkIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwiX2hpZGUiLCJvdmVyZmxvd1kiLCJwYWRkaW5nUmlnaHQiLCJfb25FdmVudHMiLCJfc2hvdyIsIl9zZXRQb3B1cENvbnRlbnQiLCJjdXJDb250ZW50IiwiZmlsdGVyIiwiZGlzcGxheSIsIlByb2R1Y3RTbGlkZXIiLCJGZWF0dXJlZFByb2R1Y3RzU2xpZGVyIiwiX3NsaWRlciIsIl9nYWxsZXJ5VGh1bWJzIiwiX2xvb3AiLCJfc2xpZGVzTGVuZ3RoIiwiX2NvbnN0cnVjdG9yIiwiX2luaXRTbGlkZXIiLCJfYWRkU29tZVBhcmFtcyIsIlN3aXBlciIsInNsaWRlc1BlclZpZXciLCJsb29wIiwibG9vcGVkU2xpZGVzIiwiY2VudGVyZWRTbGlkZXMiLCJzcGFjZUJldHdlZW4iLCJvblNsaWRlQ2hhbmdlRW5kIiwic3dpcGVyIiwiYm9yZGVyLWNvbG9yIiwiYWN0aXZlSW5kZXgiLCJzbGlkZXMiLCJlcSIsInNsaWRlVG8iLCJ0b3VjaFJhdGlvIiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsImJyZWFrcG9pbnRzIiwiMTQ0MCIsIm9uSW5pdCIsIm9uQ2xpY2siLCJjbGlja2VkIiwiY2xpY2tlZEluZGV4IiwidXBkYXRlQ2xhc3NlcyIsImNsaWNrZWRTbGlkZSIsInBhcmFtcyIsImNvbnRyb2wiLCJsZW5ndGgiLCJfZmxhZyIsIl9kZXN0cm95IiwiZGVzdHJveSIsInBhZ2luYXRpb24iLCJwYWdpbmF0aW9uQ2xpY2thYmxlIiwic3BlZWQiLCJhdXRvcGxheSIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJuZXh0QnV0dG9uIiwicHJldkJ1dHRvbiIsIldlYnN0ZXJzU2VsZWN0Iiwib3B0aW9uVHlwZSIsInNob3dUeXBlIiwiX3BvcHVwIiwiX3Njcm9sbCIsIl9vcHRpb25UeXBlIiwiX3Nob3dUeXBlIiwiX3Zpc2libGUiLCJ2aXNpYmxlIiwiX2RldmljZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfdGV4dCIsIl9ib2R5IiwiX29wZW5lZCIsIl9hZGRXcmFwIiwiY3VyVGV4dCIsIm9wYWNpdHkiLCJ3cmFwIiwiYXBwZW5kIiwiYmVmb3JlIiwiX2hpZGVQb3B1cCIsInN0b3AiLCJyZW1vdmUiLCJmYWRlT3V0IiwiX3NlbGVjdFZpZXdUeXBlIiwicHJldiIsIl9zaG93UG9wdXAiLCJfc2V0TW9iaWxlVmlldyIsIl9zZXRDdXN0b20xIiwic2VsZWN0cyIsImxpc3QiLCJtYXhIZWlnaHQiLCJjdXJJbmRleCIsImluZGV4IiwiaWQiLCJNYXRoIiwicm91bmQiLCJyYW5kb20iLCJjaGVja09wZW5lZCIsImNsb3NlIiwiaSIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsImFuaW1hdGUiLCJ2YWwiLCJ0cmlnZ2VyIiwiU2VhcmNoIiwiX2lucHV0IiwiX3JlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIl9wYXRoIiwic3VnZ2VzdFNlbGVjdGVkIiwiY291bnRJdGVtcyIsInZhbHVlSW5wdXQiLCJfcmVzdWx0Iiwia2V5dXAiLCJJIiwia2V5Q29kZSIsInN1Ym1pdCIsIl9hamF4UmVxdWVzdCIsImxvY2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJfa2V5QWN0aXZhdGUiLCJuIiwiX2FkZERhdGEiLCJjYXRlZ29yaWVzIiwiY2F0ZWdvcmllc0F2YWlsYWJpbGl0eSIsInByb2R1Y3RzIiwiYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyIiwicHJvZHVjdHNDYXRlZ29yaWVzQXJyIiwiZmxhZyIsInByb2R1Y3RzV3JhcCIsInByb2R1Y3QiLCJwdXNoIiwibWFpbkNhdGVnb3J5IiwidXJsTWFpbkNhdGVnb3J5Iiwic3ViY2F0ZWdvcmllcyIsInVybFN1YmNhdGVnb3JpZXMiLCJodG1sIiwicmVzdWx0U3RyIiwic3ViY2F0ZWdvcmllc1dyYXAiLCJ1bmRlZmluZWQiLCJ1cmxDYXRlZ29yeSIsImoiLCJ6IiwiaW5kZXhPZiIsImNvdW50IiwiaW5wdXQiLCJhYm9ydCIsImFqYXgiLCJ1cmwiLCJ2YWx1ZSIsImFjdGlvbiIsImRhdGFUeXBlIiwidHlwZSIsInN1Y2Nlc3MiLCJtc2ciLCJPYmplY3QiLCJrZXlzIiwiZXJyb3IiLCJzdGF0dXNUZXh0IiwiY29uc29sZSIsImxvZyIsIkZvcm1WYWxpZGF0b3IiLCJfZmllbGRzIiwiX2J0biIsIl9yYXRlIiwiX2FkZE5vdFRvdWNoZWRDbGFzcyIsIl92YWxpZGF0ZUZpZWxkIiwiZm9jdXMiLCJrZXlwcmVzcyIsImZpZWxkIiwiX21ha2VOb3RWYWxpZCIsIl9tYWtlVmFsaWQiLCJfdmFsaWRhdGVFbWFpbCIsImVtYWlsIiwicmUiLCJjaGVja1ZhbGlkIiwidmFsaWQiLCJSYXRlIiwiX2VsZW0iLCJnZXRFbGVtZW50QnlJZCIsIl9pbnB1dEhpZGRlblJhdGUiLCJfaW5pdFJhdGUiLCJyYXRlIiwiY3VycmVudFJhdGluZyIsIm1heFJhdGluZyIsImNhbGxiYWNrIiwicmF0aW5nIiwib25sb2FkIiwiUmV2aWV3R28iLCJfcmV2aWV3cyIsIl9zY3JvbGxEb3duIiwiaGVpZ2h0SGVhZGVyIiwiZHVyYXRpb24iLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwiQWRkVG9DYXJ0QW5pbWF0aW9uIiwiX2NhcnQiLCJfYW5pbWF0ZWRBZGRpbmciLCJwaWMiLCJwYWdlWCIsInBhZ2VZIiwiUHJvZHVjdHNVcFNhbHMiLCJfb2JqVmFsdWUiLCJfYXJyIiwiX2lucHV0SGlkZGVuIiwiX3NlbGVjdHNVcFNhbHMiLCJfdG90YWxQcmljZSIsImNoYW5nZSIsImdldEF0dHJpYnV0ZSIsIl93cml0ZUluSGlkZGVuIiwiX3JlcXVlc3RVcFNhbHNQcm9kdWN0IiwibSIsInRvdGFsUHJpY2UiLCJhbGVydCIsIl9zdGFydFZpZXciLCJzZWxlY3QiLCJzdHJGaW5pc2giLCJzdHJWYWx1ZXMiLCJzdHJGdWxsIiwiYXJyQWxsIiwia2V5IiwiaXRlbSIsImpvaW4iXSwibWFwcGluZ3MiOiJDQUFBLFdBRUksR0FBSUEsSUFBbUIsQ0FFdkJDLEdBQUUsV0FFRUEsRUFBRSxlQUFlQyxLQUFLLFdBRWxCLEdBQUlDLEdBQVNGLEVBQUVHLE9BQ2YsR0FBSUMsR0FBTUosRUFBRUcsU0FJaEJILEVBQUUsY0FBY0MsS0FBSyxXQUVqQixHQUFJSSxHQUFZTCxFQUFFRyxTQUl0QkgsRUFBRSxpQkFBaUJDLEtBQUssV0FFcEIsR0FBSUksR0FBWUwsRUFBRUcsU0FJdEJILEVBQUUsZ0JBQWdCQyxLQUFLLFdBRW5CRCxFQUFFRyxNQUFNRyxr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QUFHcUQsSUFBTSxDQUUvQyxHQUFJcUgsR0FBU1YsRUFBZTNHLEdBQ3hCL0ssRUFBT29TLEVBQU9QLGFBQWEsUUFDM0IzRCxFQUFRa0UsRUFBTyxHQUFHbEUsS0FFdEI0RCxHQUFlOVIsRUFBTWtPLEtBSzdCNEQsRUFBaUIsU0FBUzlSLEVBQU1rTyxHQUU1QnFELEVBQVV2UixJQUFTa08sRUFHbkIsSUFBSW1FLEdBQVksR0FDWkMsRUFBWSxHQUNaQyxFQUFVLEdBQ1ZDLElBRUosS0FBSyxHQUFJQyxLQUFPbEIsR0FBWSxDQUV4QkMsSUFFQSxJQUFJa0IsR0FBT25CLEVBQVdrQixFQUV0QmpCLEdBQUt4RSxLQUFNMEYsRUFFWCxLQUFLLEdBQUkzSCxHQUFJLEVBQUdBLEdBQUt5RyxFQUFLOUosT0FBTyxFQUFHcUQsSUFFaEN1SCxFQUFZZCxFQUFLbUIsS0FBSyxJQUkxQkosR0FBVUUsRUFBTSxJQUFNSCxFQUV0QkUsRUFBT3hGLEtBQUt1RixHQUVaRixFQUFZRyxFQUFPRyxLQUFLLEtBSTVCbEIsRUFBYXRHLElBQUtrSCxJQUd0QjlSLEVBQVEsV0FDSjFDLEVBQUssR0FBR0QsSUFBTThDLEVBQ2RwQyxJQUNBNlQsSUFRUjVSIiwiZmlsZSI6InByb2R1Y3QubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKCBmdW5jdGlvbigpe1xyXG5cclxuICAgIHZhciBnbG9iYWxTY3JvbGxGbGFnID0gdHJ1ZTtcclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgJCgnLnNpdGVfX21lbnUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBTdWJNZW51KCAkKHRoaXMpICk7XHJcbiAgICAgICAgICAgIG5ldyBNZW51KCAkKHRoaXMpICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJCgnLm5vdC1mb3VuZCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEZ1bGxIZWlnaHQoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkKCcuY29uZmlybWF0aW9uJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgRnVsbEhlaWdodCggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQoJyN3cHNsLXN0b3JlcycpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5wZXJmZWN0U2Nyb2xsYmFyKHtcclxuICAgICAgICAgICAgICAgIHdoZWVsUHJvcGFnYXRpb246IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJCgnLmNoZWNrb3V0JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgQ2hlY2tvdXRIZWlnaHQoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgU3ViTWVudSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2l0ZW1zID0gX29iai5maW5kKCcuc2l0ZV9fbWVudS1pdGVtJyksXHJcbiAgICAgICAgICAgIF9hcnJvdyA9IF9vYmouZmluZCgnLnNpdGVfX21lbnUtaWNvbicpLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxyXG4gICAgICAgICAgICB0aW1lb3V0ID0gbnVsbCxcclxuICAgICAgICAgICAgX3N0YXJ0V2luV2lkdGggPSBfd2luZG93LndpZHRoKCk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF93aW5kb3cub24oIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfc3RhcnRXaW5XaWR0aCA+IF93aW5kb3cud2lkdGgoKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RhcnRXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfd2luZG93LmZpbmQoJy5vcGVuZWQnKS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnLnNpdGVfX21lbnUtaWNvbicsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggalF1ZXJ5KHdpbmRvdykud2lkdGgoKSA8IDEwMDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGpRdWVyeSh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGN1ckl0ZW0ucGFyZW50KCdsaScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX2Fycm93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0galF1ZXJ5KHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnRzKCdsaScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudSA9IHBhcmVudC5maW5kKCcuc2l0ZV9fbWVudS1zdWInKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPCAxMDI0ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQuaGFzQ2xhc3MoJ29wZW5lZCcpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuc2xpZGVVcCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5zbGlkZURvd24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfaXRlbXMub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoJ3VsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0uaGFzQ2xhc3MoJ3NpdGVfX21lbnUtaXRlbV9zdWInKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJNZW51ID0gY3VySXRlbS5maW5kKCcuc2l0ZV9fbWVudS1zdWInKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICggX3dpbmRvdy53aWR0aCgpIC0gKCBzdWJNZW51LmlubmVyV2lkdGgoKSArIGN1ckl0ZW0ub2Zmc2V0KCkubGVmdCApICkgPCAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICggKCBjdXJJdGVtLm9mZnNldCgpLmxlZnQgKyBjdXJJdGVtLmlubmVyV2lkdGgoKSApIC0gc3ViTWVudS5pbm5lcldpZHRoKCkgKSA8IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnNTAlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLXdlYmtpdC10cmFuc2Zvcm0nOiAndHJhbnNsYXRlWCgtNTAlKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKC01MCUpJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51LmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGN1ckl0ZW0ucG9zaXRpb24oKS5sZWZ0IC0gc3ViTWVudS5pbm5lcldpZHRoKCkgKyBjdXJJdGVtLmlubmVyV2lkdGgoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjdXJJdGVtLnBvc2l0aW9uKCkubGVmdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICQoJ1tkYXRhLXByb2R1Y3RdJykub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fbG9hZGluZycpLmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBjdXJJdGVtLmRhdGEoJ3Byb2R1Y3QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmKCAkKCcuZmVhdHVyZWQtcHJvZHVjdF9fbG9hZGluZycpLmhhc0NsYXNzKCd2aXNpYmxlJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fdGl0bGUnKS50ZXh0KGRhdGEubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcGljIGltZycpLmF0dHIoJ3NyYycsIGRhdGEuc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5idG4nKS5hdHRyKCdocmVmJywgZGF0YS5ocmVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZSBzcGFuJykudGV4dChkYXRhLnByaWNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkYXRhLm9uU2FsZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcmVtYXJrJykuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcmVtYXJrJykucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGRhdGEub2xkUHJpY2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3ByaWNlIGRlbCcpLnRleHQoZGF0YS5vbGRQcmljZSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZSBkZWwnKS5hZGRDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTYwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5mZWF0dXJlZC1wcm9kdWN0X19sb2FkaW5nJykucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9vYmoub24oICdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCcub3BlbmVkJykucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX29iai5maW5kKCd1bCcpLm9uKCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9vYmouZmluZCgnbGknKS5vbiggJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfbWVudSA9IG9iaixcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcclxuICAgICAgICAgICAgX2FjdGlvbiA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfYWN0aW9uU2Nyb2xsID0gZmFsc2UsXHJcbiAgICAgICAgICAgIF9sYXN0UG9zLFxyXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxyXG4gICAgICAgICAgICBfaGlkZGVuQmxvY2tNZW51ID0gJCgnLnNpdGVfX2hpZGRlbi1pdGVtcycpLFxyXG4gICAgICAgICAgICBfaGVhZGVySGVpZ2h0ID0gX2hlYWRlci5pbm5lckhlaWdodCgpLFxyXG4gICAgICAgICAgICBfc2hvd0J0biA9ICQoJy5zaXRlX19oZWFkZXItYnRuJyksXHJcbiAgICAgICAgICAgIF9jbG9zZUJ0biA9ICQoJy5zaXRlX19oaWRkZW4tY2xvc2UnKSxcclxuICAgICAgICAgICAgX3NlYXJjaCA9ICQoJy5zZWFyY2gnKSxcclxuICAgICAgICAgICAgX29wZW5TZWFyY2ggPSAkKCcuc2VhcmNoLWJ0bicpLFxyXG4gICAgICAgICAgICBfY2xvc2VTZWFyY2ggPSAkKCcuc2VhcmNoX19jYW5jZWwnKSxcclxuICAgICAgICAgICAgX2dldEZyZWUgPSAkKCcuc2l0ZV9faGlkZGVuLWJ0bicpLFxyXG4gICAgICAgICAgICBfc2l0ZSA9ICQoJy5zaXRlJyksXHJcbiAgICAgICAgICAgIF9kb20gPSAkKCAnaHRtbCcgKSxcclxuICAgICAgICAgICAgc2l0ZVNjcm9sbFRvcCxcclxuICAgICAgICAgICAgX2NvbnRlbnQgPSAkKCcuc2l0ZV9fY29udGVudCcpLFxyXG4gICAgICAgICAgICBfbGFzdFNjcm9sbFRvcCA9IDA7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLnNlYXJjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBldmVudCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYm9keVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VTZWFyY2hCb3goKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2hvd0J0bi5vbih7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSgkKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfY2xvc2VCdG4ub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX29wZW5TZWFyY2gub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb3BlblNlYXJjaEJveCgkKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfY2xvc2VTZWFyY2gub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VTZWFyY2hCb3goKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiBmdW5jdGlvbiAoIGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9maXhlZEhlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWN0aW9uID0gX3dpbmRvdy5zY3JvbGxUb3AoKSA+PSBfaGVhZGVySGVpZ2h0O1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LnNjcm9sbFRvcCgpID09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLnJlbW92ZUNsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBET01Nb3VzZVNjcm9sbDogZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC5kZXRhaWw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoZGVsdGEgPiAwKSA/IDEgOiAtMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoZGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZXdoZWVsOiBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoZGVsdGEgPiAwKSA/IC0xIDogMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoZGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvcyA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBvcyA+IF9sYXN0UG9zKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKC0xKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPCBfbGFzdFBvcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sYXN0UG9zID0gY3VycmVudFBvcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUud2hpY2gpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKC0xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzQgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzUgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzYgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCk+PTEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpdGUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfc2l0ZS5oZWlnaHQoKSA+IF93aW5kb3cuaGVpZ2h0KCkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA+IDAgJiYgIV9oZWFkZXIuaGFzQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKSAmJiAhX3Nob3dCdG4uaGFzQ2xhc3MoJ29wZW5lZCcpICYmIF9hY3Rpb24gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA8IDAgJiYgX2hlYWRlci5oYXNDbGFzcygnc2l0ZV9faGVhZGVyX2hpZGRlbicpICYmICFfc2hvd0J0bi5oYXNDbGFzcygnb3BlbmVkJykgJiYgX2FjdGlvbiAmJiBnbG9iYWxTY3JvbGxGbGFnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIucmVtb3ZlQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfZml4ZWRIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF93aW5kb3cuc2Nyb2xsVG9wKCkgPiBfaGVhZGVySGVpZ2h0ICsgMTUwICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5hZGRDbGFzcygnZml4ZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5yZW1vdmVDbGFzcygnZml4ZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbiAoZWxlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gZWxlbTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VySXRlbS5oYXNDbGFzcygnb3BlbmVkJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudS5hZGRDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNpdGVTY3JvbGxUb3AgPSBfd2luZG93LnNjcm9sbFRvcCgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9zaXRlLmhlaWdodCgpID4gX3dpbmRvdy5oZWlnaHQoKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ3Njcm9sbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2l0ZS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vcGVuU2VhcmNoQm94ID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGVsZW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1ckl0ZW0uaGFzQ2xhc3MoJ29wZW5lZCcpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zZWFyY2gucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9nZXRGcmVlLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBfc2VhcmNoLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBfZ2V0RnJlZS5hZGRDbGFzcygnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlTWVudSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2hvd0J0bi5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICBfaGlkZGVuQmxvY2tNZW51LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgIF9zZWFyY2guZmluZCgnaW5wdXQnKS5mb2N1c291dCgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBfc2l0ZS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJydcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9zaXRlLmhlaWdodCgpID4gX3dpbmRvdy5oZWlnaHQoKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3dpbmRvdy5zY3JvbGxUb3AoIHNpdGVTY3JvbGxUb3AgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9LCAxMCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xvc2VTZWFyY2hCb3ggPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX29wZW5TZWFyY2gucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgX3NlYXJjaC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICBfZ2V0RnJlZS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9tZW51WzBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgX2ZpeGVkSGVhZGVyKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIEZ1bGxIZWlnaHQgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIF9nbG9iYWxXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBfZ2xvYmFsV2luV2lkdGggIT0gX3dpbmRvdy53aWR0aCgpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6ICcnXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogX3dpbmRvdy5oZWlnaHQoKSAtICQoJy5zaXRlX19oZWFkZXInKS5pbm5lckhlaWdodCgpIC0gJCgnLnNpdGVfX2Zvb3RlcicpLmlubmVySGVpZ2h0KCkgLSAkKCcuYnJlYWRjcnVtYnMnKS5pbm5lckhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIENoZWNrb3V0SGVpZ2h0ID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfdG90YWxPcmRlciA9IF9vYmouZmluZCgnLnRvdGFsLW9yZGVyJyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiBfdG90YWxPcmRlci5pbm5lckhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG5cclxufSApKCk7IiwiKCBmdW5jdGlvbigpe1xyXG5cclxuICAgICQoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICQoICcucG9wdXAnICkuZWFjaChmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgbmV3IFBvcHVwKCQodGhpcykpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgUG9wdXAgPSBmdW5jdGlvbiggb2JqICl7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX3BvcHVwUGFkZGluZyA9IDQwLFxyXG4gICAgICAgICAgICBfYnRuU2hvdyA9ICAkKCAnLnBvcHVwX19vcGVuJyApLFxyXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfYnRuQ2xvc2UgPSBfb2JqLmZpbmQoICcucG9wdXBfX2Nsb3NlLCAucG9wdXBfX2NhbmNlbCcgKSxcclxuICAgICAgICAgICAgX3dyYXAgPSBfb2JqLmZpbmQoICcucG9wdXBfX3dyYXAnICksXHJcbiAgICAgICAgICAgIF9jb250ZW50cyA9IF9vYmouZmluZCggJy5wb3B1cF9fY29udGVudCcgKSxcclxuICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lciA9ICQoICdodG1sJyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXHJcbiAgICAgICAgICAgIF90aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCl7fSwgMSApO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY2VudGVyV3JhcCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoIF93aW5kb3cuaGVpZ2h0KCkgLSAoIF9wb3B1cFBhZGRpbmcgKiAyICkgLSBfd3JhcC5oZWlnaHQoKSA+IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAuY3NzKCB7IHRvcDogKCAoIF93aW5kb3cuaGVpZ2h0KCkgLSAoIF9wb3B1cFBhZGRpbmcgKiAyICkgKSAtIF93cmFwLmhlaWdodCgpICkgLyAyIH0gKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAuY3NzKCB7IHRvcDogMCB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9nZXRTY3JvbGxXaWR0aCA9IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnKSxcclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxCYXJXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ3BvcHVwX19zY3JvbGxiYXItbWVhc3VyZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggc2Nyb2xsRGl2ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzY3JvbGxCYXJXaWR0aDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2hpZGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfc2Nyb2xsQ29udGVpbmVyLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogMFxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmoucmVtb3ZlQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmFkZENsYXNzKCAncG9wdXBfaGlkZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfb2JqLmNzcyAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdhdXRvJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfaGlkZScgKTtcclxuICAgICAgICAgICAgICAgIH0sIDMwMCApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2VudGVyV3JhcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9idG5TaG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93KCAkKCB0aGlzICkuYXR0ciggJ2RhdGEtcG9wdXAnICkgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9jb250ZW50cy5maW5kKCc+ZGl2Jykub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oIGUgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfYnRuQ2xvc2Uub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3Nob3cgPSBmdW5jdGlvbiggY2xhc3NOYW1lICl7XHJcbiAgICAgICAgICAgICAgICBfc2V0UG9wdXBDb250ZW50KCBjbGFzc05hbWUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2Nyb2xsQ29udGVpbmVyLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2hpZGRlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBfZ2V0U2Nyb2xsV2lkdGgoKVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3BvcHVwX29wZW5lZCcgKTtcclxuICAgICAgICAgICAgICAgIF9jZW50ZXJXcmFwKCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0UG9wdXBDb250ZW50ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1ckNvbnRlbnQgPSBfY29udGVudHMuZmlsdGVyKCAnLnBvcHVwX18nICsgY2xhc3NOYW1lICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2NvbnRlbnRzLmNzcyggeyBkaXNwbGF5OiAnbm9uZScgfSApO1xyXG4gICAgICAgICAgICAgICAgY3VyQ29udGVudC5jc3MoIHsgZGlzcGxheTogJ2Jsb2NrJyB9ICk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcbn0gKSgpO1xyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbiggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgJCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCggJy5wcm9kdWN0X19zbGlkZXInICksIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IFByb2R1Y3RTbGlkZXIgKCAkKCB0aGlzICkgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcuZmVhdHVyZWQtcHJvZHVjdHMnICksIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEZlYXR1cmVkUHJvZHVjdHNTbGlkZXIgKCAkKCB0aGlzICkgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIFByb2R1Y3RTbGlkZXIgPSBmdW5jdGlvbiggb2JqICkge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9zbGlkZXIsXHJcbiAgICAgICAgICAgIF9nYWxsZXJ5VGh1bWJzLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCh3aW5kb3cpLFxyXG4gICAgICAgICAgICBfbG9vcCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfc2xpZGVzTGVuZ3RoID0gMDtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XHJcbiAgICAgICAgICAgICAgICBfaW5pdFNsaWRlcigpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdFNsaWRlciA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfYWRkU29tZVBhcmFtcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIF9zbGlkZXIgPSBuZXcgU3dpcGVyKCBfb2JqLmZpbmQoJy5nYWxsZXJ5LXRvcCcpICwge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICcxJyxcclxuICAgICAgICAgICAgICAgICAgICBsb29wOiBfbG9vcCxcclxuICAgICAgICAgICAgICAgICAgICBsb29wZWRTbGlkZXM6IF9zbGlkZXNMZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMzAsXHJcbiAgICAgICAgICAgICAgICAgICAgb25TbGlkZUNoYW5nZUVuZDogZnVuY3Rpb24oc3dpcGVyKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFfbG9vcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChfZ2FsbGVyeVRodW1icy5zbGlkZXMpLnJlbW92ZUNsYXNzKCdpcy1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChfZ2FsbGVyeVRodW1icy5zbGlkZXMpLmVxKGFjdGl2ZUluZGV4KS5hZGRDbGFzcygnaXMtc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nYWxsZXJ5VGh1bWJzLnNsaWRlVG8oYWN0aXZlSW5kZXgsNTAwLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnN3aXBlci1zbGlkZSAucHJvZHVjdF9fc2xpZGVyLXRodW1icycpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItY29sb3JcIjogXCJ0cmFuc3BhcmVudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5zd2lwZXItc2xpZGUtYWN0aXZlIC5wcm9kdWN0X19zbGlkZXItdGh1bWJzJykuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJvcmRlci1jb2xvclwiOiBcInJnYmEoMjQ0LCAxMjEsIDMyLCAwLjUpXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX2dhbGxlcnlUaHVtYnMgPSBuZXcgU3dpcGVyKCBfb2JqLmZpbmQoJy5nYWxsZXJ5LXRodW1icycpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICc0JyxcclxuICAgICAgICAgICAgICAgICAgICB0b3VjaFJhdGlvOiAwLjIsXHJcbiAgICAgICAgICAgICAgICAgICAgLy9mcmVlTW9kZTogIV9sb29wLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3A6IF9sb29wLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3BlZFNsaWRlczogX3NsaWRlc0xlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDE0NDA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICczJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbkluaXQ6IGZ1bmN0aW9uKHN3aXBlcikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIV9sb29wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHN3aXBlci5zbGlkZXMpLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYWRkQ2xhc3MoJ2lzLXNlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIChzd2lwZXIsIGV2ZW50KXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFfbG9vcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsaWNrZWQgPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLmFjdGl2ZUluZGV4ID0gY2xpY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVDbGFzc2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHN3aXBlci5zbGlkZXMpLnJlbW92ZUNsYXNzKCdpcy1zZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChzd2lwZXIuY2xpY2tlZFNsaWRlKS5hZGRDbGFzcygnaXMtc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zbGlkZXIuc2xpZGVUbyhjbGlja2VkLDUwMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2xpZGVyLnBhcmFtcy5jb250cm9sID0gX2dhbGxlcnlUaHVtYnM7XHJcbiAgICAgICAgICAgICAgICBfZ2FsbGVyeVRodW1icy5wYXJhbXMuY29udHJvbCA9IF9zbGlkZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF9sb29wKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJy5zd2lwZXItc2xpZGUtYWN0aXZlIC5wcm9kdWN0X19zbGlkZXItdGh1bWJzJykuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3JkZXItY29sb3JcIjogXCJyZ2JhKDI0NCwgMTIxLCAzMiwgMC41KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZFNvbWVQYXJhbXMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDwgMTQ0MCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmouZmluZCgnLmdhbGxlcnktdGh1bWJzIC5zd2lwZXItc2xpZGUnKS5sZW5ndGggPj0gMyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWRlc0xlbmd0aCA9IF9vYmouZmluZCgnLmdhbGxlcnktdGh1bWJzIC5zd2lwZXItc2xpZGUnKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmouZmluZCgnLmdhbGxlcnktdGh1bWJzIC5zd2lwZXItc2xpZGUnKS5sZW5ndGggPj0gNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3NsaWRlc0xlbmd0aCA9IF9vYmouZmluZCgnLmdhbGxlcnktdGh1bWJzIC5zd2lwZXItc2xpZGUnKS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBfY29uc3RydWN0b3IoKTtcclxuICAgIH07XHJcbiAgICB2YXIgRmVhdHVyZWRQcm9kdWN0c1NsaWRlciA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3NsaWRlcixcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcclxuICAgICAgICAgICAgX2ZsYWcsXHJcbiAgICAgICAgICAgIF9sb29wID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9jb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPD0gNzY4ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9mbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBfaW5pdFNsaWRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8PSA3NjggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9mbGFnICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kZXN0cm95KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggIV9mbGFnICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRTbGlkZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2xpZGVyLmRlc3Ryb3kodHJ1ZSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdFNsaWRlciA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfYWRkU29tZVBhcmFtcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIF9zbGlkZXIgPSBuZXcgU3dpcGVyKCBfb2JqLmZpbmQoICcuc3dpcGVyLWNvbnRhaW5lcicgKSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb246IF9vYmouZmluZCgnLnN3aXBlci1wYWdpbmF0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogNSxcclxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uQ2xpY2thYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwZWVkOiA2MDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9vcDogX2xvb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IDUwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEJ1dHRvbjogX29iai5maW5kKCcuc3dpcGVyLWJ1dHRvbi1uZXh0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldkJ1dHRvbjogX29iai5maW5kKCcuc3dpcGVyLWJ1dHRvbi1wcmV2JyksXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgMTQ0MDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZFNvbWVQYXJhbXMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmZpbmQoJy5zd2lwZXItc2xpZGUnKS5sZW5ndGggPj0gNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxNDI1ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggX29iai5maW5kKCcuc3dpcGVyLXNsaWRlJykubGVuZ3RoID49IDUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9vcCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIV9sb29wKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RzX19jb250cm9scycpLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XHJcbiAgICB9O1xyXG5cclxufSApKCk7XHJcbiIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAkKCBmdW5jdGlvbigpe1xyXG4gICAgICAgICQoICdzZWxlY3QnICkuZWFjaCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgbmV3IFdlYnN0ZXJzU2VsZWN0KCB7XHJcbiAgICAgICAgICAgICAgICBvYmo6ICQoIHRoaXMgKSxcclxuICAgICAgICAgICAgICAgIG9wdGlvblR5cGU6IDEsXHJcbiAgICAgICAgICAgICAgICBzaG93VHlwZTogMlxyXG4gICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgV2Vic3RlcnNTZWxlY3QgPSBmdW5jdGlvbiggcGFyYW1zICl7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IHBhcmFtcy5vYmosXHJcbiAgICAgICAgICAgIF9vcHRpb25UeXBlID0gcGFyYW1zLm9wdGlvblR5cGUgfHwgMCxcclxuICAgICAgICAgICAgX3Nob3dUeXBlID0gcGFyYW1zLnNob3dUeXBlIHx8IDAsXHJcbiAgICAgICAgICAgIF92aXNpYmxlID0gcGFyYW1zLnZpc2libGUgfHwgNSxcclxuICAgICAgICAgICAgX2RldmljZSA9IC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApLFxyXG4gICAgICAgICAgICBfdGV4dCA9ICQoICc8c3BhbiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9faXRlbVwiPjwvc3Bhbj4nICksXHJcbiAgICAgICAgICAgIF93cmFwID0gJCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RcIj48L2Rpdj4nICksXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKCB3aW5kb3cgKSxcclxuICAgICAgICAgICAgX2JvZHkgPSAkKCAnYm9keScgKSxcclxuICAgICAgICAgICAgX29wZW5lZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfcG9wdXAsIF9zY3JvbGw7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9hZGRXcmFwID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJUZXh0ID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai53cmFwKCBfd3JhcCApO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAgPSBfb2JqLnBhcmVudCgpO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYXBwZW5kKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9fYXJyb3dcIj48L2Rpdj4nICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmJlZm9yZSggX3RleHQgKTtcclxuICAgICAgICAgICAgICAgIF9vYmouZmluZCggJ29wdGlvbicgKS5lYWNoKCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCggdGhpcyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5hdHRyKCAnc2VsZWN0ZWQnICkgPT0gJ3NlbGVjdGVkJyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUZXh0ID0gY3VySXRlbS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBjdXJUZXh0ID09ICcnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9ICBfb2JqLmZpbmQoICdvcHRpb24nKS5lcSggMCApLnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90ZXh0LnRleHQoIGN1clRleHQgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2hpZGVQb3B1cCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfb3BlbmVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoICFfc2hvd1R5cGUgKXtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3Nob3dUeXBlID09IDEgKXtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc3RvcCggdHJ1ZSwgZmFsc2UgKS5zbGlkZVVwKCAzMDAsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAyICkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zdG9wKCB0cnVlLCBmYWxzZSApLmZhZGVPdXQoIDMwMCwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfd3JhcC5yZW1vdmVDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9vcGVuZWQnICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29ialsgMCBdLm9iaiA9IF9zZWxmO1xyXG5cclxuICAgICAgICAgICAgICAgIF9hZGRXcmFwKCk7XHJcbiAgICAgICAgICAgICAgICBfc2VsZWN0Vmlld1R5cGUoKTtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29iai5vbiggJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90ZXh0LnRleHQoICQoIHRoaXMgKS5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLnRleHQoKSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2hhbmdlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCggdGhpcykucHJldigpLnRleHQoICQoIHRoaXMgKS5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLnRleHQoKSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9vcHRpb25UeXBlID09IDEgJiYgIV9kZXZpY2UgKXtcclxuICAgICAgICAgICAgICAgICAgICBfd3JhcC5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbiggZSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Nob3dQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF9ib2R5Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zZWxlY3RWaWV3VHlwZSA9IGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoICFfb3B0aW9uVHlwZSB8fCBfZGV2aWNlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NldE1vYmlsZVZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX29wdGlvblR5cGUgPT0gMSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9zZXRDdXN0b20xKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zZXRDdXN0b20xID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X2N1c3RvbScgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldE1vYmlsZVZpZXcgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3RfbW9iaWxlJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2hvd1BvcHVwID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RzID0gJCggJ3NlbGVjdCcgKSxcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ID0gJCggJzx1bD48L3VsPicpLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1clNjcm9sbCA9IF93aW5kb3cuc2Nyb2xsVG9wKCksXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gX3dyYXAub2Zmc2V0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBjdXJJbmRleCA9IF9vYmouZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS5pbmRleCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkID0gTWF0aC5yb3VuZCggTWF0aC5yYW5kb20oKSAqIDEwMDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RzLmVhY2goIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXMgIT09IF9vYmpbIDAgXSAmJiB0aGlzLm9iai5jaGVja09wZW5lZCgpICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX29wZW5lZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwID0gJCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX3BvcHVwXCIgaWQ9XCJ3ZWJzdGVycy1zZWxlY3RfX3BvcHVwJyArIGlkICsgJ1wiPjwvZGl2PicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLmZpbmQoICdvcHRpb24nICkuZWFjaCggZnVuY3Rpb24oIGkgKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGkgPT0gY3VySW5kZXggKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmQoICc8bGkgY2xhc3M9XCJhY3RpdmVcIj4nICsgY3VySXRlbS50ZXh0KCkgKyAnPC9saT4nICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmQoICc8bGk+JyArIGN1ckl0ZW0udGV4dCgpICsgJzwvbGk+JyApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwLmFwcGVuZCggbGlzdCApO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYXBwZW5kKCBfcG9wdXAgKTtcclxuICAgICAgICAgICAgICAgIF93cmFwLmFkZENsYXNzKCAnd2Vic3RlcnMtc2VsZWN0X29wZW5lZCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IF93cmFwLm91dGVyV2lkdGgoKSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAtMixcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IF93cmFwLm91dGVySGVpZ2h0KCkgLSA0XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0ID0gX3BvcHVwLm91dGVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiggbWF4SGVpZ2h0ID4gX3BvcHVwLmZpbmQoICdsaScgKS5lcSggMCApLm91dGVySGVpZ2h0KCkgKiBfdmlzaWJsZSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5oZWlnaHQoIF9wb3B1cC5maW5kKCAnbGknICkuZXEoIDAgKS5vdXRlckhlaWdodCgpICogX3Zpc2libGUgKTtcclxuICAgICAgICAgICAgICAgICAgICBfc2Nyb2xsID0gX3BvcHVwLnBlcmZlY3RTY3JvbGxiYXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX3Nob3dUeXBlID09IDEgKXtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc2xpZGVEb3duKCAzMDAgKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggX3Nob3dUeXBlID09IDIgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjFcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmFuaW1hdGUoIHsgb3BhY2l0eTogMSB9LCAzMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cC5maW5kKCAnbGknICkub24oIHtcclxuICAgICAgICAgICAgICAgICAgICAnY2xpY2snOiBmdW5jdGlvbiggZSApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkKCB0aGlzICkuaW5kZXgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnZhbCggX29iai5maW5kKCAnb3B0aW9uJyApLmVxKCBpbmRleCApLmF0dHIoICd2YWx1ZScgKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb2JqLnRyaWdnZXIoICdjaGFuZ2UnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuICAgICAgICBfc2VsZi5jaGVja09wZW5lZCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBfb3BlbmVkO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgX3NlbGYuY2xvc2UgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xyXG5cclxuICAgIH07XHJcblxyXG59ICkoKTsiLCIoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICQoJy5zZWFyY2gnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBTZWFyY2goICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgU2VhcmNoID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfaW5wdXQgPSBfb2JqLmZpbmQoJ2lucHV0W3R5cGU9c2VhcmNoXScpLFxyXG4gICAgICAgICAgICBfcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxyXG4gICAgICAgICAgICBfcGF0aCA9IF9vYmouZGF0YSgncGF0aCcpLFxyXG4gICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwLFxyXG4gICAgICAgICAgICBjb3VudEl0ZW1zID0gMCxcclxuICAgICAgICAgICAgdmFsdWVJbnB1dCA9IF9pbnB1dC52YWwoKSxcclxuICAgICAgICAgICAgX3Jlc3VsdCA9IF9vYmouZmluZCgnLnNlYXJjaF9fcmVzdWx0Jyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9pbnB1dC5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleXVwOiBmdW5jdGlvbihJKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggJCh3aW5kb3cpLndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goSS5rZXlDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZmlsdGVyKCcuYWN0aXZlJykubGVuZ3RoID09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJ2Zvcm0nKS5zdWJtaXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVJbnB1dCA9ICQodGhpcykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggdmFsdWVJbnB1dC5sZW5ndGggPj0gX29iai5kYXRhKCdzeW1ib2xzJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FqYXhSZXF1ZXN0KCAkKHRoaXMpLCB2YWx1ZUlucHV0Lmxlbmd0aCk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggJCh0aGlzKS52YWwoKSA9PSAnJyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWRvd246IGZ1bmN0aW9uKEkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKHdpbmRvdykud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCggSS5rZXlDb2RlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmZpbHRlcignLmFjdGl2ZScpLmxlbmd0aCA9PSAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBfb2JqLmRhdGEoJ2FjdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZmlsdGVyKCcuYWN0aXZlJykuZmluZCgnYScpLmF0dHIoJ2hyZWYnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGNvdW50SXRlbXMgPiAwICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfa2V5QWN0aXZhdGUoIEkua2V5Q29kZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzdWdnZXN0U2VsZWN0ZWQgPT0gY291bnRJdGVtcyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAkKCdodG1sJykuY2xpY2soIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYm9keVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBldmVudCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIuc2VhcmNoX19mb3VuZCBsaVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUZXh0ID0gY3VySXRlbS5maW5kKCdhJykudGV4dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbChjdXJUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImtleWRvd25cIixcclxuICAgICAgICAgICAgICAgICAgICBcIi5zZWFyY2hfX2ZvdW5kIGxpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oSSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChJLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcignY2xpY2snKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfa2V5QWN0aXZhdGUgPSBmdW5jdGlvbihuKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggX29iai5wYXJlbnRzKCkuaGFzQ2xhc3MoJ3NpdGVfX2Zvb3RlcicpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggbiA9PSAzOCAmJiBzdWdnZXN0U2VsZWN0ZWQgPCBjb3VudEl0ZW1zICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG4gPT0gNDAgJiYgc3VnZ2VzdFNlbGVjdGVkID4gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZXEoIC0xIC0gKHN1Z2dlc3RTZWxlY3RlZCAtIDEpICkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZXEoIC0xIC0gKHN1Z2dlc3RTZWxlY3RlZCAtIDEpICkuZmluZCgnYScpLnRleHQoKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbCggdmFsdWVJbnB1dCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIG4gPT0gNDAgJiYgc3VnZ2VzdFNlbGVjdGVkIDwgY291bnRJdGVtcyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCsrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuID09IDM4ICYmIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzdWdnZXN0U2VsZWN0ZWQgPiAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmVxKCBzdWdnZXN0U2VsZWN0ZWQgLSAxICkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kIGxpJykuZXEoIHN1Z2dlc3RTZWxlY3RlZCAtIDEgKS5maW5kKCdhJykudGV4dCgpICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5wdXQudmFsKCB2YWx1ZUlucHV0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZERhdGEgPSBmdW5jdGlvbiggZGF0YSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcyA9IGRhdGEuY2F0ZWdvcmllcyxcclxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzQXZhaWxhYmlsaXR5ID0gY2F0ZWdvcmllcy5sZW5ndGggIT0gMCxcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0cyA9IGRhdGEucHJvZHVjdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsUHJvZHVjdHNDYXRlZ29yaWVzQXJyID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgZmxhZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHByb2R1Y3RzV3JhcCA9ICc8ZGl2IGNsYXNzPVwidG9wLXByb2R1Y3RzX193cmFwXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2goIHByb2R1Y3RzLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzxkaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9wLXByb2R1Y3RzX19pdGVtXCI+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvcC1wcm9kdWN0c19fcGljXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJysgcHJvZHVjdC5zcmMgKycpXCI+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX3ByaWNlXCI+PGRlbD4nKyBwcm9kdWN0Lm9sZFByaWNlICsnPC9kZWw+ICcrIHByb2R1Y3QucHJpY2UgKyc8L3NwYW4+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidG9wLXByb2R1Y3RzX19pdGVtLXRpdGxlXCI+JysgcHJvZHVjdC5uYW1lICsnPC9oMz5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiJysgcHJvZHVjdC5ocmVmICsnXCIgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX2J0blwiPnZpZXc8L2E+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JztcclxuICAgICAgICAgICAgICAgICAgICBpZiggIWNhdGVnb3JpZXNBdmFpbGFiaWxpdHkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIucHVzaCggW3Byb2R1Y3QuY2F0ZWdvcmllcy5tYWluQ2F0ZWdvcnksIHByb2R1Y3QuY2F0ZWdvcmllcy51cmxNYWluQ2F0ZWdvcnksIHByb2R1Y3QuY2F0ZWdvcmllcy5zdWJjYXRlZ29yaWVzLCBwcm9kdWN0LmNhdGVnb3JpZXMudXJsU3ViY2F0ZWdvcmllc10gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCdkaXYnKS5lcSgxKS5maW5kKCcudG9wLXByb2R1Y3RzJykuaHRtbCgnPGgyIGNsYXNzPVwidG9wLXByb2R1Y3RzX190aXRsZVwiPlRvcCBQcm9kdWN0czwvaDI+JyArIHByb2R1Y3RzV3JhcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdFN0ciA9ICc8dWwgY2xhc3M9XCJzZWFyY2hfX2ZvdW5kXCI+JztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggY2F0ZWdvcmllc0F2YWlsYWJpbGl0eSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKCBjYXRlZ29yaWVzLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJjYXRlZ29yaWVzID0gdGhpcy5zdWJjYXRlZ29yaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsU3ViY2F0ZWdvcmllcyA9IHRoaXMudXJsU3ViY2F0ZWdvcmllcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggc3ViY2F0ZWdvcmllcyAhPSB1bmRlZmluZWQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gc3ViY2F0ZWdvcmllcy5sZW5ndGgtMTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCArPSAnPGxpIGNsYXNzPVwic2VhcmNoX19mb3VuZC1zdWJcIj48YSBocmVmPVwiJysgdXJsU3ViY2F0ZWdvcmllc1tpXSArJ1wiPicgKyBzdWJjYXRlZ29yaWVzW2ldICsgJzwvYT48L2xpPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gJzxsaT48YSBocmVmPVwiJysgdGhpcy51cmxDYXRlZ29yeSArJ1wiPicrIHRoaXMubmFtZSArJzwvYT48L2xpPicrIHN1YmNhdGVnb3JpZXNXcmFwICsnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8PSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIubGVuZ3RoLTE7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBmbGFnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c0NhdGVnb3JpZXNBcnIucHVzaChhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggcHJvZHVjdHNDYXRlZ29yaWVzQXJyW3Byb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMV1bMF0gIT0gYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzBdICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5wdXNoKGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMDsgaiA8PSBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV0ubGVuZ3RoLTE7IGorKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIHogPSAwOyB6IDw9IGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXS5sZW5ndGgtMTsgeisrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3RzQ2F0ZWdvcmllc0Fycltwcm9kdWN0c0NhdGVnb3JpZXNBcnIubGVuZ3RoLTFdWzJdLmluZGV4T2YoIGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXVt6XSkgPT0gLTEgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW3Byb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMV1bMl0ucHVzaCggYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdW3pdIClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyLmxlbmd0aC0xOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldLmxlbmd0aC0xOyBqKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YmNhdGVnb3JpZXNXcmFwID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgeiA9IDA7IHogPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdLmxlbmd0aC0xOyB6KysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwICs9ICc8bGkgY2xhc3M9XCJzZWFyY2hfX2ZvdW5kLXN1YlwiPjxhIGhyZWY9XCInICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzNdW3pdICsgJ1wiPicgKyBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl1bel0gKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gJzxsaT48YSBocmVmPVwiJyArIHByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsxXSArICdcIj4nICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzBdICsgJzwvYT48L2xpPicrIHN1YmNhdGVnb3JpZXNXcmFwICsnJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHRTdHIgKz0gJzwvdWw+JztcclxuXHJcbiAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJ2RpdjpmaXJzdCcpLmh0bWwocmVzdWx0U3RyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy5zZWFyY2hfX2ZvdW5kJykuZmluZCgnbGk6bm90KDpsdCgxMSkpJykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY291bnRJdGVtcyA9IF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQnKS5maW5kKCdsaScpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBfcmVzdWx0LmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWpheFJlcXVlc3QgPSAgZnVuY3Rpb24oIGlucHV0LCBuICkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogX3BhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaW5wdXQudmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjonbWFpbl9zZWFyY2gnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCBtc2cgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggT2JqZWN0LmtleXMobXNnKS5sZW5ndGggIT0gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hZGREYXRhKCBtc2cgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoWE1MSHR0cFJlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG59ICkoKTsiLCIoIGZ1bmN0aW9uICgpIHtcclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkKCcudmFsaWRhdG9yJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgRm9ybVZhbGlkYXRvciggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBGb3JtVmFsaWRhdG9yID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9maWVsZHMgPSBfb2JqLmZpbmQoICdbcmVxdWlyZWRdJyApLFxyXG4gICAgICAgICAgICBfYnRuID0gX29iai5maW5kKCAnYnV0dG9uW3R5cGU9XCJzdWJtaXRcIl0nICksXHJcbiAgICAgICAgICAgIF9yYXRlID0gJCggJy5hZGQtcmV2aWV3X19yYXRlJyApO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX29uRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZE5vdFRvdWNoZWRDbGFzcyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfZmllbGRzLmVhY2goIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBjdXJJdGVtLnZhbCgpID09PSAnJyApe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcyggJ25vdC10b3VjaGVkJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRlRmllbGQoIGN1ckl0ZW0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9maWVsZHMub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1czogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCB0aGlzICkucmVtb3ZlQ2xhc3MoICdub3QtdG91Y2hlZCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBrZXl1cDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdmFsaWRhdGVGaWVsZCggJCggdGhpcyApICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAga2V5cHJlc3M6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSAkKCB0aGlzICkuYXR0ciggJ3R5cGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggdHlwZSA9PT0gJ3RlbCcgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICggZXZlbnQud2hpY2ggIT0gNDYgfHwgJCggdGhpcyApLnZhbCgpLmluZGV4T2YoICcuJyApICE9IC0xICkgJiYgKCBldmVudC53aGljaCA8IDQ4IHx8IGV2ZW50LndoaWNoID4gNTcgKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9yYXRlLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGQgPSAkKCB0aGlzICkuZmluZCggJ2lucHV0JyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC5yZW1vdmVDbGFzcyggJ25vdC10b3VjaGVkJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdmFsaWRhdGVGaWVsZCggZmllbGQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2J0bi5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hZGROb3RUb3VjaGVkQ2xhc3MoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfZmllbGRzLmhhc0NsYXNzKCdub3QtdG91Y2hlZCcpIHx8IF9maWVsZHMuaGFzQ2xhc3MoJ25vdC12YWxpZCcpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLm5vdC10b3VjaGVkOmZpcnN0JykuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLm5vdC12YWxpZDpmaXJzdCcpLmZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX21ha2VOb3RWYWxpZCA9IGZ1bmN0aW9uICggZmllbGQgKSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC5hZGRDbGFzcyggJ25vdC12YWxpZCcgKTtcclxuICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZUNsYXNzKCAndmFsaWQnICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9tYWtlVmFsaWQgPSBmdW5jdGlvbiAoIGZpZWxkICkge1xyXG4gICAgICAgICAgICAgICAgZmllbGQucmVtb3ZlQ2xhc3MoICdub3QtdmFsaWQnICk7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC5hZGRDbGFzcyggJ3ZhbGlkJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfdmFsaWRhdGVFbWFpbCA9IGZ1bmN0aW9uICggZW1haWwgKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmUgPSAvXigoW148PigpXFxbXFxdXFxcXC4sOzpcXHNAXCJdKyhcXC5bXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLztcclxuICAgICAgICAgICAgICAgIHJldHVybiByZS50ZXN0KGVtYWlsKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3ZhbGlkYXRlRmllbGQgPSBmdW5jdGlvbiAoIGZpZWxkICkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBmaWVsZC5hdHRyKCAndHlwZScgKSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gZmllbGQuYXR0ciggJ25hbWUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIHR5cGUgPT09ICdlbWFpbCcgfHwgdHlwZSA9PT0gJ3RleHQnICl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBmaWVsZC52YWwoKSA9PT0gJycgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX21ha2VOb3RWYWxpZCggZmllbGQgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIHR5cGUgPT09ICdlbWFpbCcgKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiggIV92YWxpZGF0ZUVtYWlsKCBmaWVsZC52YWwoKSApICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tYWtlTm90VmFsaWQoIGZpZWxkICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIHR5cGUgPT09ICdoaWRkZW4nICYmIG5hbWUgPT09ICdzdGFycycgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBmaWVsZC52YWwoKSA9PT0gJycgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tYWtlTm90VmFsaWQoIGZpZWxkICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX21ha2VWYWxpZCggZmllbGQgKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcbiAgICAgICAgX3NlbGYuY2hlY2tWYWxpZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHZhbGlkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIF9maWVsZHMuZWFjaCggZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCggdGhpcyApLnJlbW92ZUNsYXNzKCAnbm90LXRvdWNoZWQnICk7XHJcbiAgICAgICAgICAgICAgICBpZiggJCggdGhpcyApLmhhc0NsYXNzKCAnbm90LXZhbGlkJyApICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBfY29uc3RydWN0b3IoKTtcclxuICAgIH07XHJcblxyXG59ICkoKTsiLCIoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICQoJy5hZGQtcmV2aWV3X19yYXRlJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgUmF0ZSggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBSYXRlID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCcjZWwnKSxcclxuICAgICAgICAgICAgX2lucHV0SGlkZGVuUmF0ZSA9IF9vYmouZmluZCgnaW5wdXRbdHlwZT1oaWRkZW5dJyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfaW5pdFJhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJhdGUgPSBfZWxlbSxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmF0aW5nID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBtYXhSYXRpbmc9IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbihyYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUmF0ZS52YWwoIHJhdGluZyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2lucHV0SGlkZGVuUmF0ZS52YWwoKSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBteVJhdGluZyA9IHJhdGluZyhyYXRlLCBjdXJyZW50UmF0aW5nLCBtYXhSYXRpbmcsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX2luaXRSYXRlKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICB2YXIgZ2xvYmFsU2Nyb2xsRmxhZyA9IHRydWU7XHJcblxyXG4gICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAkKCcuZ29fcmV2aWV3JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgUmV2aWV3R28oICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgUmV2aWV3R28gPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIF9yZXZpZXdzID0gJCgnLnJldmlld3MnKSxcclxuICAgICAgICAgICAgX2RvbSA9ICQoICdodG1sLCBib2R5JyksXHJcbiAgICAgICAgICAgIF9oZWFkZXIgPSAkKCcuc2l0ZV9faGVhZGVyJyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfc2Nyb2xsRG93biA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0SGVhZGVyID0gX2hlYWRlci5pbm5lckhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIF9kb20uc3RvcCggdHJ1ZSwgZmFsc2UgKTtcclxuICAgICAgICAgICAgICAgIF9kb20uYW5pbWF0ZSgge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogX3Jldmlld3Mub2Zmc2V0KCkudG9wIC0gMzBcclxuXHJcbiAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRIZWFkZXIgPSBfaGVhZGVyLmlubmVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9zY3JvbGxEb3duKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICQoJy5wcm9kdWN0X2FkZGluZycpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEFkZFRvQ2FydEFuaW1hdGlvbiggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBBZGRUb0NhcnRBbmltYXRpb24gPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIF9jYXJ0ID0gJCgnLmNhcnQnKSxcclxuICAgICAgICAgICAgX2hlYWRlciA9ICQoJy5zaXRlX19oZWFkZXInKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdmFyIF9hbmltYXRlZEFkZGluZyA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfaGVhZGVyLnJlbW92ZUNsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHBpYyA9ICQoJy5nYWxsZXJ5LXRvcCAuc3dpcGVyLXNsaWRlOmZpcnN0JykuZGF0YSgnaW1hZ2UnKSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFnZVggPSBlLnBhZ2VYLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VZID0gZS5wYWdlWTtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwic2l0ZV9fcHJvZHVjdCBoaWRkZW5cIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6dXJsKCcrIHBpYyArJylcIj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgICAgICQoJy5zaXRlX19wcm9kdWN0JykuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAkKCcuZ2FsbGVyeS10b3AnKS5vZmZzZXQoKS50b3AgLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6ICQoJy5nYWxsZXJ5LXRvcCcpLm9mZnNldCgpLmxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICQoJy5nYWxsZXJ5LXRvcCcpLndpZHRoKCksXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAkKCcuZ2FsbGVyeS10b3AnKS5oZWlnaHQoKVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fcHJvZHVjdCcpLmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX3Byb2R1Y3QnKS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBfY2FydC5vZmZzZXQoKS50b3AgKyBfY2FydC5pbm5lckhlaWdodCgpLzIgLSAkKCcuc2l0ZV9fcHJvZHVjdCcpLmhlaWdodCgpLzIgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBfY2FydC5vZmZzZXQoKS5sZWZ0ICsgX2NhcnQuaW5uZXJXaWR0aCgpLzIgLSAkKCcuc2l0ZV9fcHJvZHVjdCcpLndpZHRoKCkvMlxyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9LCA1MDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX3Byb2R1Y3QnKS5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19wcm9kdWN0JykuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICdzY2FsZSgwLjMpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICdzY2FsZSgwLjMpJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9LCAxMDAwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19wcm9kdWN0JykucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMTMwMCApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfYW5pbWF0ZWRBZGRpbmcoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG5cclxufSApKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAkKCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICQuZWFjaCggJCgnLnByb2R1Y3RfX2FkZCcpLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgUHJvZHVjdHNVcFNhbHMoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgUHJvZHVjdHNVcFNhbHMgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3JlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcclxuICAgICAgICAgICAgX29ialZhbHVlID0ge30sXHJcbiAgICAgICAgICAgIF9hcnIgPSBbXSxcclxuICAgICAgICAgICAgX2lucHV0SGlkZGVuID0gX29iai5maW5kKCdpbnB1dFt0eXBlPWhpZGRlbl1bbmFtZT11cHNhbHNdJyksXHJcbiAgICAgICAgICAgIF9zZWxlY3RzVXBTYWxzID0gX29iai5maW5kKCcucHJvZHVjdHNfX3Vwc2Fscy1jaG9pY2UnKSxcclxuICAgICAgICAgICAgX3RvdGFsUHJpY2UgPSAkKCcucHJvZHVjdF9fdXBzYWxzLXByaWNlJyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3NlbGVjdHNVcFNhbHMub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGN1ckl0ZW1bMF0uZ2V0QXR0cmlidXRlKCduYW1lJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGN1ckl0ZW1bMF0udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfd3JpdGVJbkhpZGRlbihuYW1lLCB2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVxdWVzdFVwU2Fsc1Byb2R1Y3QoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3JlcXVlc3RVcFNhbHNQcm9kdWN0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdCA9ICQuYWpheCgge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJCgnYm9keScpLmF0dHIoJ2RhdGEtYWN0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwidXBzYWxzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfaW5wdXRIaWRkZW4udmFsKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWc6IFwidXBzYWxzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBfb2JqLnBhcmVudHMoJy5wcm9kdWN0JykuZGF0YSgnaWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChtKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdG90YWxQcmljZS5maW5kKCdzcGFuJykuaHRtbChtLnRvdGFsUHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdG90YWxQcmljZS5hZGRDbGFzcygndmlzaWJsZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoWE1MSHR0cFJlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9IFwiYWJvcnRcIiApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRVJST1IhISFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc3RhcnRWaWV3ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGk8PSBfc2VsZWN0c1VwU2Fscy5sZW5ndGgtMTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ID0gX3NlbGVjdHNVcFNhbHNbaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBzZWxlY3QuZ2V0QXR0cmlidXRlKCduYW1lJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gc2VsZWN0WzBdLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfd3JpdGVJbkhpZGRlbihuYW1lLCB2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3dyaXRlSW5IaWRkZW4gPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmpWYWx1ZVtuYW1lXSA9IFt2YWx1ZV07XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzdHJGaW5pc2ggPSAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJWYWx1ZXMgPSAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJGdWxsID0gJycsXHJcbiAgICAgICAgICAgICAgICAgICAgYXJyQWxsID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKCB2YXIga2V5IGluIF9vYmpWYWx1ZSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2FyciA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IF9vYmpWYWx1ZVsga2V5IF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9hcnIucHVzaCggaXRlbSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8PSBfYXJyLmxlbmd0aC0xOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0clZhbHVlcyA9IF9hcnIuam9pbignLCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN0ckZ1bGwgPSBrZXkgKyAnPScgKyBzdHJWYWx1ZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFyckFsbC5wdXNoKHN0ckZ1bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdHJGaW5pc2ggPSBhcnJBbGwuam9pbignJicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBfaW5wdXRIaWRkZW4udmFsKCBzdHJGaW5pc2ggKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9zdGFydFZpZXcoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyJdfQ==
