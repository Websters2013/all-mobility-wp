!function(){var e=!0;Number.prototype.formatMoney=function(e,n,t){var i=this,e=isNaN(e=Math.abs(e))?2:e,n=void 0==n?".":n,t=void 0==t?",":t,o=i<0?"-":"",s=String(parseInt(i=Math.abs(Number(i)||0).toFixed(e))),r=(r=s.length)>3?r%3:0;return o+(r?s.substr(0,r)+t:"")+s.substr(r).replace(/(\d{3})(?=\d)/g,"$1"+t)+(e?n+Math.abs(i-s).toFixed(e).slice(2):"")},$(function(){$(".site__menu").each(function(){new n($(this)),new t($(this))}),$(".not-found").each(function(){new i($(this))}),$(".confirmation").each(function(){new i($(this))}),$("#wpsl-stores").each(function(){$(this).perfectScrollbar({wheelPropagation:!0})}),$(".checkout").each(function(){new o($(this))}),$(".product__items").each(function(){new s($(this))})});var n=function(e){var n=e,t=n.find(".site__menu-item"),i=n.find(".site__menu-icon"),o=$(window),s=null,r=o.width(),a=function(){o.on({resize:function(){r>o.width()&&(r=o.width(),o.find(".opened").removeClass("opened"))}}),$("body").on("click",".site__menu-icon",function(){if(jQuery(window).width()<1e3){var e=jQuery(this),n=e.parent("li");n.hasClass("opened")?n.removeClass("opened"):n.addClass("opened")}return!1}),i.on({click:function(){var e=jQuery(this),n=e.parents("li"),t=n.find(".site__menu-sub");return o.width()<1024&&(n.hasClass("opened")?(n.removeClass("opened"),t.slideUp()):(n.addClass("opened"),t.slideDown())),!1}}),t.on({mouseenter:function(){if(o.width()>=1024){var e=$(this);e.parent("ul");if(e.hasClass("site__menu-item_sub")){e.addClass("opened");var n=e.find(".site__menu-sub");o.width()-(n.innerWidth()+e.offset().left)<0?e.offset().left+e.innerWidth()-n.innerWidth()<0?n.css({left:"50%","-webkit-transform":"translateX(-50%)",transform:"translateX(-50%)"}):n.css({left:e.position().left-n.innerWidth()+e.innerWidth()}):n.css({left:e.position().left})}}}}),$("[data-product]").on({mouseenter:function(){if(o.width()>=1024){$(".featured-product__loading").addClass("visible"),s&&(clearTimeout(s),s=null);var e=$(this),t=e.data("product");s=setTimeout(function(){console.log(t),n.find(".featured-product").find(".featured-product__title").text(t.name),n.find(".featured-product").find(".featured-product__pic img").attr("src",t.src),n.find(".featured-product").find(".btn").attr("href",t.href),n.find(".featured-product").find(".featured-product__price span").text(t.price),t.onSale?n.find(".featured-product").find(".featured-product__remark").addClass("visible"):n.find(".featured-product").find(".featured-product__remark").removeClass("visible"),t.oldPrice?n.find(".featured-product").find(".featured-product__price del").text(t.oldPrice):n.find(".featured-product").find(".featured-product__price del").addClass("hidden")},160),s=setTimeout(function(){$(".featured-product__loading").removeClass("visible")},200)}}}),n.on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("ul").on("mouseleave",function(){o.width()>=1024&&$(this).find(".opened").removeClass("opened")}),n.find("li").on("mouseleave",function(){o.width()>=1024&&$(this).removeClass("opened")})},d=function(){a()};d()},t=function(n){var t,i,o=this,s=n,r=$(window),a=!1,d=$(".site__header"),c=$(".site__hidden-items"),u=d.innerHeight(),f=$(".site__header-btn"),l=$(".site__hidden-close"),h=$(".search"),p=$(".search-btn"),_=$(".search__cancel"),m=$(".site__hidden-btn"),v=$(".site"),w=$("html"),C=($(".site__content"),function(){$(document).on("click",".search",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click","body",function(){x()}),f.on({click:function(){k($(this))}}),l.on({click:function(){return T(),!1}}),p.on({click:function(){return y($(this)),!1}}),_.on({click:function(){return x(),!1}}),r.on({scroll:function(e){b(),a=r.scrollTop()>=u,0==r.scrollTop()&&d.removeClass("site__header_hidden")},DOMMouseScroll:function(e){var n=e.originalEvent.detail;if(n){var t=n>0?1:-1;g(t)}},mousewheel:function(e){var n=e.originalEvent.wheelDelta;if(n){var t=n>0?-1:1;g(t)}},touchmove:function(e){var n=e.originalEvent.touches[0].clientY;n>t?g(-1):n<t&&g(1),t=n},keydown:function(e){switch(e.which){case 32:g(1);break;case 33:g(-1);break;case 34:g(1);break;case 35:g(1);break;case 36:g(-1);break;case 38:g(-1);break;case 40:g(1);break;default:return}},resize:function(){r.width()>=1024&&(v.css({height:""}),setTimeout(function(){v.height()>r.height()&&w.css({"overflow-y":""})},10))}})}),g=function(n){n>0&&!d.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&d.addClass("site__header_hidden"),n<0&&d.hasClass("site__header_hidden")&&!f.hasClass("opened")&&a&&e&&d.removeClass("site__header_hidden")},b=function(){r.scrollTop()>u+150?d.addClass("fixed"):d.removeClass("fixed")},k=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),c.removeClass("opened")):(n.addClass("opened"),c.addClass("opened")),i=r.scrollTop(),setTimeout(function(){v.height()>r.height()&&w.css({"overflow-y":"scroll"}),setTimeout(function(){v.css({height:"100%"})},10)},300)},y=function(e){var n=e;n.hasClass("opened")?(n.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")):(n.addClass("opened"),h.addClass("active"),m.addClass("hidden"))},T=function(){f.removeClass("opened"),c.removeClass("opened"),h.find("input").focusout(),v.css({height:""}),setTimeout(function(){v.height()>r.height()&&w.css({"overflow-y":""}),r.scrollTop(i)},10)},x=function(){p.removeClass("opened"),h.removeClass("active"),m.removeClass("hidden")},H=function(){s[0].obj=o,C(),b()};H()},i=function(e){var n=e,t=$(window),i=t.width(),o=function(){t.on({resize:function(){i!=t.width()&&(i=t.width(),s())}})},s=function(){n.css({minHeight:""}),n.css({minHeight:t.height()-$(".site__header").innerHeight()-$(".site__footer").innerHeight()-$(".breadcrumbs").innerHeight()})},r=function(){o(),s()};r()},o=function(e){var n=e,t=n.find(".total-order"),i=function(){},o=function(){n.css({minHeight:t.innerHeight()})},s=function(){i(),o()};s()},s=function(e){var n=e.find("form");n.on("change",function(){var t=e.find("form>.websters-select select"),i=n.find(".variations select"),o=i.length,s=e.attr("data-price"),r=$(".product__price>span>span").text();if(o>0){var a=0;if(i.each(function(){$(this).val()&&a++}),a!==i.length)return!1;""!==n.find(".featured-product__price .price").text().trim()&&(s=$(".price>span").text(),r=$(".price>span>span").text())}s=parseFloat(s.slice(1).split(",").join("")),t.each(function(){var e=$(this).val();e>0&&$(this).find("option").each(function(){$(this).val()===e&&(s+=+$(this).data("price"))})}),$(".price").css("display","none"),console.log(0===$(".featured-product__price>strong").length),0===n.find(".featured-product__price>strong").length&&n.find(".featured-product__price").append('<strong class="product__price"></strong>'),n.find(".featured-product__price>strong").html("<span>"+r+"</span>"+s.formatMoney(2,".",","))})}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return v($(this).attr("data-popup")),!1}}),u.find(">div").on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},v=function(o){m(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},m=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
"use strict";!function(){$(function(){$.each($(".product__slider"),function(){new i($(this))}),$.each($(".featured-products"),function(){new s($(this))})});var i=function(i){var s=this,o=i,e=function(){o[0].obj=s,n()},n=function(){$(".slider-for").slick({slidesToShow:1,slidesPerRow:1,slidesToScroll:1,arrows:!1,infinite:!0,asNavFor:".slider-nav"}),$(".slider-nav").slick({slidesToShow:4,slidesPerRow:4,asNavFor:".slider-for",dots:!1,arrows:!1,infinite:!0,centerMode:!1,focusOnSelect:!0,responsive:[{breakpoint:1360,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:1024,settings:{slidesToShow:4,slidesToScroll:4}},{breakpoint:412,settings:{slidesToShow:3,slidesToScroll:3}}]})};e()},s=function(i){var s,o,e=this,n=i,t=$(window),r=n.find(".swiper-pagination"),d=n.find(".swiper-button-prev"),l=n.find(".swiper-button-next"),c=!1,u=function(){n[0].obj=e,a(),t.width()<=768?o=!1:(o=!0,p())},a=function(){t.on({resize:function(){t.width()<=768?o&&(o=!1,f()):o||(o=!0,p())}})},f=function(){s.slick("unslick")},p=function(){w(),s=$(".featured-products__wrapper").slick({dots:!0,slidesToShow:5,slidesToScroll:1,autoplay:!0,autoplaySpeed:5e3,prevArrow:d,nextArrow:l,appendDots:r,responsive:[{breakpoint:1440,settings:{slidesToShow:4}}]})},w=function(){t.width()>=1024?n.find(".featured-products__slide").length>=4&&(c=!0):t.width()>=1425&&n.find(".featured-products__slide").length>=5&&(c=!0),c||n.find(".featured-products__controls").css({display:"none"})};u()}}();
!function(){$(function(){$("select").each(function(){new e({obj:$(this),optionType:1,showType:2})})});var e=function(e){var t,n,i=this,o=e.obj,s=e.optionType||0,c=e.showType||0,a=e.visible||5,l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),d=$('<span class="websters-select__item"></span>'),p=$('<div class="websters-select"></div>'),r=$(window),f=$("body"),u=!1,h=function(){var e="";o.css({opacity:0}),o.wrap(p),p=o.parent(),p.append('<div class="websters-select__arrow"></div>'),o.before(d),o.find("option").each(function(){var t=$(this);"selected"==t.attr("selected")&&(e=t.text())}),""==e&&(e=o.find("option").eq(0).text()),d.text(e)},v=function(){u=!1,c?1==c?t.stop(!0,!1).slideUp(300,function(){t.remove()}):2==c&&t.stop(!0,!1).fadeOut(300,function(){t.remove()}):t.css({display:"none"}),p.removeClass("websters-select_opened")},b=function(){o[0].obj=i,h(),g(),w()},w=function(){o.on("change",function(){d.text($(this).find("option:selected").text())}),$(document).on("change","select",function(){$(this).prev().text($(this).find("option:selected").text())}),1!=s||l||p.on({click:function(e){e.stopPropagation(),u?v():y()}}),f.on({click:function(){u&&v()}}),r.on({scroll:function(){u&&v()}})},g=function(){!s||l?x():1==s&&_()},_=function(){p.addClass("websters-select_custom")},x=function(){p.addClass("websters-select_mobile")},y=function(){var e=$("select"),i=$("<ul></ul>"),s=(r.scrollTop(),p.offset()),l=0,d=o.find("option:selected").index(),h=Math.round(1e3*Math.random());e.each(function(){this!==o[0]&&this.obj.checkOpened()&&this.obj.close()}),u&&t.remove(),u=!0,t=$('<div class="websters-select__popup" id="websters-select__popup'+h+'"></div>'),o.find("option").each(function(e){var t=$(this);e==d?i.append('<li class="active">'+t.text()+"</li>"):i.append("<li>"+t.text()+"</li>")}),t.append(i),f.append(t),p.addClass("websters-select_opened"),t.css({width:p.outerWidth(),left:s.left,top:s.top+p.outerHeight()}),l=t.outerHeight(),l>t.find("li").eq(0).outerHeight()*a&&(t.height(t.find("li").eq(0).outerHeight()*a),n=t.perfectScrollbar()),1==c?(t.css({display:"none"}),t.slideDown(300)):2==c&&(t.css({opacity:.1}),t.animate({opacity:1},300)),t.find("li").on({click:function(e){var t=$(this).index();e.stopPropagation(),o.val(o.find("option").eq(t).attr("value")),o.trigger("change"),v()}})};i.checkOpened=function(){return u},i.close=function(){v()},b()}}();
!function(){$(function(){$(".search").each(function(){new e($(this))})});var e=function(e){var t=e,i=t.find("input[type=search]"),a=new XMLHttpRequest,s=t.data("path"),n=0,o=0,r=i.val(),c=t.find(".search__result"),l=function(){i.on({keyup:function(e){if($(window).width()>=1024)switch(e.keyCode){case 13:0==c.find(".search__found li").filter(".active").length&&t.find("form").submit();break;case 32:case 27:case 37:case 38:case 39:case 40:break;default:var i=$(this).val();i.length>=t.data("symbols")?u($(this),i.length):""==$(this).val()&&(c.removeClass("visible"),n=0)}},keydown:function(e){if(c.find(".search__found").html(""),c.find(".top-products").html(""),n=0,$(window).width()>=1024)switch(e.keyCode){case 13:return 0==c.find(".search__found li").filter(".active").length?window.location.href=t.data("action"):window.location.href=c.find(".search__found li").filter(".active").find("a").attr("href"),!1;case 27:return c.remove(),n=0,!1;case 38:case 40:e.preventDefault(),o>0&&(d(e.keyCode),n==o&&(n=0))}}}),$("html").click(function(){c.removeClass("visible"),n=0}),$(document).on("click","body",function(e){e=e||window.event,e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}),$(document).on("click",".search__found li",function(){var e=$(this),t=e.find("a").text();i.val(t),c.removeClass("visible"),n=0}),$(document).on("keydown",".search__found li",function(e){switch(e.keyCode){case 13:$(this).trigger("click")}})},d=function(e){c.find(".search__found li").removeClass("active"),t.parents().hasClass("site__footer")?(38==e&&n<o?n++:40==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(-1-(n-1)).addClass("active"),i.val(c.find(".search__found li").eq(-1-(n-1)).find("a").text())):i.val(r)):(40==e&&n<o?n++:38==e&&n>0&&n--,n>0?(c.find(".search__found li").eq(n-1).addClass("active"),i.val(c.find(".search__found li").eq(n-1).find("a").text())):i.val(r))},f=function(e){var e=e,t=e.categories,i=0!=t.length,a=e.products,s=0!=a.length,n=[],r=[],l=!0;if(s){var d='<div class="top-products__wrap">';$.each(a,function(){var e=this;d+='<div>                                                <div class="top-products__item">                                                    <div class="top-products__pic" style="background-image: url('+e.src+')">                                                    </div>                                                    <span class="top-products__price"><del>'+e.oldPrice+"</del> "+e.price+'</span>                                                    <h3 class="top-products__item-title">'+e.name+'</h3>                                                    <a href="'+e.href+'" class="top-products__btn">view</a>                                                </div>                                            </div>',i||n.push([e.categories.mainCategory,e.categories.urlMainCategory,e.categories.subcategories,e.categories.urlSubcategories])}),d+="</div>",c.find("div").eq(1).find(".top-products").html('<h2 class="top-products__title">Top Products</h2>'+d);var f='<ul class="search__found">';if(i)$.each(t,function(){var e=this.subcategories,t=this.urlSubcategories,i="";if(void 0!=e){for(var a=0;a<=e.length-1;a++)i+='<li class="search__found-sub"><a href="'+t[a]+'">'+e[a]+"</a></li>";i+=""}f+='<li><a href="'+this.urlCategory+'">'+this.name+"</a></li>"+i});else{for(var u=0;u<=n.length-1;u++)if(l&&(r.push(n[u]),l=!1),r[r.length-1][0]!=n[u][0])r.push(n[u]);else for(var h=0;h<=n[u].length-1;h++)for(var v=0;v<=n[u][2].length-1;v++)r[r.length-1][2].indexOf(n[u][2][v])==-1&&r[r.length-1][2].push(n[u][2][v]);for(var _=0,u=0;u<=r.length-1;u++){for(var h=0;h<=r[u].length-1;h++){for(var p="",v=0;v<=r[u][2].length-1;v++)p+='<li class="search__found-sub"><a href="'+r[u][3][v]+'">'+r[u][2][v]+"</a></li>",_++;p+=""}f+='<li><a href="'+r[u][1]+'">'+r[u][0]+"</a></li>"+p}}f+="</ul>",c.find("div:first").html(f),c.find(".search__found").find("li:not(:lt(11))").remove(),o=c.find(".search__found").find("li").length,c.addClass("visible")}else c.removeClass("visible")},u=function(e,t){return a.abort(),a=$.ajax({url:s,data:{value:e.val(),action:"main_search"},dataType:"json",type:"get",success:function(e){0!=Object.keys(e).length&&f(e)},error:function(e){"abort"!=e.statusText&&console.log("Error")}}),!1},h=function(){l()};h()}}();
!function(){$(function(){$(".validator").each(function(){new t($(this))})});var t=function(t){var n=this,i=t,a=i.find("[required]"),e=i.find('button[type="submit"]'),o=$(".add-review__rate"),s=function(){u(),i[0].obj=n},c=function(){a.each(function(){var t=$(this);""===t.val()&&(t.addClass("not-touched"),d(t))})},u=function(){a.on({focus:function(){$(this).removeClass("not-touched")},keyup:function(){d($(this))},keypress:function(){var t=$(this).attr("type");"tel"===t&&(46==event.which&&$(this).val().indexOf(".")==-1||!(event.which<48||event.which>57)||event.preventDefault())}}),o.on({click:function(){var t=$(this).find("input");t.removeClass("not-touched"),d(t)}}),e.on({click:function(){return c(),!a.hasClass("not-touched")&&!a.hasClass("not-valid")||(i.find(".not-touched:first").focus(),i.find(".not-valid:first").focus(),!1)}})},l=function(t){t.addClass("not-valid"),t.removeClass("valid")},v=function(t){t.removeClass("not-valid"),t.addClass("valid")},r=function(t){var n=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return n.test(t)},d=function(t){var n=t.attr("type"),i=t.attr("name");return("email"!==n&&"text"!==n||""!==t.val())&&("email"!==n||r(t.val()))?"hidden"===n&&"rating"===i&&(console.log(t.val()),t.val()<=0||""===t.val())?(l(t),!1):void v(t):(l(t),!1)};n.checkValid=function(){var t=!0;return a.each(function(){$(this).removeClass("not-touched"),$(this).hasClass("not-valid")&&(t=!1)}),t},s()}}();
!function(){$(function(){$(".add-review__rate").each(function(){new n($(this))})});var n=function(n){var t=n,e=document.getElementById("#el"),i=t.find("input[type=hidden]"),o=function(){var n=e,t=0,o=5,c=function(n){i.val(n),console.log(i.val())};rating(n,t,o,c)},c=function(){o()};c()}}();
!function(){var n=!0;window.onload=function(){$(".go_review").each(function(){new e($(this))})};var e=function(e){var i=($(window),$(".reviews")),o=$("html, body"),t=$(".site__header"),r=function(){var e=t.innerHeight();o.stop(!0,!1),o.animate({scrollTop:i.offset().top-30},{duration:500,progress:function(){n=!1,t.addClass("site__header_hidden"),e=t.innerHeight()},complete:function(){setTimeout(function(){n=!1},200),setTimeout(function(){n=!0},500)}})},a=function(){r()};a()}}();
!function(){window.onload=function(){$(".product_adding").each(function(){new t($(this))})};var t=function(t){var e=($(window),$(".cart")),i=$(".site__header"),o=function(t){i.removeClass("site__header_hidden");var o=$(".gallery-top .slick-slide:first").data("image"),s=t||window.event;s.pageX,s.pageY;$("body").append('<div class="site__product hidden" style="background-image:url('+o+')"></div>'),$(".site__product").css({top:$(".gallery-top").offset().top,left:$(".gallery-top").offset().left,width:$(".gallery-top").width(),height:$(".gallery-top").height()}),setTimeout(function(){$(".site__product").addClass("visible"),$(".site__product").css({top:e.offset().top+e.innerHeight()/2-$(".site__product").height()/2,left:e.offset().left+e.innerWidth()/2-$(".site__product").width()/2})},500),setTimeout(function(){$(".site__product").removeClass("visible"),$(".site__product").css({"-webkit-transform":"scale(0.3)",transform:"scale(0.3)"})},1e3),setTimeout(function(){$(".site__product").remove()},1300)},s=function(){o()};s()}}();
"use strict";!function(){$(function(){$.each($(".product__add"),function(){new t($(this))})});var t=function(t){var a=this,n=t,i=new XMLHttpRequest,u={},e=[],o=n.find("input[type=hidden][name=upsals]"),r=n.find(".products__upsals-choice"),s=$(".product__upsals-price"),c=function(){r.on({change:function(){var t=$(this),a=t[0].getAttribute("name"),n=t[0].value;l(a,n),d()}})},d=function(){i.abort(),i=$.ajax({url:$("body").attr("data-action"),data:{action:"upsals",value:o.val(),flag:"upsals",id:n.parents(".product").data("id")},dataType:"json",type:"get",success:function(t){s.find("span").html(t.totalPrice),s.addClass("visible")},error:function(t){"abort"!=t.statusText&&alert("ERROR!!!")}})},f=function(){for(var t=0;t<=r.length-1;t++){var a=r[t],n=a.getAttribute("name"),i=a[0].value;l(n,i)}},l=function(t,a){u[t]=[a];var n="",i="",r="",s=[];for(var c in u){e=[];var d=u[c];e.push(d);for(var f=0;f<=e.length-1;f++)i=e.join(",");r=c+"="+i,s.push(r),n=s.join("&")}o.val(n)},p=function(){n[0].obj=a,c(),f()};p()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYWluLmpzIiwianF1ZXJ5LnBvcHVwLmpzIiwianF1ZXJ5LnByb2R1Y3Qtc2xpZGVyLmpzIiwianF1ZXJ5LndlYnN0ZXJzLXNlbGVjdC5qcyIsImpxdWVyeS5zZWFyY2guanMiLCJqcXVlcnkuZm9ybS52YWxpZGF0b3IuanMiLCJqcXVlcnkucmF0ZS5qcyIsImpxdWVyeS5yZXZpZXctZ28uanMiLCJqcXVlcnkuYW5pbWF0aW9uLWFkZC5qcyIsImpxdWVyeS5wcm9kdWN0LWFqYXguanMiXSwibmFtZXMiOlsiZ2xvYmFsU2Nyb2xsRmxhZyIsIk51bWJlciIsInByb3RvdHlwZSIsImZvcm1hdE1vbmV5IiwiYyIsImQiLCJ0IiwibiIsInRoaXMiLCJpc05hTiIsIk1hdGgiLCJhYnMiLCJ1bmRlZmluZWQiLCJzIiwiaSIsIlN0cmluZyIsInBhcnNlSW50IiwidG9GaXhlZCIsImoiLCJsZW5ndGgiLCJzdWJzdHIiLCJyZXBsYWNlIiwic2xpY2UiLCIkIiwiZWFjaCIsIlN1Yk1lbnUiLCJNZW51IiwiRnVsbEhlaWdodCIsInBlcmZlY3RTY3JvbGxiYXIiLCJ3aGVlbFByb3BhZ2F0aW9uIiwiQ2hlY2tvdXRIZWlnaHQiLCJDaGFuZ2VQcmljZSIsIm9iaiIsIl9vYmoiLCJfaXRlbXMiLCJmaW5kIiwiX2Fycm93IiwiX3dpbmRvdyIsIndpbmRvdyIsInRpbWVvdXQiLCJfc3RhcnRXaW5XaWR0aCIsIndpZHRoIiwiX2FkZEV2ZW50cyIsIm9uIiwicmVzaXplIiwicmVtb3ZlQ2xhc3MiLCJqUXVlcnkiLCJjdXJJdGVtIiwicGFyZW50IiwiaGFzQ2xhc3MiLCJhZGRDbGFzcyIsImNsaWNrIiwicGFyZW50cyIsInN1Yk1lbnUiLCJzbGlkZVVwIiwic2xpZGVEb3duIiwibW91c2VlbnRlciIsImlubmVyV2lkdGgiLCJvZmZzZXQiLCJsZWZ0IiwiY3NzIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJwb3NpdGlvbiIsImNsZWFyVGltZW91dCIsImRhdGEiLCJzZXRUaW1lb3V0IiwiY29uc29sZSIsImxvZyIsInRleHQiLCJuYW1lIiwiYXR0ciIsInNyYyIsImhyZWYiLCJwcmljZSIsIm9uU2FsZSIsIm9sZFByaWNlIiwiX2luaXQiLCJfbGFzdFBvcyIsInNpdGVTY3JvbGxUb3AiLCJfc2VsZiIsIl9tZW51IiwiX2FjdGlvbiIsIl9oZWFkZXIiLCJfaGlkZGVuQmxvY2tNZW51IiwiX2hlYWRlckhlaWdodCIsImlubmVySGVpZ2h0IiwiX3Nob3dCdG4iLCJfY2xvc2VCdG4iLCJfc2VhcmNoIiwiX29wZW5TZWFyY2giLCJfY2xvc2VTZWFyY2giLCJfZ2V0RnJlZSIsIl9zaXRlIiwiX2RvbSIsImRvY3VtZW50IiwiZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJfY2xvc2VTZWFyY2hCb3giLCJfb3Blbk1lbnUiLCJfY2xvc2VNZW51IiwiX29wZW5TZWFyY2hCb3giLCJzY3JvbGwiLCJlIiwiX2ZpeGVkSGVhZGVyIiwic2Nyb2xsVG9wIiwiRE9NTW91c2VTY3JvbGwiLCJkZWx0YSIsIm9yaWdpbmFsRXZlbnQiLCJkZXRhaWwiLCJkaXJlY3Rpb24iLCJfY2hlY2tTY3JvbGwiLCJtb3VzZXdoZWVsIiwid2hlZWxEZWx0YSIsInRvdWNobW92ZSIsImN1cnJlbnRQb3MiLCJ0b3VjaGVzIiwiY2xpZW50WSIsImtleWRvd24iLCJ3aGljaCIsImhlaWdodCIsIm92ZXJmbG93LXkiLCJlbGVtIiwiZm9jdXNvdXQiLCJfZ2xvYmFsV2luV2lkdGgiLCJfc2V0SGVpZ2h0IiwibWluSGVpZ2h0IiwiX3RvdGFsT3JkZXIiLCJmb3JtIiwiJHVwc2VsbHMiLCJ2YXJpYXRpb24iLCJ2YXJpYXRpb25Db3VudCIsInN5bWJvbCIsImNvdW50ZXIiLCJ2YWwiLCJ0cmltIiwicGFyc2VGbG9hdCIsInNwbGl0Iiwiam9pbiIsInNlbGVjdCIsImFwcGVuZCIsImh0bWwiLCJQb3B1cCIsIl9wb3B1cFBhZGRpbmciLCJfYnRuU2hvdyIsIl9idG5DbG9zZSIsIl93cmFwIiwiX2NvbnRlbnRzIiwiX3Njcm9sbENvbnRlaW5lciIsIl90aW1lciIsIl9jZW50ZXJXcmFwIiwidG9wIiwiX2dldFNjcm9sbFdpZHRoIiwic2Nyb2xsQmFyV2lkdGgiLCJzY3JvbGxEaXYiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYm9keSIsImFwcGVuZENoaWxkIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsInJlbW92ZUNoaWxkIiwiX2hpZGUiLCJvdmVyZmxvd1kiLCJwYWRkaW5nUmlnaHQiLCJfb25FdmVudHMiLCJfc2hvdyIsIl9zZXRQb3B1cENvbnRlbnQiLCJjdXJDb250ZW50IiwiZmlsdGVyIiwiZGlzcGxheSIsIlByb2R1Y3RTbGlkZXIiLCJGZWF0dXJlZFByb2R1Y3RzU2xpZGVyIiwiX2NvbnN0cnVjdG9yIiwiX2luaXRTbGlkZXIiLCJzbGljayIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2Nyb2xsIiwiYXJyb3dzIiwiaW5maW5pdGUiLCJhc05hdkZvciIsImRvdHMiLCJjZW50ZXJNb2RlIiwiZm9jdXNPblNlbGVjdCIsInJlc3BvbnNpdmUiLCJicmVha3BvaW50Iiwic2V0dGluZ3MiLCJfc2xpZGVyIiwiX2ZsYWciLCJfcGFnaW5hdGlvbiIsIl9wcmV2IiwiX25leHQiLCJfbG9vcCIsIl9kZXN0cm95IiwiX2FkZFNvbWVQYXJhbXMiLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhcHBlbmREb3RzIiwiV2Vic3RlcnNTZWxlY3QiLCJvcHRpb25UeXBlIiwic2hvd1R5cGUiLCJwYXJhbXMiLCJfcG9wdXAiLCJfc2Nyb2xsIiwiX29wdGlvblR5cGUiLCJfc2hvd1R5cGUiLCJfdmlzaWJsZSIsInZpc2libGUiLCJfZGV2aWNlIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl90ZXh0IiwiX2JvZHkiLCJfb3BlbmVkIiwiX2FkZFdyYXAiLCJjdXJUZXh0Iiwib3BhY2l0eSIsIndyYXAiLCJiZWZvcmUiLCJlcSIsIl9oaWRlUG9wdXAiLCJzdG9wIiwicmVtb3ZlIiwiZmFkZU91dCIsIl9zZWxlY3RWaWV3VHlwZSIsInByZXYiLCJfc2hvd1BvcHVwIiwiX3NldE1vYmlsZVZpZXciLCJfc2V0Q3VzdG9tMSIsInNlbGVjdHMiLCJsaXN0IiwibWF4SGVpZ2h0IiwiY3VySW5kZXgiLCJpbmRleCIsImlkIiwicm91bmQiLCJyYW5kb20iLCJjaGVja09wZW5lZCIsImNsb3NlIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiYW5pbWF0ZSIsInRyaWdnZXIiLCJTZWFyY2giLCJfaW5wdXQiLCJfcmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiX3BhdGgiLCJzdWdnZXN0U2VsZWN0ZWQiLCJjb3VudEl0ZW1zIiwidmFsdWVJbnB1dCIsIl9yZXN1bHQiLCJrZXl1cCIsIkkiLCJrZXlDb2RlIiwic3VibWl0IiwiX2FqYXhSZXF1ZXN0IiwibG9jYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsIl9rZXlBY3RpdmF0ZSIsIl9hZGREYXRhIiwiY2F0ZWdvcmllcyIsImNhdGVnb3JpZXNBdmFpbGFiaWxpdHkiLCJwcm9kdWN0cyIsInByb2R1Y3RzQXZhaWxhYmlsaXR5IiwiYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyIiwicHJvZHVjdHNDYXRlZ29yaWVzQXJyIiwiZmxhZyIsInByb2R1Y3RzV3JhcCIsInByb2R1Y3QiLCJwdXNoIiwibWFpbkNhdGVnb3J5IiwidXJsTWFpbkNhdGVnb3J5Iiwic3ViY2F0ZWdvcmllcyIsInVybFN1YmNhdGVnb3JpZXMiLCJyZXN1bHRTdHIiLCJzdWJjYXRlZ29yaWVzV3JhcCIsInVybENhdGVnb3J5IiwieiIsImluZGV4T2YiLCJjb3VudCIsImlucHV0IiwiYWJvcnQiLCJhamF4IiwidXJsIiwidmFsdWUiLCJhY3Rpb24iLCJkYXRhVHlwZSIsInR5cGUiLCJzdWNjZXNzIiwibXNnIiwiT2JqZWN0Iiwia2V5cyIsImVycm9yIiwic3RhdHVzVGV4dCIsIkZvcm1WYWxpZGF0b3IiLCJfZmllbGRzIiwiX2J0biIsIl9yYXRlIiwiX2FkZE5vdFRvdWNoZWRDbGFzcyIsIl92YWxpZGF0ZUZpZWxkIiwiZm9jdXMiLCJrZXlwcmVzcyIsImZpZWxkIiwiX21ha2VOb3RWYWxpZCIsIl9tYWtlVmFsaWQiLCJfdmFsaWRhdGVFbWFpbCIsImVtYWlsIiwicmUiLCJjaGVja1ZhbGlkIiwidmFsaWQiLCJSYXRlIiwiX2VsZW0iLCJnZXRFbGVtZW50QnlJZCIsIl9pbnB1dEhpZGRlblJhdGUiLCJfaW5pdFJhdGUiLCJyYXRlIiwiY3VycmVudFJhdGluZyIsIm1heFJhdGluZyIsImNhbGxiYWNrIiwicmF0aW5nIiwib25sb2FkIiwiUmV2aWV3R28iLCJfcmV2aWV3cyIsIl9zY3JvbGxEb3duIiwiaGVpZ2h0SGVhZGVyIiwiZHVyYXRpb24iLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwiQWRkVG9DYXJ0QW5pbWF0aW9uIiwiX2NhcnQiLCJfYW5pbWF0ZWRBZGRpbmciLCJwaWMiLCJwYWdlWCIsInBhZ2VZIiwiUHJvZHVjdHNVcFNhbHMiLCJfb2JqVmFsdWUiLCJfYXJyIiwiX2lucHV0SGlkZGVuIiwiX3NlbGVjdHNVcFNhbHMiLCJfdG90YWxQcmljZSIsImNoYW5nZSIsImdldEF0dHJpYnV0ZSIsIl93cml0ZUluSGlkZGVuIiwiX3JlcXVlc3RVcFNhbHNQcm9kdWN0IiwibSIsInRvdGFsUHJpY2UiLCJhbGVydCIsIl9zdGFydFZpZXciLCJzdHJGaW5pc2giLCJzdHJWYWx1ZXMiLCJzdHJGdWxsIiwiYXJyQWxsIiwia2V5IiwiaXRlbSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FFSSxHQUFJQSxJQUFtQixDQUV2QkMsUUFBT0MsVUFBVUMsWUFBYyxTQUFTQyxFQUFHQyxFQUFHQyxHQUMxQyxHQUFJQyxHQUFJQyxLQUNKSixFQUFJSyxNQUFNTCxFQUFJTSxLQUFLQyxJQUFJUCxJQUFNLEVBQUlBLEVBQ2pDQyxFQUFTTyxRQUFMUCxFQUFpQixJQUFNQSxFQUMzQkMsRUFBU00sUUFBTE4sRUFBaUIsSUFB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Z0QsWUFDaEJxRCxNQUFNLGdCQU10QkMsRUFBYSxXQUVULElBQUssR0FBSW5WLEdBQUksRUFBR0EsR0FBSTBVLEVBQWVyVSxPQUFPLEVBQUdMLElBQU0sQ0FFL0MsR0FBSThILEdBQVM0TSxFQUFlMVUsR0FDeEJ3RCxFQUFPc0UsRUFBTytNLGFBQWEsUUFDM0J6RCxFQUFRdEosRUFBTyxHQUFHc0osS0FFdEIwRCxHQUFldFIsRUFBTTROLEtBSzdCMEQsRUFBaUIsU0FBU3RSLEVBQU00TixHQUU1Qm1ELEVBQVUvUSxJQUFTNE4sRUFHbkIsSUFBSWdFLEdBQVksR0FDWkMsRUFBWSxHQUNaQyxFQUFVLEdBQ1ZDLElBRUosS0FBSyxHQUFJQyxLQUFPakIsR0FBWSxDQUV4QkMsSUFFQSxJQUFJaUIsR0FBT2xCLEVBQVdpQixFQUV0QmhCLEdBQUtuRSxLQUFNb0YsRUFFWCxLQUFLLEdBQUl6VixHQUFJLEVBQUdBLEdBQUt3VSxFQUFLblUsT0FBTyxFQUFHTCxJQUVoQ3FWLEVBQVliLEVBQUszTSxLQUFLLElBSTFCeU4sR0FBVUUsRUFBTSxJQUFNSCxFQUV0QkUsRUFBT2xGLEtBQUtpRixHQUVaRixFQUFZRyxFQUFPMU4sS0FBSyxLQUk1QjRNLEVBQWFoTixJQUFLMk4sSUFHdEJyUixFQUFRLFdBQ0o1QyxFQUFLLEdBQUdELElBQU1nRCxFQUNkdEMsSUFDQXVULElBUVJwUiIsImZpbGUiOiJwcm9kdWN0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICB2YXIgZ2xvYmFsU2Nyb2xsRmxhZyA9IHRydWU7XHJcblxyXG4gICAgTnVtYmVyLnByb3RvdHlwZS5mb3JtYXRNb25leSA9IGZ1bmN0aW9uKGMsIGQsIHQpe1xyXG4gICAgICAgIHZhciBuID0gdGhpcyxcclxuICAgICAgICAgICAgYyA9IGlzTmFOKGMgPSBNYXRoLmFicyhjKSkgPyAyIDogYyxcclxuICAgICAgICAgICAgZCA9IGQgPT0gdW5kZWZpbmVkID8gXCIuXCIgOiBkLFxyXG4gICAgICAgICAgICB0ID0gdCA9PSB1bmRlZmluZWQgPyBcIixcIiA6IHQsXHJcbiAgICAgICAgICAgIHMgPSBuIDwgMCA/IFwiLVwiIDogXCJcIixcclxuICAgICAgICAgICAgaSA9IFN0cmluZyhwYXJzZUludChuID0gTWF0aC5hYnMoTnVtYmVyKG4pIHx8IDApLnRvRml4ZWQoYykpKSxcclxuICAgICAgICAgICAgaiA9IChqID0gaS5sZW5ndGgpID4gMyA/IGogJSAzIDogMDtcclxuICAgICAgICByZXR1cm4gcyArIChqID8gaS5zdWJzdHIoMCwgaikgKyB0IDogXCJcIikgKyBpLnN1YnN0cihqKS5yZXBsYWNlKC8oXFxkezN9KSg/PVxcZCkvZywgXCIkMVwiICsgdCkgKyAoYyA/IGQgKyBNYXRoLmFicyhuIC0gaSkudG9GaXhlZChjKS5zbGljZSgyKSA6IFwiXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgJCgnLnNpdGVfX21lbnUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBTdWJNZW51KCAkKHRoaXMpICk7XHJcbiAgICAgICAgICAgIG5ldyBNZW51KCAkKHRoaXMpICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJCgnLm5vdC1mb3VuZCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEZ1bGxIZWlnaHQoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkKCcuY29uZmlybWF0aW9uJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgRnVsbEhlaWdodCggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICQoJyN3cHNsLXN0b3JlcycpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5wZXJmZWN0U2Nyb2xsYmFyKHtcclxuICAgICAgICAgICAgICAgIHdoZWVsUHJvcGFnYXRpb246IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJCgnLmNoZWNrb3V0JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgQ2hlY2tvdXRIZWlnaHQoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAkKCcucHJvZHVjdF9faXRlbXMnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBDaGFuZ2VQcmljZSggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBTdWJNZW51ID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfaXRlbXMgPSBfb2JqLmZpbmQoJy5zaXRlX19tZW51LWl0ZW0nKSxcclxuICAgICAgICAgICAgX2Fycm93ID0gX29iai5maW5kKCcuc2l0ZV9fbWVudS1pY29uJyksXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsLFxyXG4gICAgICAgICAgICBfc3RhcnRXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9zdGFydFdpbldpZHRoID4gX3dpbmRvdy53aWR0aCgpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdGFydFdpbldpZHRoID0gX3dpbmRvdy53aWR0aCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF93aW5kb3cuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsICcuc2l0ZV9fbWVudS1pY29uJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBqUXVlcnkod2luZG93KS53aWR0aCgpIDwgMTAwMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0galF1ZXJ5KHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gY3VySXRlbS5wYXJlbnQoJ2xpJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmVudC5oYXNDbGFzcygnb3BlbmVkJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFkZENsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfYXJyb3cub24oIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSBqUXVlcnkodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudHMoJ2xpJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51ID0gcGFyZW50LmZpbmQoJy5zaXRlX19tZW51LXN1YicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8IDEwMjQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmVudC5oYXNDbGFzcygnb3BlbmVkJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5zbGlkZVVwKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFkZENsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51LnNsaWRlRG93bigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9pdGVtcy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBjdXJJdGVtLnBhcmVudCgndWwnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS5oYXNDbGFzcygnc2l0ZV9fbWVudS1pdGVtX3N1YicpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1Yk1lbnUgPSBjdXJJdGVtLmZpbmQoJy5zaXRlX19tZW51LXN1YicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggKCBfd2luZG93LndpZHRoKCkgLSAoIHN1Yk1lbnUuaW5uZXJXaWR0aCgpICsgY3VySXRlbS5vZmZzZXQoKS5sZWZ0ICkgKSA8IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggKCAoIGN1ckl0ZW0ub2Zmc2V0KCkubGVmdCArIGN1ckl0ZW0uaW5uZXJXaWR0aCgpICkgLSBzdWJNZW51LmlubmVyV2lkdGgoKSApIDwgMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJNZW51LmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICc1MCUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybSc6ICd0cmFuc2xhdGVYKC01MCUpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZVgoLTUwJSknXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogY3VySXRlbS5wb3NpdGlvbigpLmxlZnQgLSBzdWJNZW51LmlubmVyV2lkdGgoKSArIGN1ckl0ZW0uaW5uZXJXaWR0aCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGN1ckl0ZW0ucG9zaXRpb24oKS5sZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgJCgnW2RhdGEtcHJvZHVjdF0nKS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5mZWF0dXJlZC1wcm9kdWN0X19sb2FkaW5nJykuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGN1ckl0ZW0uZGF0YSgncHJvZHVjdCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYoICQoJy5mZWF0dXJlZC1wcm9kdWN0X19sb2FkaW5nJykuaGFzQ2xhc3MoJ3Zpc2libGUnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fdGl0bGUnKS50ZXh0KGRhdGEubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcGljIGltZycpLmF0dHIoJ3NyYycsIGRhdGEuc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5idG4nKS5hdHRyKCdocmVmJywgZGF0YS5ocmVmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZSBzcGFuJykudGV4dChkYXRhLnByaWNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBkYXRhLm9uU2FsZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcmVtYXJrJykuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3QnKS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcmVtYXJrJykucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGRhdGEub2xkUHJpY2UgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0JykuZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3ByaWNlIGRlbCcpLnRleHQoZGF0YS5vbGRQcmljZSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdCcpLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZSBkZWwnKS5hZGRDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTYwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5mZWF0dXJlZC1wcm9kdWN0X19sb2FkaW5nJykucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9vYmoub24oICdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCcub3BlbmVkJykucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX29iai5maW5kKCd1bCcpLm9uKCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLm9wZW5lZCcpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9vYmouZmluZCgnbGknKS5vbiggJ21vdXNlbGVhdmUnLCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpID49IDEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcbiAgICB2YXIgTWVudSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfbWVudSA9IG9iaixcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcclxuICAgICAgICAgICAgX2FjdGlvbiA9IGZhbHNlLFxyXG4gICAgICAgICAgICBfYWN0aW9uU2Nyb2xsID0gZmFsc2UsXHJcbiAgICAgICAgICAgIF9sYXN0UG9zLFxyXG4gICAgICAgICAgICBfaGVhZGVyID0gJCgnLnNpdGVfX2hlYWRlcicpLFxyXG4gICAgICAgICAgICBfaGlkZGVuQmxvY2tNZW51ID0gJCgnLnNpdGVfX2hpZGRlbi1pdGVtcycpLFxyXG4gICAgICAgICAgICBfaGVhZGVySGVpZ2h0ID0gX2hlYWRlci5pbm5lckhlaWdodCgpLFxyXG4gICAgICAgICAgICBfc2hvd0J0biA9ICQoJy5zaXRlX19oZWFkZXItYnRuJyksXHJcbiAgICAgICAgICAgIF9jbG9zZUJ0biA9ICQoJy5zaXRlX19oaWRkZW4tY2xvc2UnKSxcclxuICAgICAgICAgICAgX3NlYXJjaCA9ICQoJy5zZWFyY2gnKSxcclxuICAgICAgICAgICAgX29wZW5TZWFyY2ggPSAkKCcuc2VhcmNoLWJ0bicpLFxyXG4gICAgICAgICAgICBfY2xvc2VTZWFyY2ggPSAkKCcuc2VhcmNoX19jYW5jZWwnKSxcclxuICAgICAgICAgICAgX2dldEZyZWUgPSAkKCcuc2l0ZV9faGlkZGVuLWJ0bicpLFxyXG4gICAgICAgICAgICBfc2l0ZSA9ICQoJy5zaXRlJyksXHJcbiAgICAgICAgICAgIF9kb20gPSAkKCAnaHRtbCcgKSxcclxuICAgICAgICAgICAgc2l0ZVNjcm9sbFRvcCxcclxuICAgICAgICAgICAgX2NvbnRlbnQgPSAkKCcuc2l0ZV9fY29udGVudCcpLFxyXG4gICAgICAgICAgICBfbGFzdFNjcm9sbFRvcCA9IDA7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLnNlYXJjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCBldmVudCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYm9keVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VTZWFyY2hCb3goKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2hvd0J0bi5vbih7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vcGVuTWVudSgkKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfY2xvc2VCdG4ub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VNZW51KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgX29wZW5TZWFyY2gub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfb3BlblNlYXJjaEJveCgkKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfY2xvc2VTZWFyY2gub24oe1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2xvc2VTZWFyY2hCb3goKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiBmdW5jdGlvbiAoIGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9maXhlZEhlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYWN0aW9uID0gX3dpbmRvdy5zY3JvbGxUb3AoKSA+PSBfaGVhZGVySGVpZ2h0O1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LnNjcm9sbFRvcCgpID09IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGVhZGVyLnJlbW92ZUNsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBET01Nb3VzZVNjcm9sbDogZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IGUub3JpZ2luYWxFdmVudC5kZXRhaWw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoZGVsdGEgPiAwKSA/IDEgOiAtMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoZGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZXdoZWVsOiBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSAoZGVsdGEgPiAwKSA/IC0xIDogMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2hlY2tTY3JvbGwoZGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvcyA9IGUub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBvcyA+IF9sYXN0UG9zKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKC0xKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPCBfbGFzdFBvcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sYXN0UG9zID0gY3VycmVudFBvcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUud2hpY2gpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NoZWNrU2Nyb2xsKC0xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzQgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzUgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzYgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jaGVja1Njcm9sbCgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCk+PTEwMjQgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpdGUuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfc2l0ZS5oZWlnaHQoKSA+IF93aW5kb3cuaGVpZ2h0KCkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kb20uY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb3ZlcmZsb3cteSc6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2hlY2tTY3JvbGwgPSBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA+IDAgJiYgIV9oZWFkZXIuaGFzQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKSAmJiAhX3Nob3dCdG4uaGFzQ2xhc3MoJ29wZW5lZCcpICYmIF9hY3Rpb24gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA8IDAgJiYgX2hlYWRlci5oYXNDbGFzcygnc2l0ZV9faGVhZGVyX2hpZGRlbicpICYmICFfc2hvd0J0bi5oYXNDbGFzcygnb3BlbmVkJykgJiYgX2FjdGlvbiAmJiBnbG9iYWxTY3JvbGxGbGFnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9oZWFkZXIucmVtb3ZlQ2xhc3MoJ3NpdGVfX2hlYWRlcl9oaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfZml4ZWRIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF93aW5kb3cuc2Nyb2xsVG9wKCkgPiBfaGVhZGVySGVpZ2h0ICsgMTUwICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5hZGRDbGFzcygnZml4ZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2hlYWRlci5yZW1vdmVDbGFzcygnZml4ZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb3Blbk1lbnUgPSBmdW5jdGlvbiAoZWxlbSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gZWxlbTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VySXRlbS5oYXNDbGFzcygnb3BlbmVkJykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudS5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VySXRlbS5hZGRDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hpZGRlbkJsb2NrTWVudS5hZGRDbGFzcygnb3BlbmVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNpdGVTY3JvbGxUb3AgPSBfd2luZG93LnNjcm9sbFRvcCgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9zaXRlLmhlaWdodCgpID4gX3dpbmRvdy5oZWlnaHQoKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJ3Njcm9sbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2l0ZS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9vcGVuU2VhcmNoQm94ID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9IGVsZW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1ckl0ZW0uaGFzQ2xhc3MoJ29wZW5lZCcpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0ucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zZWFyY2gucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9nZXRGcmVlLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJJdGVtLmFkZENsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBfc2VhcmNoLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBfZ2V0RnJlZS5hZGRDbGFzcygnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2Nsb3NlTWVudSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2hvd0J0bi5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XHJcbiAgICAgICAgICAgICAgICBfaGlkZGVuQmxvY2tNZW51LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcclxuICAgICAgICAgICAgICAgIF9zZWFyY2guZmluZCgnaW5wdXQnKS5mb2N1c291dCgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBfc2l0ZS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJydcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9zaXRlLmhlaWdodCgpID4gX3dpbmRvdy5oZWlnaHQoKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvdmVyZmxvdy15JzogJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3dpbmRvdy5zY3JvbGxUb3AoIHNpdGVTY3JvbGxUb3AgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9LCAxMCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfY2xvc2VTZWFyY2hCb3ggPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX29wZW5TZWFyY2gucmVtb3ZlQ2xhc3MoJ29wZW5lZCcpO1xyXG4gICAgICAgICAgICAgICAgX3NlYXJjaC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICBfZ2V0RnJlZS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9tZW51WzBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgX2ZpeGVkSGVhZGVyKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIEZ1bGxIZWlnaHQgPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIF9nbG9iYWxXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBfZ2xvYmFsV2luV2lkdGggIT0gX3dpbmRvdy53aWR0aCgpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nbG9iYWxXaW5XaWR0aCA9IF93aW5kb3cud2lkdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0SGVpZ2h0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX29iai5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6ICcnXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkhlaWdodDogX3dpbmRvdy5oZWlnaHQoKSAtICQoJy5zaXRlX19oZWFkZXInKS5pbm5lckhlaWdodCgpIC0gJCgnLnNpdGVfX2Zvb3RlcicpLmlubmVySGVpZ2h0KCkgLSAkKCcuYnJlYWRjcnVtYnMnKS5pbm5lckhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIENoZWNrb3V0SGVpZ2h0ID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfdG90YWxPcmRlciA9IF9vYmouZmluZCgnLnRvdGFsLW9yZGVyJyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfYWRkRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluSGVpZ2h0OiBfdG90YWxPcmRlci5pbm5lckhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIF9zZXRIZWlnaHQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBDaGFuZ2VQcmljZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgdmFyIGZvcm0gPSBvYmouZmluZCgnZm9ybScpO1xyXG5cclxuXHJcbiAgICAgICAgZm9ybS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgIC8vY29uc29sZS5sb2codmFyaWF0aW9uQ291bnQpO1xyXG4gICAgICAgICAgICB2YXIgJHVwc2VsbHMgPSBvYmouZmluZCgnZm9ybT4ud2Vic3RlcnMtc2VsZWN0IHNlbGVjdCcpLFxyXG4gICAgICAgICAgICAgICAgdmFyaWF0aW9uID0gZm9ybS5maW5kKCcudmFyaWF0aW9ucyBzZWxlY3QnKSxcclxuICAgICAgICAgICAgICAgIHZhcmlhdGlvbkNvdW50ID0gdmFyaWF0aW9uLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIHByaWNlID0gb2JqLmF0dHIoJ2RhdGEtcHJpY2UnKSxcclxuICAgICAgICAgICAgICAgIHN5bWJvbCA9ICQoJy5wcm9kdWN0X19wcmljZT5zcGFuPnNwYW4nKS50ZXh0KCk7XHJcblxyXG4gICAgICAgICAgIGlmKHZhcmlhdGlvbkNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICB2YXIgY291bnRlciA9IDA7XHJcbiAgICAgICAgICAgICAgIHZhcmlhdGlvbi5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgIGlmKCQoIHRoaXMgKS52YWwoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXIrKztcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICBpZihjb3VudGVyICE9PSB2YXJpYXRpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgaWYoZm9ybS5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdF9fcHJpY2UgLnByaWNlJykudGV4dCgpLnRyaW0oKSAgIT09ICcnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9ICQoJy5wcmljZT5zcGFuJykudGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbCA9ICQoJy5wcmljZT5zcGFuPnNwYW4nKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHByaWNlKTtcclxuICAgICAgICAgICAgcHJpY2UgPSBwYXJzZUZsb2F0KChwcmljZS5zbGljZSgxKS5zcGxpdCgnLCcpKS5qb2luKCcnKSk7XHJcblxyXG4gICAgICAgICAgICAkdXBzZWxscy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3QgPSAkKCB0aGlzICkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoc2VsZWN0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5maW5kKCdvcHRpb24nKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoJCh0aGlzKS52YWwoKSA9PT0gc2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZSA9IHByaWNlICsgKyQodGhpcykuZGF0YSgncHJpY2UnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICQoJy5wcmljZScpLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZT5zdHJvbmcnKS5sZW5ndGggPT09IDApO1xyXG4gICAgICAgICAgICBpZihmb3JtLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZT5zdHJvbmcnKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGZvcm0uZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3ByaWNlJykuYXBwZW5kKCc8c3Ryb25nIGNsYXNzPVwicHJvZHVjdF9fcHJpY2VcIj48L3N0cm9uZz4nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGZvcm0uZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RfX3ByaWNlPnN0cm9uZycpLmh0bWwoJzxzcGFuPicrc3ltYm9sKyc8L3NwYW4+JytwcmljZS5mb3JtYXRNb25leSgyLCAnLicsICcsJykpO1xyXG5cclxuICAgICAgICAgICAvKmlmKChjb3VudGVyID09PSB2YXJpYXRpb24ubGVuZ3RoKSAmJiAodmFyaWF0aW9uLmxlbmd0aCA+IDApKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgdmFyIHByaWNlID0gJCgnLnByaWNlPnNwYW4nKS50ZXh0KCksXHJcbiAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSAkKCcucHJpY2U+c3Bhbj5zcGFuJykudGV4dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgcHJpY2UgPSBwYXJzZUZsb2F0KChwcmljZS5zbGljZSgxKS5zcGxpdCgnLCcpKS5qb2luKCcnKSk7XHJcblxyXG4gICAgICAgICAgICAgICAkdXBzZWxscy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3QgPSAkKCB0aGlzICkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5maW5kKCdvcHRpb24nKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJCh0aGlzKS52YWwoKSA9PT0gc2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZSArPSAkKHRoaXMpLmRhdGEoJ3ByaWNlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICQoJy5wcmljZScpLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgICAgICAgICQoJy5mZWF0dXJlZC1wcm9kdWN0X19wcmljZT5zdHJvbmcnKS5odG1sKCc8c3Bhbj4nK3N5bWJvbCsnPC9zcGFuPicrcHJpY2UuZm9ybWF0TW9uZXkoMiwgJy4nLCAnLCcpKTtcclxuXHJcbiAgICAgICAgICAgfSovXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG59ICkoKTtcclxuXHJcbiIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAkKCBmdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAkKCAnLnBvcHVwJyApLmVhY2goZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgIG5ldyBQb3B1cCgkKHRoaXMpKTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIFBvcHVwID0gZnVuY3Rpb24oIG9iaiApe1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9wb3B1cFBhZGRpbmcgPSA0MCxcclxuICAgICAgICAgICAgX2J0blNob3cgPSAgJCggJy5wb3B1cF9fb3BlbicgKSxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX2J0bkNsb3NlID0gX29iai5maW5kKCAnLnBvcHVwX19jbG9zZSwgLnBvcHVwX19jYW5jZWwnICksXHJcbiAgICAgICAgICAgIF93cmFwID0gX29iai5maW5kKCAnLnBvcHVwX193cmFwJyApLFxyXG4gICAgICAgICAgICBfY29udGVudHMgPSBfb2JqLmZpbmQoICcucG9wdXBfX2NvbnRlbnQnICksXHJcbiAgICAgICAgICAgIF9zY3JvbGxDb250ZWluZXIgPSAkKCAnaHRtbCcgKSxcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQoIHdpbmRvdyApLFxyXG4gICAgICAgICAgICBfdGltZXIgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpe30sIDEgKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2NlbnRlcldyYXAgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgaWYgKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApIC0gX3dyYXAuaGVpZ2h0KCkgPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6ICggKCBfd2luZG93LmhlaWdodCgpIC0gKCBfcG9wdXBQYWRkaW5nICogMiApICkgLSBfd3JhcC5oZWlnaHQoKSApIC8gMiB9ICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF93cmFwLmNzcyggeyB0b3A6IDAgfSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfZ2V0U2Nyb2xsV2lkdGggPSBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyksXHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQmFyV2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9ICdwb3B1cF9fc2Nyb2xsYmFyLW1lYXN1cmUnO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIHNjcm9sbERpdiApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNjcm9sbEJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2Nyb2xsQmFyV2lkdGg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9oaWRlID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnaGlkZGVuJ1xyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lci5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDBcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfb2JqLnJlbW92ZUNsYXNzKCAncG9wdXBfb3BlbmVkJyApO1xyXG4gICAgICAgICAgICAgICAgX29iai5hZGRDbGFzcyggJ3BvcHVwX2hpZGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3RpbWVyID0gc2V0VGltZW91dCggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX29iai5jc3MgKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiAnYXV0bydcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX29iai5yZW1vdmVDbGFzcyggJ3BvcHVwX2hpZGUnICk7XHJcbiAgICAgICAgICAgICAgICB9LCAzMDAgKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2NlbnRlcldyYXAoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfYnRuU2hvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2hvdyggJCggdGhpcyApLmF0dHIoICdkYXRhLXBvcHVwJyApICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfY29udGVudHMuZmluZCgnPmRpdicpLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCBlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX29iai5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgX2J0bkNsb3NlLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zaG93ID0gZnVuY3Rpb24oIGNsYXNzTmFtZSApe1xyXG4gICAgICAgICAgICAgICAgX3NldFBvcHVwQ29udGVudCggY2xhc3NOYW1lICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3Njcm9sbENvbnRlaW5lci5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6ICdoaWRkZW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogX2dldFNjcm9sbFdpZHRoKClcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgIF9vYmouYWRkQ2xhc3MoICdwb3B1cF9vcGVuZWQnICk7XHJcbiAgICAgICAgICAgICAgICBfY2VudGVyV3JhcCgpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldFBvcHVwQ29udGVudCA9IGZ1bmN0aW9uKCBjbGFzc05hbWUgKXtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJDb250ZW50ID0gX2NvbnRlbnRzLmZpbHRlciggJy5wb3B1cF9fJyArIGNsYXNzTmFtZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9jb250ZW50cy5jc3MoIHsgZGlzcGxheTogJ25vbmUnIH0gKTtcclxuICAgICAgICAgICAgICAgIGN1ckNvbnRlbnQuY3NzKCB7IGRpc3BsYXk6ICdibG9jaycgfSApO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG59ICkoKTtcclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG4oIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAkLmVhY2goICQoICcucHJvZHVjdF9fc2xpZGVyJyApLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBQcm9kdWN0U2xpZGVyICggJCggdGhpcyApICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCAnLmZlYXR1cmVkLXByb2R1Y3RzJyApLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBGZWF0dXJlZFByb2R1Y3RzU2xpZGVyICggJCggdGhpcyApICk7XHJcblxyXG4gICAgICAgIH0gKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBQcm9kdWN0U2xpZGVyID0gZnVuY3Rpb24oIG9iaiApIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfb2JqID0gb2JqO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfY29uc3RydWN0b3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcclxuICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0U2xpZGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICQoJy5zbGlkZXItZm9yJykuc2xpY2soIHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYXNOYXZGb3I6ICcuc2xpZGVyLW5hdidcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJCgnLnNsaWRlci1uYXYnKS5zbGljaygge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNCxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXNOYXZGb3I6ICcuc2xpZGVyLWZvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTM2MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogNFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA0MTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBfY29uc3RydWN0b3IoKTtcclxuICAgIH07XHJcbiAgICB2YXIgRmVhdHVyZWRQcm9kdWN0c1NsaWRlciA9IGZ1bmN0aW9uKCBvYmogKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgX29iaiA9IG9iaixcclxuICAgICAgICAgICAgX3NsaWRlcixcclxuICAgICAgICAgICAgX3dpbmRvdyA9ICQod2luZG93KSxcclxuICAgICAgICAgICAgX2ZsYWcsXHJcbiAgICAgICAgICAgIF9wYWdpbmF0aW9uID0gX29iai5maW5kKCcuc3dpcGVyLXBhZ2luYXRpb24nKSxcclxuICAgICAgICAgICAgX3ByZXYgPSBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLXByZXYnKSxcclxuICAgICAgICAgICAgX25leHQgPSBfb2JqLmZpbmQoJy5zd2lwZXItYnV0dG9uLW5leHQnKSxcclxuICAgICAgICAgICAgX2xvb3AgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBfb2JqWyAwIF0ub2JqID0gX3NlbGY7XHJcbiAgICAgICAgICAgICAgICBfYWRkRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF93aW5kb3cud2lkdGgoKSA8PSA3NjggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9mbGFnID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2ZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIF9pbml0U2xpZGVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfd2luZG93Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplOiBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX3dpbmRvdy53aWR0aCgpIDw9IDc2OCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggX2ZsYWcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Rlc3Ryb3koKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhX2ZsYWcgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaW5pdFNsaWRlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9zbGlkZXIuc2xpY2soJ3Vuc2xpY2snKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0U2xpZGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9hZGRTb21lUGFyYW1zKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3NsaWRlciA9ICQoJy5mZWF0dXJlZC1wcm9kdWN0c19fd3JhcHBlcicpLnNsaWNrKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogNTAwMCxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2QXJyb3c6IF9wcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRBcnJvdzogX25leHQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kRG90czogIF9wYWdpbmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTQ0MCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfYWRkU29tZVBhcmFtcyA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfd2luZG93LndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIF9vYmouZmluZCgnLmZlYXR1cmVkLXByb2R1Y3RzX19zbGlkZScpLmxlbmd0aCA+PSA0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3AgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlICBpZiggX3dpbmRvdy53aWR0aCgpID49IDE0MjUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBfb2JqLmZpbmQoJy5mZWF0dXJlZC1wcm9kdWN0c19fc2xpZGUnKS5sZW5ndGggPj0gNSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZighX2xvb3ApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcuZmVhdHVyZWQtcHJvZHVjdHNfX2NvbnRyb2xzJykuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIF9jb25zdHJ1Y3RvcigpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpO1xyXG4iLCIoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJCggZnVuY3Rpb24oKXtcclxuICAgICAgICAkKCAnc2VsZWN0JyApLmVhY2goIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIG5ldyBXZWJzdGVyc1NlbGVjdCgge1xyXG4gICAgICAgICAgICAgICAgb2JqOiAkKCB0aGlzICksXHJcbiAgICAgICAgICAgICAgICBvcHRpb25UeXBlOiAxLFxyXG4gICAgICAgICAgICAgICAgc2hvd1R5cGU6IDJcclxuICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdmFyIFdlYnN0ZXJzU2VsZWN0ID0gZnVuY3Rpb24oIHBhcmFtcyApe1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgIF9vYmogPSBwYXJhbXMub2JqLFxyXG4gICAgICAgICAgICBfb3B0aW9uVHlwZSA9IHBhcmFtcy5vcHRpb25UeXBlIHx8IDAsXHJcbiAgICAgICAgICAgIF9zaG93VHlwZSA9IHBhcmFtcy5zaG93VHlwZSB8fCAwLFxyXG4gICAgICAgICAgICBfdmlzaWJsZSA9IHBhcmFtcy52aXNpYmxlIHx8IDUsXHJcbiAgICAgICAgICAgIF9kZXZpY2UgPSAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQgKSxcclxuICAgICAgICAgICAgX3RleHQgPSAkKCAnPHNwYW4gY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX2l0ZW1cIj48L3NwYW4+JyApLFxyXG4gICAgICAgICAgICBfd3JhcCA9ICQoICc8ZGl2IGNsYXNzPVwid2Vic3RlcnMtc2VsZWN0XCI+PC9kaXY+JyApLFxyXG4gICAgICAgICAgICBfd2luZG93ID0gJCggd2luZG93ICksXHJcbiAgICAgICAgICAgIF9ib2R5ID0gJCggJ2JvZHknICksXHJcbiAgICAgICAgICAgIF9vcGVuZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgX3BvcHVwLCBfc2Nyb2xsO1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xyXG4gICAgICAgIHZhciBfYWRkV3JhcCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VyVGV4dCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmoud3JhcCggX3dyYXAgKTtcclxuICAgICAgICAgICAgICAgIF93cmFwID0gX29iai5wYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgIF93cmFwLmFwcGVuZCggJzxkaXYgY2xhc3M9XCJ3ZWJzdGVycy1zZWxlY3RfX2Fycm93XCI+PC9kaXY+JyApO1xyXG4gICAgICAgICAgICAgICAgX29iai5iZWZvcmUoIF90ZXh0ICk7XHJcbiAgICAgICAgICAgICAgICBfb2JqLmZpbmQoICdvcHRpb24nICkuZWFjaCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQoIHRoaXMgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGN1ckl0ZW0uYXR0ciggJ3NlbGVjdGVkJyApID09ICdzZWxlY3RlZCcgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9IGN1ckl0ZW0udGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggY3VyVGV4dCA9PSAnJyApe1xyXG4gICAgICAgICAgICAgICAgICAgIGN1clRleHQgPSAgX29iai5maW5kKCAnb3B0aW9uJykuZXEoIDAgKS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGV4dC50ZXh0KCBjdXJUZXh0ICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9oaWRlUG9wdXAgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX29wZW5lZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCAhX3Nob3dUeXBlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIF9zaG93VHlwZSA9PSAxICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLnN0b3AoIHRydWUsIGZhbHNlICkuc2xpZGVVcCggMzAwLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMiApIHtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuc3RvcCggdHJ1ZSwgZmFsc2UgKS5mYWRlT3V0KCAzMDAsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wb3B1cC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3dyYXAucmVtb3ZlQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3Rfb3BlbmVkJyApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vYmpbIDAgXS5vYmogPSBfc2VsZjtcclxuXHJcbiAgICAgICAgICAgICAgICBfYWRkV3JhcCgpO1xyXG4gICAgICAgICAgICAgICAgX3NlbGVjdFZpZXdUeXBlKCk7XHJcbiAgICAgICAgICAgICAgICBfb25FdmVudHMoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX29uRXZlbnRzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIF9vYmoub24oICdjaGFuZ2UnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGV4dC50ZXh0KCAkKCB0aGlzICkuZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS50ZXh0KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcclxuICAgICAgICAgICAgICAgICAgICBcImNoYW5nZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic2VsZWN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoIHRoaXMpLnByZXYoKS50ZXh0KCAkKCB0aGlzICkuZmluZCggJ29wdGlvbjpzZWxlY3RlZCcgKS50ZXh0KCkgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfb3B0aW9uVHlwZSA9PSAxICYmICFfZGV2aWNlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAub24oIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsaWNrJzogZnVuY3Rpb24oIGUgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaG93UG9wdXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfYm9keS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfb3BlbmVkICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGlkZVBvcHVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgX3dpbmRvdy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICdzY3JvbGwnOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggX29wZW5lZCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NlbGVjdFZpZXdUeXBlID0gZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggIV9vcHRpb25UeXBlIHx8IF9kZXZpY2UgKXtcclxuICAgICAgICAgICAgICAgICAgICBfc2V0TW9iaWxlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfb3B0aW9uVHlwZSA9PSAxICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3NldEN1c3RvbTEoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX3NldEN1c3RvbTEgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3RfY3VzdG9tJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfc2V0TW9iaWxlVmlldyA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBfd3JhcC5hZGRDbGFzcyggJ3dlYnN0ZXJzLXNlbGVjdF9tb2JpbGUnICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zaG93UG9wdXAgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdHMgPSAkKCAnc2VsZWN0JyApLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgPSAkKCAnPHVsPjwvdWw+JyksXHJcbiAgICAgICAgICAgICAgICAgICAgY3VyU2Nyb2xsID0gX3dpbmRvdy5zY3JvbGxUb3AoKSxcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBfd3JhcC5vZmZzZXQoKSxcclxuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckluZGV4ID0gX29iai5maW5kKCAnb3B0aW9uOnNlbGVjdGVkJyApLmluZGV4KCksXHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBNYXRoLnJvdW5kKCBNYXRoLnJhbmRvbSgpICogMTAwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGVjdHMuZWFjaCggZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcyAhPT0gX29ialsgMCBdICYmIHRoaXMub2JqLmNoZWNrT3BlbmVkKCkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmouY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9vcGVuZWQgKXtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfb3BlbmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXAgPSAkKCAnPGRpdiBjbGFzcz1cIndlYnN0ZXJzLXNlbGVjdF9fcG9wdXBcIiBpZD1cIndlYnN0ZXJzLXNlbGVjdF9fcG9wdXAnICsgaWQgKyAnXCI+PC9kaXY+JyApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9vYmouZmluZCggJ29wdGlvbicgKS5lYWNoKCBmdW5jdGlvbiggaSApe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJJdGVtID0gJCggdGhpcyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggaSA9PSBjdXJJbmRleCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZCggJzxsaSBjbGFzcz1cImFjdGl2ZVwiPicgKyBjdXJJdGVtLnRleHQoKSArICc8L2xpPicgKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmFwcGVuZCggJzxsaT4nICsgY3VySXRlbS50ZXh0KCkgKyAnPC9saT4nICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfcG9wdXAuYXBwZW5kKCBsaXN0ICk7XHJcbiAgICAgICAgICAgICAgICBfYm9keS5hcHBlbmQoIF9wb3B1cCApO1xyXG4gICAgICAgICAgICAgICAgX3dyYXAuYWRkQ2xhc3MoICd3ZWJzdGVycy1zZWxlY3Rfb3BlbmVkJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogX3dyYXAub3V0ZXJXaWR0aCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogb2Zmc2V0LnRvcCArIF93cmFwLm91dGVySGVpZ2h0KClcclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSBfcG9wdXAub3V0ZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIGlmKCBtYXhIZWlnaHQgPiBfcG9wdXAuZmluZCggJ2xpJyApLmVxKCAwICkub3V0ZXJIZWlnaHQoKSAqIF92aXNpYmxlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgX3BvcHVwLmhlaWdodCggX3BvcHVwLmZpbmQoICdsaScgKS5lcSggMCApLm91dGVySGVpZ2h0KCkgKiBfdmlzaWJsZSApO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zY3JvbGwgPSBfcG9wdXAucGVyZmVjdFNjcm9sbGJhcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKCBfc2hvd1R5cGUgPT0gMSApe1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgICAgIF9wb3B1cC5zbGlkZURvd24oIDMwMCApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKCBfc2hvd1R5cGUgPT0gMiApIHtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuY3NzKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuMVxyXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICAgICBfcG9wdXAuYW5pbWF0ZSggeyBvcGFjaXR5OiAxIH0sIDMwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3BvcHVwLmZpbmQoICdsaScgKS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgICdjbGljayc6IGZ1bmN0aW9uKCBlICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICQoIHRoaXMgKS5pbmRleCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoudmFsKCBfb2JqLmZpbmQoICdvcHRpb24nICkuZXEoIGluZGV4ICkuYXR0ciggJ3ZhbHVlJyApICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoudHJpZ2dlciggJ2NoYW5nZScgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2hpZGVQb3B1cCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG4gICAgICAgIF9zZWxmLmNoZWNrT3BlbmVkID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIF9vcGVuZWQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBfc2VsZi5jbG9zZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIF9oaWRlUG9wdXAoKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgX2NvbnN0cnVjdG9yKCk7XHJcblxyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgJCgnLnNlYXJjaCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IFNlYXJjaCggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBTZWFyY2ggPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF9pbnB1dCA9IF9vYmouZmluZCgnaW5wdXRbdHlwZT1zZWFyY2hdJyksXHJcbiAgICAgICAgICAgIF9yZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXHJcbiAgICAgICAgICAgIF9wYXRoID0gX29iai5kYXRhKCdwYXRoJyksXHJcbiAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDAsXHJcbiAgICAgICAgICAgIGNvdW50SXRlbXMgPSAwLFxyXG4gICAgICAgICAgICB2YWx1ZUlucHV0ID0gX2lucHV0LnZhbCgpLFxyXG4gICAgICAgICAgICBfcmVzdWx0ID0gX29iai5maW5kKCcuc2VhcmNoX19yZXN1bHQnKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdmFyIF9hZGRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2lucHV0Lm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5dXA6IGZ1bmN0aW9uKEkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKHdpbmRvdykud2lkdGgoKSA+PSAxMDI0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChJLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5maWx0ZXIoJy5hY3RpdmUnKS5sZW5ndGggPT0gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vYmouZmluZCgnZm9ybScpLnN1Ym1pdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUlucHV0ID0gJCh0aGlzKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB2YWx1ZUlucHV0Lmxlbmd0aCA+PSBfb2JqLmRhdGEoJ3N5bWJvbHMnKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWpheFJlcXVlc3QoICQodGhpcyksIHZhbHVlSW5wdXQubGVuZ3RoKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkKHRoaXMpLnZhbCgpID09ICcnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAga2V5ZG93bjogZnVuY3Rpb24oSSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCcpLmh0bWwoJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJy50b3AtcHJvZHVjdHMnKS5odG1sKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggJCh3aW5kb3cpLndpZHRoKCkgPj0gMTAyNCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goIEkua2V5Q29kZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5maWx0ZXIoJy5hY3RpdmUnKS5sZW5ndGggPT0gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gX29iai5kYXRhKCdhY3Rpb24nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmZpbHRlcignLmFjdGl2ZScpLmZpbmQoJ2EnKS5hdHRyKCdocmVmJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEkucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBjb3VudEl0ZW1zID4gMCApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2tleUFjdGl2YXRlKCBJLmtleUNvZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggc3VnZ2VzdFNlbGVjdGVkID09IGNvdW50SXRlbXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSApO1xyXG4gICAgICAgICAgICAgICAgJCgnaHRtbCcpLmNsaWNrKCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICAgICAgICBcImJvZHlcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiggZXZlbnQgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGlja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiLnNlYXJjaF9fZm91bmQgbGlcIixcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVGV4dCA9IGN1ckl0ZW0uZmluZCgnYScpLnRleHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dC52YWwoY3VyVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJrZXlkb3duXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCIuc2VhcmNoX19mb3VuZCBsaVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKEkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goSS5rZXlDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2tleUFjdGl2YXRlID0gZnVuY3Rpb24obikge1xyXG5cclxuICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIF9vYmoucGFyZW50cygpLmhhc0NsYXNzKCdzaXRlX19mb290ZXInKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIG4gPT0gMzggJiYgc3VnZ2VzdFNlbGVjdGVkIDwgY291bnRJdGVtcyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Z2dlc3RTZWxlY3RlZCsrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuID09IDQwICYmIHN1Z2dlc3RTZWxlY3RlZCA+IDAgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzdWdnZXN0U2VsZWN0ZWQgPiAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmVxKCAtMSAtIChzdWdnZXN0U2VsZWN0ZWQgLSAxKSApLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbCggX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmVxKCAtMSAtIChzdWdnZXN0U2VsZWN0ZWQgLSAxKSApLmZpbmQoJ2EnKS50ZXh0KCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnB1dC52YWwoIHZhbHVlSW5wdXQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCBuID09IDQwICYmIHN1Z2dlc3RTZWxlY3RlZCA8IGNvdW50SXRlbXMgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0U2VsZWN0ZWQrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbiA9PSAzOCAmJiBzdWdnZXN0U2VsZWN0ZWQgPiAwICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdFNlbGVjdGVkLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggc3VnZ2VzdFNlbGVjdGVkID4gMCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnLnNlYXJjaF9fZm91bmQgbGknKS5lcSggc3VnZ2VzdFNlbGVjdGVkIC0gMSApLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbCggX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCBsaScpLmVxKCBzdWdnZXN0U2VsZWN0ZWQgLSAxICkuZmluZCgnYScpLnRleHQoKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0LnZhbCggdmFsdWVJbnB1dCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGREYXRhID0gZnVuY3Rpb24oIGRhdGEgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXMgPSBkYXRhLmNhdGVnb3JpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllc0F2YWlsYWJpbGl0eSA9IGNhdGVnb3JpZXMubGVuZ3RoICE9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHMgPSBkYXRhLnByb2R1Y3RzLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzQXZhaWxhYmlsaXR5ID0gcHJvZHVjdHMubGVuZ3RoICE9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsUHJvZHVjdHNDYXRlZ29yaWVzQXJyID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgZmxhZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYoIHByb2R1Y3RzQXZhaWxhYmlsaXR5ICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdHNXcmFwID0gJzxkaXYgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX3dyYXBcIj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2goIHByb2R1Y3RzLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9kdWN0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzV3JhcCArPSAnPGRpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9wLXByb2R1Y3RzX19pdGVtXCI+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX3BpY1wiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKCcrIHByb2R1Y3Quc3JjICsnKVwiPlxcXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0b3AtcHJvZHVjdHNfX3ByaWNlXCI+PGRlbD4nKyBwcm9kdWN0Lm9sZFByaWNlICsnPC9kZWw+ICcrIHByb2R1Y3QucHJpY2UgKyc8L3NwYW4+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRvcC1wcm9kdWN0c19faXRlbS10aXRsZVwiPicrIHByb2R1Y3QubmFtZSArJzwvaDM+XFxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCInKyBwcm9kdWN0LmhyZWYgKydcIiBjbGFzcz1cInRvcC1wcm9kdWN0c19fYnRuXCI+dmlldzwvYT5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhY2F0ZWdvcmllc0F2YWlsYWJpbGl0eSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxQcm9kdWN0c0NhdGVnb3JpZXNBcnIucHVzaCggW3Byb2R1Y3QuY2F0ZWdvcmllcy5tYWluQ2F0ZWdvcnksIHByb2R1Y3QuY2F0ZWdvcmllcy51cmxNYWluQ2F0ZWdvcnksIHByb2R1Y3QuY2F0ZWdvcmllcy5zdWJjYXRlZ29yaWVzLCBwcm9kdWN0LmNhdGVnb3JpZXMudXJsU3ViY2F0ZWdvcmllc10gKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0c1dyYXAgKz0gJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQuZmluZCgnZGl2JykuZXEoMSkuZmluZCgnLnRvcC1wcm9kdWN0cycpLmh0bWwoJzxoMiBjbGFzcz1cInRvcC1wcm9kdWN0c19fdGl0bGVcIj5Ub3AgUHJvZHVjdHM8L2gyPicgKyBwcm9kdWN0c1dyYXApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0U3RyID0gJzx1bCBjbGFzcz1cInNlYXJjaF9fZm91bmRcIj4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggY2F0ZWdvcmllc0F2YWlsYWJpbGl0eSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCggY2F0ZWdvcmllcywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YmNhdGVnb3JpZXMgPSB0aGlzLnN1YmNhdGVnb3JpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsU3ViY2F0ZWdvcmllcyA9IHRoaXMudXJsU3ViY2F0ZWdvcmllcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJjYXRlZ29yaWVzV3JhcCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzdWJjYXRlZ29yaWVzICE9IHVuZGVmaW5lZCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPD0gc3ViY2F0ZWdvcmllcy5sZW5ndGgtMTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJzxsaSBjbGFzcz1cInNlYXJjaF9fZm91bmQtc3ViXCI+PGEgaHJlZj1cIicrIHVybFN1YmNhdGVnb3JpZXNbaV0gKydcIj4nICsgc3ViY2F0ZWdvcmllc1tpXSArICc8L2E+PC9saT4nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0ciArPSAnPGxpPjxhIGhyZWY9XCInKyB0aGlzLnVybENhdGVnb3J5ICsnXCI+JysgdGhpcy5uYW1lICsnPC9hPjwvbGk+Jysgc3ViY2F0ZWdvcmllc1dyYXAgKycnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDw9IGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0Fyci5sZW5ndGgtMTsgaSsrICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBmbGFnICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyLnB1c2goYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3RzQ2F0ZWdvcmllc0Fycltwcm9kdWN0c0NhdGVnb3JpZXNBcnIubGVuZ3RoLTFdWzBdICE9IGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVswXSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdHNDYXRlZ29yaWVzQXJyLnB1c2goYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPD0gYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldLmxlbmd0aC0xOyBqKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgeiA9IDA7IHogPD0gYWxsUHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzJdLmxlbmd0aC0xOyB6KysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHByb2R1Y3RzQ2F0ZWdvcmllc0Fycltwcm9kdWN0c0NhdGVnb3JpZXNBcnIubGVuZ3RoLTFdWzJdLmluZGV4T2YoIGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXVt6XSkgPT0gLTEgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzQ2F0ZWdvcmllc0Fycltwcm9kdWN0c0NhdGVnb3JpZXNBcnIubGVuZ3RoLTFdWzJdLnB1c2goIGFsbFByb2R1Y3RzQ2F0ZWdvcmllc0FycltpXVsyXVt6XSApXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8PSBwcm9kdWN0c0NhdGVnb3JpZXNBcnIubGVuZ3RoLTE7IGkrKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDA7IGogPD0gcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldLmxlbmd0aC0xOyBqKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJjYXRlZ29yaWVzV3JhcCA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciB6ID0gMDsgeiA8PSBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl0ubGVuZ3RoLTE7IHorKyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmNhdGVnb3JpZXNXcmFwICs9ICc8bGkgY2xhc3M9XCJzZWFyY2hfX2ZvdW5kLXN1YlwiPjxhIGhyZWY9XCInICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzNdW3pdICsgJ1wiPicgKyBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMl1bel0gKyAnPC9hPjwvbGk+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViY2F0ZWdvcmllc1dyYXAgKz0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0ciArPSAnPGxpPjxhIGhyZWY9XCInICsgcHJvZHVjdHNDYXRlZ29yaWVzQXJyW2ldWzFdICsgJ1wiPicgKyBwcm9kdWN0c0NhdGVnb3JpZXNBcnJbaV1bMF0gKyAnPC9hPjwvbGk+Jysgc3ViY2F0ZWdvcmllc1dyYXAgKycnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0ciArPSAnPC91bD4nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmZpbmQoJ2RpdjpmaXJzdCcpLmh0bWwocmVzdWx0U3RyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCcpLmZpbmQoJ2xpOm5vdCg6bHQoMTEpKScpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb3VudEl0ZW1zID0gX3Jlc3VsdC5maW5kKCcuc2VhcmNoX19mb3VuZCcpLmZpbmQoJ2xpJykubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfcmVzdWx0LmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5yZW1vdmVDbGFzcygndmlzaWJsZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2FqYXhSZXF1ZXN0ID0gIGZ1bmN0aW9uKCBpbnB1dCwgbiApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfcmVxdWVzdC5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QgPSAkLmFqYXgoIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IF9wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlucHV0LnZhbCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246J21haW5fc2VhcmNoJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICggbXNnICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIE9iamVjdC5rZXlzKG1zZykubGVuZ3RoICE9IDAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYWRkRGF0YSggbXNnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKFhNTEh0dHBSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChYTUxIdHRwUmVxdWVzdC5zdGF0dXNUZXh0ICE9IFwiYWJvcnRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG5cclxufSApKCk7IiwiKCBmdW5jdGlvbiAoKSB7XHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgJCgnLnZhbGlkYXRvcicpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEZvcm1WYWxpZGF0b3IoICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG5cclxuICAgIH0gKTtcclxuXHJcbiAgICB2YXIgRm9ybVZhbGlkYXRvciA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfZmllbGRzID0gX29iai5maW5kKCAnW3JlcXVpcmVkXScgKSxcclxuICAgICAgICAgICAgX2J0biA9IF9vYmouZmluZCggJ2J1dHRvblt0eXBlPVwic3VibWl0XCJdJyApLFxyXG4gICAgICAgICAgICBfcmF0ZSA9ICQoICcuYWRkLXJldmlld19fcmF0ZScgKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2NvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIF9vbkV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgX29ialswXS5vYmogPSBfc2VsZjtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9hZGROb3RUb3VjaGVkQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX2ZpZWxkcy5lYWNoKCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckl0ZW0gPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiggY3VySXRlbS52YWwoKSA9PT0gJycgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckl0ZW0uYWRkQ2xhc3MoICdub3QtdG91Y2hlZCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF92YWxpZGF0ZUZpZWxkKCBjdXJJdGVtICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfZmllbGRzLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXM6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJCggdGhpcyApLnJlbW92ZUNsYXNzKCAnbm90LXRvdWNoZWQnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAga2V5dXA6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRlRmllbGQoICQoIHRoaXMgKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGtleXByZXNzOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gJCggdGhpcyApLmF0dHIoICd0eXBlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHR5cGUgPT09ICd0ZWwnICl7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAoIGV2ZW50LndoaWNoICE9IDQ2IHx8ICQoIHRoaXMgKS52YWwoKS5pbmRleE9mKCAnLicgKSAhPSAtMSApICYmICggZXZlbnQud2hpY2ggPCA0OCB8fCBldmVudC53aGljaCA+IDU3ICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfcmF0ZS5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gJCggdGhpcyApLmZpbmQoICdpbnB1dCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZUNsYXNzKCAnbm90LXRvdWNoZWQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF92YWxpZGF0ZUZpZWxkKCBmaWVsZCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcbiAgICAgICAgICAgICAgICBfYnRuLm9uKCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FkZE5vdFRvdWNoZWRDbGFzcygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF9maWVsZHMuaGFzQ2xhc3MoJ25vdC10b3VjaGVkJykgfHwgX2ZpZWxkcy5oYXNDbGFzcygnbm90LXZhbGlkJykgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcubm90LXRvdWNoZWQ6Zmlyc3QnKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29iai5maW5kKCcubm90LXZhbGlkOmZpcnN0JykuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfbWFrZU5vdFZhbGlkID0gZnVuY3Rpb24gKCBmaWVsZCApIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkLmFkZENsYXNzKCAnbm90LXZhbGlkJyApO1xyXG4gICAgICAgICAgICAgICAgZmllbGQucmVtb3ZlQ2xhc3MoICd2YWxpZCcgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX21ha2VWYWxpZCA9IGZ1bmN0aW9uICggZmllbGQgKSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZC5yZW1vdmVDbGFzcyggJ25vdC12YWxpZCcgKTtcclxuICAgICAgICAgICAgICAgIGZpZWxkLmFkZENsYXNzKCAndmFsaWQnICk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF92YWxpZGF0ZUVtYWlsID0gZnVuY3Rpb24gKCBlbWFpbCApIHtcclxuICAgICAgICAgICAgICAgIHZhciByZSA9IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlLnRlc3QoZW1haWwpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfdmFsaWRhdGVGaWVsZCA9IGZ1bmN0aW9uICggZmllbGQgKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGZpZWxkLmF0dHIoICd0eXBlJyApLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBmaWVsZC5hdHRyKCAnbmFtZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiggdHlwZSA9PT0gJ2VtYWlsJyB8fCB0eXBlID09PSAndGV4dCcgKXtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGZpZWxkLnZhbCgpID09PSAnJyApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfbWFrZU5vdFZhbGlkKCBmaWVsZCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiggdHlwZSA9PT0gJ2VtYWlsJyApe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCAhX3ZhbGlkYXRlRW1haWwoIGZpZWxkLnZhbCgpICkgKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX21ha2VOb3RWYWxpZCggZmllbGQgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiggdHlwZSA9PT0gJ2hpZGRlbicgJiYgbmFtZSA9PT0gJ3JhdGluZycgKXtcclxuY29uc29sZS5sb2coZmllbGQudmFsKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBmaWVsZC52YWwoKSA8PSAwIHx8IGZpZWxkLnZhbCgpID09PSAnJyAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tYWtlTm90VmFsaWQoIGZpZWxkICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX21ha2VWYWxpZCggZmllbGQgKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgcHJvcGVydGllc1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXHJcbiAgICAgICAgX3NlbGYuY2hlY2tWYWxpZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHZhbGlkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIF9maWVsZHMuZWFjaCggZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJCggdGhpcyApLnJlbW92ZUNsYXNzKCAnbm90LXRvdWNoZWQnICk7XHJcbiAgICAgICAgICAgICAgICBpZiggJCggdGhpcyApLmhhc0NsYXNzKCAnbm90LXZhbGlkJyApICl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBfY29uc3RydWN0b3IoKTtcclxuICAgIH07XHJcblxyXG59ICkoKTsiLCIoIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICQoJy5hZGQtcmV2aWV3X19yYXRlJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgUmF0ZSggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBSYXRlID0gZnVuY3Rpb24gKG9iaikge1xyXG5cclxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xyXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCcjZWwnKSxcclxuICAgICAgICAgICAgX2lucHV0SGlkZGVuUmF0ZSA9IF9vYmouZmluZCgnaW5wdXRbdHlwZT1oaWRkZW5dJyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfaW5pdFJhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJhdGUgPSBfZWxlbSxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmF0aW5nID0gMCxcclxuICAgICAgICAgICAgICAgICAgICBtYXhSYXRpbmc9IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbihyYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2lucHV0SGlkZGVuUmF0ZS52YWwoIHJhdGluZyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coX2lucHV0SGlkZGVuUmF0ZS52YWwoKSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBteVJhdGluZyA9IHJhdGluZyhyYXRlLCBjdXJyZW50UmF0aW5nLCBtYXhSYXRpbmcsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX2luaXRSYXRlKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICB2YXIgZ2xvYmFsU2Nyb2xsRmxhZyA9IHRydWU7XHJcblxyXG4gICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAkKCcuZ29fcmV2aWV3JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICBuZXcgUmV2aWV3R28oICQodGhpcykgKTtcclxuXHJcbiAgICAgICAgfSApO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgUmV2aWV3R28gPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIF9yZXZpZXdzID0gJCgnLnJldmlld3MnKSxcclxuICAgICAgICAgICAgX2RvbSA9ICQoICdodG1sLCBib2R5JyksXHJcbiAgICAgICAgICAgIF9oZWFkZXIgPSAkKCcuc2l0ZV9faGVhZGVyJyk7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXHJcblxyXG4gICAgICAgIHZhciBfc2Nyb2xsRG93biA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0SGVhZGVyID0gX2hlYWRlci5pbm5lckhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIF9kb20uc3RvcCggdHJ1ZSwgZmFsc2UgKTtcclxuICAgICAgICAgICAgICAgIF9kb20uYW5pbWF0ZSgge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogX3Jldmlld3Mub2Zmc2V0KCkudG9wIC0gMzBcclxuXHJcbiAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcclxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oZWFkZXIuYWRkQ2xhc3MoICdzaXRlX19oZWFkZXJfaGlkZGVuJyApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRIZWFkZXIgPSBfaGVhZGVyLmlubmVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxTY3JvbGxGbGFnID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9zY3JvbGxEb3duKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xyXG5cclxuICAgICAgICBfaW5pdCgpO1xyXG4gICAgfTtcclxuXHJcbn0gKSgpOyIsIiggZnVuY3Rpb24oKXtcclxuXHJcbiAgICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICQoJy5wcm9kdWN0X2FkZGluZycpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgbmV3IEFkZFRvQ2FydEFuaW1hdGlvbiggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBBZGRUb0NhcnRBbmltYXRpb24gPSBmdW5jdGlvbiAob2JqKSB7XHJcblxyXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgdmFyIF9vYmogPSBvYmosXHJcbiAgICAgICAgICAgIF93aW5kb3cgPSAkKHdpbmRvdyksXHJcbiAgICAgICAgICAgIF9jYXJ0ID0gJCgnLmNhcnQnKSxcclxuICAgICAgICAgICAgX2hlYWRlciA9ICQoJy5zaXRlX19oZWFkZXInKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuXHJcbiAgICAgICAgdmFyIF9hbmltYXRlZEFkZGluZyA9IGZ1bmN0aW9uKCBldmVudCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfaGVhZGVyLnJlbW92ZUNsYXNzKCdzaXRlX19oZWFkZXJfaGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHBpYyA9ICQoJy5nYWxsZXJ5LXRvcCAuc2xpY2stc2xpZGU6Zmlyc3QnKS5kYXRhKCdpbWFnZScpLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBlID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwYWdlWCA9IGUucGFnZVgsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZVkgPSBlLnBhZ2VZO1xyXG5cclxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJzaXRlX19wcm9kdWN0IGhpZGRlblwiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTp1cmwoJysgcGljICsnKVwiPjwvZGl2PicpO1xyXG4gICAgICAgICAgICAgICAgJCgnLnNpdGVfX3Byb2R1Y3QnKS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6ICQoJy5nYWxsZXJ5LXRvcCcpLm9mZnNldCgpLnRvcCAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJCgnLmdhbGxlcnktdG9wJykub2Zmc2V0KCkubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJCgnLmdhbGxlcnktdG9wJykud2lkdGgoKSxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICQoJy5nYWxsZXJ5LXRvcCcpLmhlaWdodCgpXHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJy5zaXRlX19wcm9kdWN0JykuYWRkQ2xhc3MoJ3Zpc2libGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fcHJvZHVjdCcpLmNzcygge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IF9jYXJ0Lm9mZnNldCgpLnRvcCArIF9jYXJ0LmlubmVySGVpZ2h0KCkvMiAtICQoJy5zaXRlX19wcm9kdWN0JykuaGVpZ2h0KCkvMiAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IF9jYXJ0Lm9mZnNldCgpLmxlZnQgKyBfY2FydC5pbm5lcldpZHRoKCkvMiAtICQoJy5zaXRlX19wcm9kdWN0Jykud2lkdGgoKS8yXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDUwMCApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkKCcuc2l0ZV9fcHJvZHVjdCcpLnJlbW92ZUNsYXNzKCd2aXNpYmxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX3Byb2R1Y3QnKS5jc3MoIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtJzogJ3NjYWxlKDAuMyknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3NjYWxlKDAuMyknXHJcbiAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0sIDEwMDAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnLnNpdGVfX3Byb2R1Y3QnKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9LCAxMzAwICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIF9hbmltYXRlZEFkZGluZygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcbiAgICAgICAgX2luaXQoKTtcclxuICAgIH07XHJcblxyXG59ICkoKTsiLCJcInVzZSBzdHJpY3RcIjtcclxuKCBmdW5jdGlvbigpe1xyXG5cclxuICAgICQoIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgJC5lYWNoKCAkKCcucHJvZHVjdF9fYWRkJyksIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBQcm9kdWN0c1VwU2FscyggJCh0aGlzKSApO1xyXG5cclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgfSApO1xyXG5cclxuICAgIHZhciBQcm9kdWN0c1VwU2FscyA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIHByb3BlcnRpZXNcclxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBfb2JqID0gb2JqLFxyXG4gICAgICAgICAgICBfcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxyXG4gICAgICAgICAgICBfb2JqVmFsdWUgPSB7fSxcclxuICAgICAgICAgICAgX2FyciA9IFtdLFxyXG4gICAgICAgICAgICBfaW5wdXRIaWRkZW4gPSBfb2JqLmZpbmQoJ2lucHV0W3R5cGU9aGlkZGVuXVtuYW1lPXVwc2Fsc10nKSxcclxuICAgICAgICAgICAgX3NlbGVjdHNVcFNhbHMgPSBfb2JqLmZpbmQoJy5wcm9kdWN0c19fdXBzYWxzLWNob2ljZScpLFxyXG4gICAgICAgICAgICBfdG90YWxQcmljZSA9ICQoJy5wcm9kdWN0X191cHNhbHMtcHJpY2UnKTtcclxuXHJcbiAgICAgICAgLy9wcml2YXRlIG1ldGhvZHNcclxuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBfc2VsZWN0c1VwU2Fscy5vbigge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VySXRlbSA9ICQodGhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gY3VySXRlbVswXS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY3VySXRlbVswXS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF93cml0ZUluSGlkZGVuKG5hbWUsIHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZXF1ZXN0VXBTYWxzUHJvZHVjdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfcmVxdWVzdFVwU2Fsc1Byb2R1Y3QgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX3JlcXVlc3QuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIF9yZXF1ZXN0ID0gJC5hamF4KCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCdib2R5JykuYXR0cignZGF0YS1hY3Rpb24nKSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJ1cHNhbHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF9pbnB1dEhpZGRlbi52YWwoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxhZzogXCJ1cHNhbHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IF9vYmoucGFyZW50cygnLnByb2R1Y3QnKS5kYXRhKCdpZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ2V0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKG0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b3RhbFByaWNlLmZpbmQoJ3NwYW4nKS5odG1sKG0udG90YWxQcmljZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b3RhbFByaWNlLmFkZENsYXNzKCd2aXNpYmxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChYTUxIdHRwUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIFhNTEh0dHBSZXF1ZXN0LnN0YXR1c1RleHQgIT0gXCJhYm9ydFwiICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFUlJPUiEhIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF9zdGFydFZpZXcgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaTw9IF9zZWxlY3RzVXBTYWxzLmxlbmd0aC0xOyBpKysgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3QgPSBfc2VsZWN0c1VwU2Fsc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IHNlbGVjdC5nZXRBdHRyaWJ1dGUoJ25hbWUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBzZWxlY3RbMF0udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF93cml0ZUluSGlkZGVuKG5hbWUsIHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfd3JpdGVJbkhpZGRlbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgX29ialZhbHVlW25hbWVdID0gW3ZhbHVlXTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHN0ckZpbmlzaCA9ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0clZhbHVlcyA9ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ckZ1bGwgPSAnJyxcclxuICAgICAgICAgICAgICAgICAgICBhcnJBbGwgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IoIHZhciBrZXkgaW4gX29ialZhbHVlICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfYXJyID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gX29ialZhbHVlWyBrZXkgXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgX2Fyci5wdXNoKCBpdGVtICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDw9IF9hcnIubGVuZ3RoLTE7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyVmFsdWVzID0gX2Fyci5qb2luKCcsJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyRnVsbCA9IGtleSArICc9JyArIHN0clZhbHVlcztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYXJyQWxsLnB1c2goc3RyRnVsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN0ckZpbmlzaCA9IGFyckFsbC5qb2luKCcmJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIF9pbnB1dEhpZGRlbi52YWwoIHN0ckZpbmlzaCApO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2luaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfb2JqWzBdLm9iaiA9IF9zZWxmO1xyXG4gICAgICAgICAgICAgICAgX2FkZEV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgX3N0YXJ0VmlldygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXHJcblxyXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcclxuXHJcblxyXG4gICAgICAgIF9pbml0KCk7XHJcbiAgICB9O1xyXG5cclxufSApKCk7Il19
